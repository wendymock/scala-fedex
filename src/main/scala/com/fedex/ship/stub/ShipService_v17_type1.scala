// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.fedex.ship.stub

trait AccessorRoleType

object AccessorRoleType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AccessorRoleType = value match {
    case "SHIPMENT_COMPLETOR" => SHIPMENT_COMPLETOR
    case "SHIPMENT_INITIATOR" => SHIPMENT_INITIATOR

  }
}

case object SHIPMENT_COMPLETOR extends AccessorRoleType { override def toString = "SHIPMENT_COMPLETOR" }
case object SHIPMENT_INITIATOR extends AccessorRoleType { override def toString = "SHIPMENT_INITIATOR" }


/** Specifies additional labels to be produced. All required labels for shipments will be produced without the need to request additional labels. These are only available as thermal labels.
*/
case class AdditionalLabelsDetail(Type: com.fedex.ship.stub.AdditionalLabelsType,
  Count: BigInt)
      

trait AdditionalLabelsType

object AdditionalLabelsType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AdditionalLabelsType = value match {
    case "BROKER" => BROKERValue
    case "CONSIGNEE" => CONSIGNEEValue
    case "CUSTOMS" => CUSTOMS
    case "DESTINATION" => DESTINATION
    case "FREIGHT_REFERENCE" => FREIGHT_REFERENCE
    case "MANIFEST" => MANIFEST
    case "ORIGIN" => ORIGIN
    case "RECIPIENT" => RECIPIENTValue2
    case "SHIPPER" => SHIPPERValue2

  }
}

case object BROKERValue extends AdditionalLabelsType { override def toString = "BROKER" }
case object CONSIGNEEValue extends AdditionalLabelsType { override def toString = "CONSIGNEE" }
case object CUSTOMS extends AdditionalLabelsType { override def toString = "CUSTOMS" }
case object DESTINATION extends AdditionalLabelsType { override def toString = "DESTINATION" }
case object FREIGHT_REFERENCE extends AdditionalLabelsType { override def toString = "FREIGHT_REFERENCE" }
case object MANIFEST extends AdditionalLabelsType { override def toString = "MANIFEST" }
case object ORIGIN extends AdditionalLabelsType { override def toString = "ORIGIN" }
case object RECIPIENTValue2 extends AdditionalLabelsType { override def toString = "RECIPIENT" }
case object SHIPPERValue2 extends AdditionalLabelsType { override def toString = "SHIPPER" }


/** Descriptive data for a physical location. May be used as an actual physical address (place to which one could go), or as a container of "address parts" which should be handled as a unit (such as a city-state-ZIP combination within the US).
*/
case class Address(StreetLines: Seq[String] = Nil,
  City: Option[String] = None,
  StateOrProvinceCode: Option[String] = None,
  PostalCode: Option[String] = None,
  UrbanizationCode: Option[String] = None,
  CountryCode: Option[String] = None,
  CountryName: Option[String] = None,
  Residential: Option[Boolean] = None)
      


/** Specifies the details around the ADR license required for shipping.
*/
case class AdrLicenseDetail(LicenseOrPermitDetail: Option[com.fedex.ship.stub.LicenseOrPermitDetail] = None)
      


/** Specifies details for a package containing alcohol
*/
case class AlcoholDetail(RecipientType: Option[com.fedex.ship.stub.AlcoholRecipientType] = None)
      

trait AlcoholRecipientType

object AlcoholRecipientType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AlcoholRecipientType = value match {
    case "CONSUMER" => CONSUMER
    case "LICENSEE" => LICENSEE

  }
}

case object CONSUMER extends AlcoholRecipientType { override def toString = "CONSUMER" }
case object LICENSEE extends AlcoholRecipientType { override def toString = "LICENSEE" }


case class AssociatedShipmentDetail(Type: Option[com.fedex.ship.stub.AssociatedShipmentType] = None,
  Sender: Option[com.fedex.ship.stub.Party] = None,
  Recipient: Option[com.fedex.ship.stub.Party] = None,
  ServiceType: Option[com.fedex.ship.stub.ServiceType] = None,
  PackagingType: Option[com.fedex.ship.stub.PackagingType] = None,
  TrackingId: Option[com.fedex.ship.stub.TrackingId] = None,
  CustomerReferences: Seq[com.fedex.ship.stub.CustomerReference] = Nil,
  ShipmentOperationalDetail: Option[com.fedex.ship.stub.ShipmentOperationalDetail] = None,
  PackageOperationalDetail: Option[com.fedex.ship.stub.PackageOperationalDetail] = None,
  Label: Option[com.fedex.ship.stub.ShippingDocument] = None)
      

trait AssociatedShipmentType

object AssociatedShipmentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): AssociatedShipmentType = value match {
    case "COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN" => COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN
    case "COD_RETURN" => COD_RETURN
    case "DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN" => DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN

  }
}

case object COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN extends AssociatedShipmentType { override def toString = "COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN" }
case object COD_RETURN extends AssociatedShipmentType { override def toString = "COD_RETURN" }
case object DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN extends AssociatedShipmentType { override def toString = "DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN" }

trait B13AFilingOptionType

object B13AFilingOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): B13AFilingOptionType = value match {
    case "FEDEX_TO_STAMP" => FEDEX_TO_STAMP
    case "FILED_ELECTRONICALLY" => FILED_ELECTRONICALLY
    case "MANUALLY_ATTACHED" => MANUALLY_ATTACHED
    case "NOT_REQUIRED" => NOT_REQUIRED
    case "SUMMARY_REPORTING" => SUMMARY_REPORTING

  }
}

case object FEDEX_TO_STAMP extends B13AFilingOptionType { override def toString = "FEDEX_TO_STAMP" }
case object FILED_ELECTRONICALLY extends B13AFilingOptionType { override def toString = "FILED_ELECTRONICALLY" }
case object MANUALLY_ATTACHED extends B13AFilingOptionType { override def toString = "MANUALLY_ATTACHED" }
case object NOT_REQUIRED extends B13AFilingOptionType { override def toString = "NOT_REQUIRED" }
case object SUMMARY_REPORTING extends B13AFilingOptionType { override def toString = "SUMMARY_REPORTING" }

trait BarcodeSymbologyType

object BarcodeSymbologyType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): BarcodeSymbologyType = value match {
    case "CODABAR" => CODABAR
    case "CODE128" => CODE128
    case "CODE128B" => CODE128B
    case "CODE128C" => CODE128C
    case "CODE128_WIDEBAR" => CODE128_WIDEBAR
    case "CODE39" => CODE39
    case "CODE93" => CODE93
    case "I2OF5" => I2OF5
    case "PDF417" => PDF417
    case "POSTNET" => POSTNET
    case "QR_CODE" => QR_CODE
    case "UCC128" => UCC128

  }
}

case object CODABAR extends BarcodeSymbologyType { override def toString = "CODABAR" }
case object CODE128 extends BarcodeSymbologyType { override def toString = "CODE128" }
case object CODE128B extends BarcodeSymbologyType { override def toString = "CODE128B" }
case object CODE128C extends BarcodeSymbologyType { override def toString = "CODE128C" }
case object CODE128_WIDEBAR extends BarcodeSymbologyType { override def toString = "CODE128_WIDEBAR" }
case object CODE39 extends BarcodeSymbologyType { override def toString = "CODE39" }
case object CODE93 extends BarcodeSymbologyType { override def toString = "CODE93" }
case object I2OF5 extends BarcodeSymbologyType { override def toString = "I2OF5" }
case object PDF417 extends BarcodeSymbologyType { override def toString = "PDF417" }
case object POSTNET extends BarcodeSymbologyType { override def toString = "POSTNET" }
case object QR_CODE extends BarcodeSymbologyType { override def toString = "QR_CODE" }
case object UCC128 extends BarcodeSymbologyType { override def toString = "UCC128" }


/** Each instance of this data type represents a barcode whose content must be represented as binary data (i.e. not ASCII text).
*/
case class BinaryBarcode(Type: Option[com.fedex.ship.stub.BinaryBarcodeType] = None,
  Value: Option[scalaxb.Base64Binary] = None)
      

trait BinaryBarcodeType

object BinaryBarcodeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): BinaryBarcodeType = value match {
    case "COMMON_2D" => COMMON_2D

  }
}

case object COMMON_2D extends BinaryBarcodeType { override def toString = "COMMON_2D" }


case class BrokerDetail(Type: Option[com.fedex.ship.stub.BrokerType] = None,
  Broker: Option[com.fedex.ship.stub.Party] = None)
      

trait BrokerType

object BrokerType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): BrokerType = value match {
    case "EXPORT" => EXPORTValue2
    case "IMPORT" => IMPORT

  }
}

case object EXPORTValue2 extends BrokerType { override def toString = "EXPORT" }
case object IMPORT extends BrokerType { override def toString = "IMPORT" }

trait CarrierCodeType

object CarrierCodeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CarrierCodeType = value match {
    case "FDXC" => FDXC
    case "FDXE" => FDXE
    case "FDXG" => FDXG
    case "FXCC" => FXCC
    case "FXFR" => FXFR
    case "FXSP" => FXSP

  }
}

case object FDXC extends CarrierCodeType { override def toString = "FDXC" }
case object FDXE extends CarrierCodeType { override def toString = "FDXE" }
case object FDXG extends CarrierCodeType { override def toString = "FDXG" }
case object FXCC extends CarrierCodeType { override def toString = "FXCC" }
case object FXFR extends CarrierCodeType { override def toString = "FXFR" }
case object FXSP extends CarrierCodeType { override def toString = "FXSP" }


/** The instructions indicating how to print the Certificate of Origin ( e.g. whether or not to include the instructions, image type, etc ...)
*/
case class CertificateOfOriginDetail(DocumentFormat: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  CustomerImageUsages: Seq[com.fedex.ship.stub.CustomerImageUsage] = Nil)
      

trait ChargeBasisLevelType

object ChargeBasisLevelType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ChargeBasisLevelType = value match {
    case "CURRENT_PACKAGE" => CURRENT_PACKAGE
    case "SUM_OF_PACKAGES" => SUM_OF_PACKAGES

  }
}

case object CURRENT_PACKAGE extends ChargeBasisLevelType { override def toString = "CURRENT_PACKAGE" }
case object SUM_OF_PACKAGES extends ChargeBasisLevelType { override def toString = "SUM_OF_PACKAGES" }

trait ClearanceBrokerageType

object ClearanceBrokerageType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ClearanceBrokerageType = value match {
    case "BROKER_INCLUSIVE" => BROKER_INCLUSIVE
    case "BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER" => BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER
    case "BROKER_SELECT" => BROKER_SELECT
    case "BROKER_SELECT_NON_RESIDENT_IMPORTER" => BROKER_SELECT_NON_RESIDENT_IMPORTER
    case "BROKER_UNASSIGNED" => BROKER_UNASSIGNED

  }
}

case object BROKER_INCLUSIVE extends ClearanceBrokerageType { override def toString = "BROKER_INCLUSIVE" }
case object BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER extends ClearanceBrokerageType { override def toString = "BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER" }
case object BROKER_SELECT extends ClearanceBrokerageType { override def toString = "BROKER_SELECT" }
case object BROKER_SELECT_NON_RESIDENT_IMPORTER extends ClearanceBrokerageType { override def toString = "BROKER_SELECT_NON_RESIDENT_IMPORTER" }
case object BROKER_UNASSIGNED extends ClearanceBrokerageType { override def toString = "BROKER_UNASSIGNED" }


/** Descriptive data for the client submitting a transaction.
*/
case class ClientDetail(AccountNumber: String,
  MeterNumber: String,
  IntegratorId: Option[String] = None,
  Localization: Option[com.fedex.ship.stub.Localization] = None)
      

trait CodAddTransportationChargeBasisType

object CodAddTransportationChargeBasisType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CodAddTransportationChargeBasisType = value match {
    case "COD_SURCHARGE" => COD_SURCHARGE
    case "NET_CHARGE" => NET_CHARGEValue
    case "NET_FREIGHT" => NET_FREIGHTValue
    case "TOTAL_CUSTOMER_CHARGE" => TOTAL_CUSTOMER_CHARGE

  }
}

case object COD_SURCHARGE extends CodAddTransportationChargeBasisType { override def toString = "COD_SURCHARGE" }
case object NET_CHARGEValue extends CodAddTransportationChargeBasisType { override def toString = "NET_CHARGE" }
case object NET_FREIGHTValue extends CodAddTransportationChargeBasisType { override def toString = "NET_FREIGHT" }
case object TOTAL_CUSTOMER_CHARGE extends CodAddTransportationChargeBasisType { override def toString = "TOTAL_CUSTOMER_CHARGE" }


case class CodAddTransportationChargesDetail(RateTypeBasis: Option[com.fedex.ship.stub.RateTypeBasisType] = None,
  ChargeBasis: Option[com.fedex.ship.stub.CodAddTransportationChargeBasisType] = None,
  ChargeBasisLevel: Option[com.fedex.ship.stub.ChargeBasisLevelType] = None)
      

trait CodAdjustmentType

object CodAdjustmentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CodAdjustmentType = value match {
    case "CHARGES_ADDED" => CHARGES_ADDED
    case "NONE" => NONEValue2

  }
}

case object CHARGES_ADDED extends CodAdjustmentType { override def toString = "CHARGES_ADDED" }
case object NONEValue2 extends CodAdjustmentType { override def toString = "NONE" }

trait CodCollectionType

object CodCollectionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CodCollectionType = value match {
    case "ANY" => ANY
    case "CASH" => CASH
    case "COMPANY_CHECK" => COMPANY_CHECK
    case "GUARANTEED_FUNDS" => GUARANTEED_FUNDS
    case "PERSONAL_CHECK" => PERSONAL_CHECK

  }
}

case object ANY extends CodCollectionType { override def toString = "ANY" }
case object CASH extends CodCollectionType { override def toString = "CASH" }
case object COMPANY_CHECK extends CodCollectionType { override def toString = "COMPANY_CHECK" }
case object GUARANTEED_FUNDS extends CodCollectionType { override def toString = "GUARANTEED_FUNDS" }
case object PERSONAL_CHECK extends CodCollectionType { override def toString = "PERSONAL_CHECK" }


/** Descriptive data required for a FedEx COD (Collect-On-Delivery) shipment.
*/
case class CodDetail(CodCollectionAmount: Option[com.fedex.ship.stub.Money] = None,
  AddTransportationChargesDetail: Option[com.fedex.ship.stub.CodAddTransportationChargesDetail] = None,
  CollectionType: com.fedex.ship.stub.CodCollectionType,
  CodRecipient: Option[com.fedex.ship.stub.Party] = None,
  FinancialInstitutionContactAndAddress: Option[com.fedex.ship.stub.ContactAndAddress] = None,
  RemitToName: Option[String] = None,
  ReferenceIndicator: Option[com.fedex.ship.stub.CodReturnReferenceIndicatorType] = None,
  ReturnTrackingId: Option[com.fedex.ship.stub.TrackingId] = None)
      


/** Specifies the information associated with a package that has COD special service in a ground shipment.
*/
case class CodReturnPackageDetail(CollectionAmount: Option[com.fedex.ship.stub.Money] = None,
  AdjustmentType: Option[com.fedex.ship.stub.CodAdjustmentType] = None,
  Electronic: Option[Boolean] = None,
  Barcodes: Option[com.fedex.ship.stub.PackageBarcodes] = None,
  Label: Option[com.fedex.ship.stub.ShippingDocument] = None)
      

trait CodReturnReferenceIndicatorType

object CodReturnReferenceIndicatorType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CodReturnReferenceIndicatorType = value match {
    case "INVOICE" => INVOICE
    case "PO" => PO
    case "REFERENCE" => REFERENCE
    case "TRACKING" => TRACKING

  }
}

case object INVOICE extends CodReturnReferenceIndicatorType { override def toString = "INVOICE" }
case object PO extends CodReturnReferenceIndicatorType { override def toString = "PO" }
case object REFERENCE extends CodReturnReferenceIndicatorType { override def toString = "REFERENCE" }
case object TRACKING extends CodReturnReferenceIndicatorType { override def toString = "TRACKING" }


/** CommercialInvoice element is required for electronic upload of CI data. It will serve to create/transmit an Electronic Commercial Invoice through the FedEx Systems. Customers are responsible for printing their own Commercial Invoice.If you would likeFedEx to generate a Commercial Invoice and transmit it to Customs. for clearance purposes, you need to specify that in the ShippingDocumentSpecification element. If you would like a copy of the Commercial Invoice that FedEx generated returned to you in reply it needs to be specified in the ETDDetail/RequestedDocumentCopies element. Commercial Invoice support consists of maximum of 99 commodity line items.
*/
case class CommercialInvoice(Comments: Seq[String] = Nil,
  FreightCharge: Option[com.fedex.ship.stub.Money] = None,
  TaxesOrMiscellaneousCharge: Option[com.fedex.ship.stub.Money] = None,
  TaxesOrMiscellaneousChargeType: Option[com.fedex.ship.stub.TaxesOrMiscellaneousChargeType] = None,
  PackingCosts: Option[com.fedex.ship.stub.Money] = None,
  HandlingCosts: Option[com.fedex.ship.stub.Money] = None,
  SpecialInstructions: Option[String] = None,
  DeclarationStatement: Option[String] = None,
  PaymentTerms: Option[String] = None,
  Purpose: Option[com.fedex.ship.stub.PurposeOfShipmentType] = None,
  CustomerReferences: Seq[com.fedex.ship.stub.CustomerReference] = Nil,
  OriginatorName: Option[String] = None,
  TermsOfSale: Option[String] = None)
      


/** The instructions indicating how to print the Commercial Invoice( e.g. image type) Specifies characteristics of a shipping document to be produced.
*/
case class CommercialInvoiceDetail(Format: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  CustomerImageUsages: Seq[com.fedex.ship.stub.CustomerImageUsage] = Nil)
      


/** 
            For international multiple piece shipments, commodity information must be passed in the Master and on each child transaction.
            If this shipment cotains more than four commodities line items, the four highest valued should be included in the first 4 occurances for this request.
          
*/
case class Commodity(Name: Option[String] = None,
  NumberOfPieces: BigInt,
  Description: Option[String] = None,
  CountryOfManufacture: String,
  HarmonizedCode: Option[String] = None,
  Weight: com.fedex.ship.stub.Weight,
  Quantity: Option[BigDecimal] = None,
  QuantityUnits: Option[String] = None,
  AdditionalMeasures: Seq[com.fedex.ship.stub.Measure] = Nil,
  UnitPrice: Option[com.fedex.ship.stub.Money] = None,
  CustomsValue: Option[com.fedex.ship.stub.Money] = None,
  ExciseConditions: Seq[com.fedex.ship.stub.EdtExciseCondition] = Nil,
  ExportLicenseNumber: Option[String] = None,
  ExportLicenseExpirationDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  CIMarksAndNumbers: Option[String] = None,
  PartNumber: Option[String] = None,
  NaftaDetail: Option[com.fedex.ship.stub.NaftaCommodityDetail] = None)
      


/** Specifies the results of processing for the COD special service.
*/
case class CompletedCodDetail(CollectionAmount: Option[com.fedex.ship.stub.Money] = None,
  AdjustmentType: Option[com.fedex.ship.stub.CodAdjustmentType] = None)
      


case class CompletedEtdDetail(FolderId: Option[String] = None,
  UploadDocumentReferenceDetails: Seq[com.fedex.ship.stub.UploadDocumentReferenceDetail] = Nil)
      


/** Completed package-level hazardous commodity information for a single package.
*/
case class CompletedHazardousPackageDetail(ReferenceId: Option[String] = None,
  Accessibility: Option[com.fedex.ship.stub.DangerousGoodsAccessibilityType] = None,
  CargoAircraftOnly: Option[Boolean] = None,
  Regulation: Option[com.fedex.ship.stub.HazardousCommodityRegulationType] = None,
  RadioactiveTransportIndex: Option[BigDecimal] = None,
  LabelType: Option[com.fedex.ship.stub.RadioactiveLabelType] = None,
  Containers: Seq[com.fedex.ship.stub.ValidatedHazardousContainer] = Nil)
      


/** Computed shipment level hazardous commodity information.
*/
case class CompletedHazardousShipmentDetail(HazardousSummaryDetail: Option[com.fedex.ship.stub.CompletedHazardousSummaryDetail] = None,
  DryIceDetail: Option[com.fedex.ship.stub.ShipmentDryIceDetail] = None,
  AdrLicense: Option[com.fedex.ship.stub.AdrLicenseDetail] = None)
      


case class CompletedHazardousSummaryDetail(SmallQuantityExceptionPackageCount: Option[BigInt] = None)
      


case class CompletedHoldAtLocationDetail(HoldingLocation: Option[com.fedex.ship.stub.ContactAndAddress] = None,
  HoldingLocationType: Option[com.fedex.ship.stub.FedExLocationType] = None)
      


case class CompletedPackageDetail(SequenceNumber: Option[BigInt] = None,
  TrackingIds: Seq[com.fedex.ship.stub.TrackingId] = Nil,
  GroupNumber: Option[BigInt] = None,
  OversizeClass: Option[com.fedex.ship.stub.OversizeClassType] = None,
  PackageRating: Option[com.fedex.ship.stub.PackageRating] = None,
  OperationalDetail: Option[com.fedex.ship.stub.PackageOperationalDetail] = None,
  Label: Option[com.fedex.ship.stub.ShippingDocument] = None,
  PackageDocuments: Seq[com.fedex.ship.stub.ShippingDocument] = Nil,
  CodReturnDetail: Option[com.fedex.ship.stub.CodReturnPackageDetail] = None,
  SignatureOption: Option[com.fedex.ship.stub.SignatureOptionType] = None,
  DryIceWeight: Option[com.fedex.ship.stub.Weight] = None,
  HazardousPackageDetail: Option[com.fedex.ship.stub.CompletedHazardousPackageDetail] = None)
      


case class CompletedShipmentDetail(UsDomestic: Option[Boolean] = None,
  CarrierCode: Option[com.fedex.ship.stub.CarrierCodeType] = None,
  MasterTrackingId: Option[com.fedex.ship.stub.TrackingId] = None,
  ServiceTypeDescription: Option[String] = None,
  PackagingDescription: Option[String] = None,
  OperationalDetail: Option[com.fedex.ship.stub.ShipmentOperationalDetail] = None,
  AccessDetail: Option[com.fedex.ship.stub.PendingShipmentAccessDetail] = None,
  TagDetail: Option[com.fedex.ship.stub.CompletedTagDetail] = None,
  SmartPostDetail: Option[com.fedex.ship.stub.CompletedSmartPostDetail] = None,
  HazardousShipmentDetail: Option[com.fedex.ship.stub.CompletedHazardousShipmentDetail] = None,
  ShipmentRating: Option[com.fedex.ship.stub.ShipmentRating] = None,
  CompletedHoldAtLocationDetail: Option[com.fedex.ship.stub.CompletedHoldAtLocationDetail] = None,
  ExportComplianceStatement: Option[String] = None,
  CompletedEtdDetail: Option[com.fedex.ship.stub.CompletedEtdDetail] = None,
  ShipmentDocuments: Seq[com.fedex.ship.stub.ShippingDocument] = Nil,
  AssociatedShipments: Seq[com.fedex.ship.stub.AssociatedShipmentDetail] = Nil,
  CompletedCodDetail: Option[com.fedex.ship.stub.CompletedCodDetail] = None,
  CompletedPackageDetails: Seq[com.fedex.ship.stub.CompletedPackageDetail] = Nil)
      


/** Provides reply information specific to SmartPost shipments.
*/
case class CompletedSmartPostDetail(PickUpCarrier: Option[com.fedex.ship.stub.CarrierCodeType] = None,
  Machinable: Option[Boolean] = None)
      


/** Provides reply information specific to a tag request.
*/
case class CompletedTagDetail(ConfirmationNumber: String,
  AccessTime: Option[javax.xml.datatype.Duration] = None,
  CutoffTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  Location: Option[String] = None,
  DeliveryCommitment: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  DispatchDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      


/** Defines additional data to print in the Configurable portion of the label, this allows you to print the same type information on the label that can also be printed on the doc tab.
*/
case class ConfigurableLabelReferenceEntry(ZoneNumber: BigInt,
  Header: Option[String] = None,
  DataField: Option[String] = None,
  LiteralValue: Option[String] = None)
      


/** The descriptive data for a point-of-contact person.
*/
case class Contact(ContactId: Option[String] = None,
  PersonName: Option[String] = None,
  Title: Option[String] = None,
  CompanyName: Option[String] = None,
  PhoneNumber: Option[String] = None,
  PhoneExtension: Option[String] = None,
  TollFreePhoneNumber: Option[String] = None,
  PagerNumber: Option[String] = None,
  FaxNumber: Option[String] = None,
  EMailAddress: Option[String] = None)
      


case class ContactAndAddress(Contact: Option[com.fedex.ship.stub.Contact] = None,
  Address: Option[com.fedex.ship.stub.Address] = None)
      


/** Content Record.
*/
case class ContentRecord(PartNumber: Option[String] = None,
  ItemNumber: Option[String] = None,
  ReceivedQuantity: Option[BigInt] = None,
  Description: Option[String] = None)
      


/** Currency exchange rate information.
*/
case class CurrencyExchangeRate(FromCurrency: Option[String] = None,
  IntoCurrency: Option[String] = None,
  Rate: Option[BigDecimal] = None)
      


case class CustomDeliveryWindowDetail(Type: Option[com.fedex.ship.stub.CustomDeliveryWindowType] = None,
  RequestTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  RequestRange: Option[com.fedex.ship.stub.DateRange] = None,
  RequestDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      

trait CustomDeliveryWindowType

object CustomDeliveryWindowType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomDeliveryWindowType = value match {
    case "AFTER" => AFTER
    case "BEFORE" => BEFORE
    case "BETWEEN" => BETWEEN
    case "ON" => ON

  }
}

case object AFTER extends CustomDeliveryWindowType { override def toString = "AFTER" }
case object BEFORE extends CustomDeliveryWindowType { override def toString = "BEFORE" }
case object BETWEEN extends CustomDeliveryWindowType { override def toString = "BETWEEN" }
case object ON extends CustomDeliveryWindowType { override def toString = "ON" }


/** Data required to produce a custom-specified document, either at shipment or package level.
*/
case class CustomDocumentDetail(Format: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  LabelPrintingOrientation: Option[com.fedex.ship.stub.LabelPrintingOrientationType] = None,
  LabelRotation: Option[com.fedex.ship.stub.LabelRotationType] = None,
  SpecificationId: Option[String] = None,
  CustomDocumentIdentifier: Option[String] = None,
  DocTabContent: Option[com.fedex.ship.stub.DocTabContent] = None,
  CustomContent: Option[com.fedex.ship.stub.CustomLabelDetail] = None)
      


/** Constructed string, based on format and zero or more data fields, printed in specified barcode symbology.
*/
case class CustomLabelBarcodeEntry(Position: com.fedex.ship.stub.CustomLabelPosition,
  Format: Option[String] = None,
  DataFields: Seq[String] = Nil,
  BarHeight: Option[Int] = None,
  ThinBarWidth: Option[Int] = None,
  BarcodeSymbology: com.fedex.ship.stub.BarcodeSymbologyType)
      


/** Solid (filled) rectangular area on label.
*/
case class CustomLabelBoxEntry(TopLeftCorner: com.fedex.ship.stub.CustomLabelPosition,
  BottomRightCorner: com.fedex.ship.stub.CustomLabelPosition)
      

trait CustomLabelCoordinateUnits

object CustomLabelCoordinateUnits {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomLabelCoordinateUnits = value match {
    case "MILS" => MILS
    case "PIXELS" => PIXELS

  }
}

case object MILS extends CustomLabelCoordinateUnits { override def toString = "MILS" }
case object PIXELS extends CustomLabelCoordinateUnits { override def toString = "PIXELS" }


case class CustomLabelDetail(CoordinateUnits: Option[com.fedex.ship.stub.CustomLabelCoordinateUnits] = None,
  TextEntries: Seq[com.fedex.ship.stub.CustomLabelTextEntry] = Nil,
  GraphicEntries: Seq[com.fedex.ship.stub.CustomLabelGraphicEntry] = Nil,
  BoxEntries: Seq[com.fedex.ship.stub.CustomLabelBoxEntry] = Nil,
  TextBoxEntries: Seq[com.fedex.ship.stub.CustomLabelTextBoxEntry] = Nil,
  BarcodeEntries: Seq[com.fedex.ship.stub.CustomLabelBarcodeEntry] = Nil)
      


/** Image to be included from printer's memory, or from a local file for offline clients.
*/
case class CustomLabelGraphicEntry(Position: Option[com.fedex.ship.stub.CustomLabelPosition] = None,
  PrinterGraphicId: Option[String] = None,
  FileGraphicFullName: Option[String] = None)
      


case class CustomLabelPosition(X: BigInt,
  Y: Int)
      


/** Constructed string, based on format and zero or more data fields, printed in specified printer font (for thermal labels) or generic font/size (for plain paper labels).
*/
case class CustomLabelTextBoxEntry(TopLeftCorner: Option[com.fedex.ship.stub.CustomLabelPosition] = None,
  BottomRightCorner: Option[com.fedex.ship.stub.CustomLabelPosition] = None,
  Position: Option[com.fedex.ship.stub.CustomLabelPosition] = None,
  Format: Option[String] = None,
  DataFields: Seq[String] = Nil,
  ThermalFontId: Option[String] = None,
  FontName: Option[String] = None,
  FontSize: Option[BigInt] = None,
  Rotation: Option[com.fedex.ship.stub.RotationType] = None)
      


/** Constructed string, based on format and zero or more data fields, printed in specified printer font (for thermal labels) or generic font/size (for plain paper labels).
*/
case class CustomLabelTextEntry(Position: com.fedex.ship.stub.CustomLabelPosition,
  Format: Option[String] = None,
  DataFields: Seq[String] = Nil,
  ThermalFontId: Option[String] = None,
  FontName: Option[String] = None,
  FontSize: Option[BigInt] = None,
  Rotation: Option[com.fedex.ship.stub.RotationType] = None)
      


case class CustomerImageUsage(Type: Option[com.fedex.ship.stub.CustomerImageUsageType] = None,
  Id: Option[com.fedex.ship.stub.ImageId] = None)
      

trait CustomerImageUsageType

object CustomerImageUsageType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomerImageUsageType = value match {
    case "LETTER_HEAD" => LETTER_HEAD
    case "SIGNATURE" => SIGNATURE

  }
}

case object LETTER_HEAD extends CustomerImageUsageType { override def toString = "LETTER_HEAD" }
case object SIGNATURE extends CustomerImageUsageType { override def toString = "SIGNATURE" }


/** Reference information to be associated with this package.
*/
case class CustomerReference(CustomerReferenceType: com.fedex.ship.stub.CustomerReferenceType,
  Value: String)
      

trait CustomerReferenceType

object CustomerReferenceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomerReferenceType = value match {
    case "BILL_OF_LADING" => BILL_OF_LADING
    case "CUSTOMER_REFERENCE" => CUSTOMER_REFERENCE
    case "DEPARTMENT_NUMBER" => DEPARTMENT_NUMBER
    case "ELECTRONIC_PRODUCT_CODE" => ELECTRONIC_PRODUCT_CODE
    case "INTRACOUNTRY_REGULATORY_REFERENCE" => INTRACOUNTRY_REGULATORY_REFERENCE
    case "INVOICE_NUMBER" => INVOICE_NUMBER
    case "P_O_NUMBER" => P_O_NUMBER
    case "RMA_ASSOCIATION" => RMA_ASSOCIATION
    case "SHIPMENT_INTEGRITY" => SHIPMENT_INTEGRITY
    case "STORE_NUMBER" => STORE_NUMBER

  }
}

case object BILL_OF_LADING extends CustomerReferenceType { override def toString = "BILL_OF_LADING" }
case object CUSTOMER_REFERENCE extends CustomerReferenceType { override def toString = "CUSTOMER_REFERENCE" }
case object DEPARTMENT_NUMBER extends CustomerReferenceType { override def toString = "DEPARTMENT_NUMBER" }
case object ELECTRONIC_PRODUCT_CODE extends CustomerReferenceType { override def toString = "ELECTRONIC_PRODUCT_CODE" }
case object INTRACOUNTRY_REGULATORY_REFERENCE extends CustomerReferenceType { override def toString = "INTRACOUNTRY_REGULATORY_REFERENCE" }
case object INVOICE_NUMBER extends CustomerReferenceType { override def toString = "INVOICE_NUMBER" }
case object P_O_NUMBER extends CustomerReferenceType { override def toString = "P_O_NUMBER" }
case object RMA_ASSOCIATION extends CustomerReferenceType { override def toString = "RMA_ASSOCIATION" }
case object SHIPMENT_INTEGRITY extends CustomerReferenceType { override def toString = "SHIPMENT_INTEGRITY" }
case object STORE_NUMBER extends CustomerReferenceType { override def toString = "STORE_NUMBER" }


/** Allows customer-specified control of label content.
*/
case class CustomerSpecifiedLabelDetail(DocTabContent: Option[com.fedex.ship.stub.DocTabContent] = None,
  CustomContentPosition: Option[com.fedex.ship.stub.RelativeVerticalPositionType] = None,
  CustomContent: Option[com.fedex.ship.stub.CustomLabelDetail] = None,
  ConfigurableReferenceEntries: Seq[com.fedex.ship.stub.ConfigurableLabelReferenceEntry] = Nil,
  MaskedData: Seq[com.fedex.ship.stub.LabelMaskableDataType] = Nil,
  SecondaryBarcode: Option[com.fedex.ship.stub.SecondaryBarcodeType] = None,
  TermsAndConditionsLocalization: Option[com.fedex.ship.stub.Localization] = None,
  RegulatoryLabels: Seq[com.fedex.ship.stub.RegulatoryLabelContentDetail] = Nil,
  AdditionalLabels: Seq[com.fedex.ship.stub.AdditionalLabelsDetail] = Nil,
  AirWaybillSuppressionCount: Option[BigInt] = None)
      

trait CustomerSpecifiedLabelGenerationOptionType

object CustomerSpecifiedLabelGenerationOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomerSpecifiedLabelGenerationOptionType = value match {
    case "CONTENT_ON_SHIPPING_LABEL_ONLY" => CONTENT_ON_SHIPPING_LABEL_ONLY
    case "CONTENT_ON_SHIPPING_LABEL_PREFERRED" => CONTENT_ON_SHIPPING_LABEL_PREFERRED
    case "CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY" => CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY

  }
}

case object CONTENT_ON_SHIPPING_LABEL_ONLY extends CustomerSpecifiedLabelGenerationOptionType { override def toString = "CONTENT_ON_SHIPPING_LABEL_ONLY" }
case object CONTENT_ON_SHIPPING_LABEL_PREFERRED extends CustomerSpecifiedLabelGenerationOptionType { override def toString = "CONTENT_ON_SHIPPING_LABEL_PREFERRED" }
case object CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY extends CustomerSpecifiedLabelGenerationOptionType { override def toString = "CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY" }


case class CustomsClearanceDetail(Brokers: Seq[com.fedex.ship.stub.BrokerDetail] = Nil,
  ClearanceBrokerage: Option[com.fedex.ship.stub.ClearanceBrokerageType] = None,
  CustomsOptions: Option[com.fedex.ship.stub.CustomsOptionDetail] = None,
  ImporterOfRecord: Option[com.fedex.ship.stub.Party] = None,
  RecipientCustomsId: Option[com.fedex.ship.stub.RecipientCustomsId] = None,
  DutiesPayment: Option[com.fedex.ship.stub.Payment] = None,
  DocumentContent: Option[com.fedex.ship.stub.InternationalDocumentContentType] = None,
  CustomsValue: Option[com.fedex.ship.stub.Money] = None,
  FreightOnValue: Option[com.fedex.ship.stub.FreightOnValueType] = None,
  InsuranceCharges: Option[com.fedex.ship.stub.Money] = None,
  PartiesToTransactionAreRelated: Option[Boolean] = None,
  CommercialInvoice: Option[com.fedex.ship.stub.CommercialInvoice] = None,
  Commodities: Seq[com.fedex.ship.stub.Commodity] = Nil,
  ExportDetail: Option[com.fedex.ship.stub.ExportDetail] = None,
  RegulatoryControls: Seq[com.fedex.ship.stub.RegulatoryControlType] = Nil,
  DeclarationStatementDetail: Option[com.fedex.ship.stub.CustomsDeclarationStatementDetail] = None)
      


/** This provides the information necessary to identify the different statements, declarations, acts, and/or certifications that apply to this shipment.
*/
case class CustomsDeclarationStatementDetail(Types: Seq[com.fedex.ship.stub.CustomsDeclarationStatementType] = Nil,
  NaftaLowValueStatementDetail: Option[com.fedex.ship.stub.NaftaLowValueStatementDetail] = None)
      

trait CustomsDeclarationStatementType

object CustomsDeclarationStatementType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomsDeclarationStatementType = value match {
    case "NAFTA_LOW_VALUE" => NAFTA_LOW_VALUE

  }
}

case object NAFTA_LOW_VALUE extends CustomsDeclarationStatementType { override def toString = "NAFTA_LOW_VALUE" }


case class CustomsOptionDetail(Type: Option[com.fedex.ship.stub.CustomsOptionType] = None,
  Description: Option[String] = None)
      

trait CustomsOptionType

object CustomsOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomsOptionType = value match {
    case "COURTESY_RETURN_LABEL" => COURTESY_RETURN_LABEL
    case "EXHIBITION_TRADE_SHOW" => EXHIBITION_TRADE_SHOW
    case "FAULTY_ITEM" => FAULTY_ITEM
    case "FOLLOWING_REPAIR" => FOLLOWING_REPAIR
    case "FOR_REPAIR" => FOR_REPAIR
    case "ITEM_FOR_LOAN" => ITEM_FOR_LOAN
    case "OTHER" => OTHERValue4
    case "REJECTED" => REJECTED
    case "REPLACEMENT" => REPLACEMENT
    case "TRIAL" => TRIAL

  }
}

case object COURTESY_RETURN_LABEL extends CustomsOptionType { override def toString = "COURTESY_RETURN_LABEL" }
case object EXHIBITION_TRADE_SHOW extends CustomsOptionType { override def toString = "EXHIBITION_TRADE_SHOW" }
case object FAULTY_ITEM extends CustomsOptionType { override def toString = "FAULTY_ITEM" }
case object FOLLOWING_REPAIR extends CustomsOptionType { override def toString = "FOLLOWING_REPAIR" }
case object FOR_REPAIR extends CustomsOptionType { override def toString = "FOR_REPAIR" }
case object ITEM_FOR_LOAN extends CustomsOptionType { override def toString = "ITEM_FOR_LOAN" }
case object OTHERValue4 extends CustomsOptionType { override def toString = "OTHER" }
case object REJECTED extends CustomsOptionType { override def toString = "REJECTED" }
case object REPLACEMENT extends CustomsOptionType { override def toString = "REPLACEMENT" }
case object TRIAL extends CustomsOptionType { override def toString = "TRIAL" }

trait CustomsRoleType

object CustomsRoleType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): CustomsRoleType = value match {
    case "EXPORTER" => EXPORTER
    case "IMPORTER" => IMPORTER
    case "LEGAL_AGENT" => LEGAL_AGENT
    case "PRODUCER" => PRODUCER

  }
}

case object EXPORTER extends CustomsRoleType { override def toString = "EXPORTER" }
case object IMPORTER extends CustomsRoleType { override def toString = "IMPORTER" }
case object LEGAL_AGENT extends CustomsRoleType { override def toString = "LEGAL_AGENT" }
case object PRODUCER extends CustomsRoleType { override def toString = "PRODUCER" }

trait DangerousGoodsAccessibilityType

object DangerousGoodsAccessibilityType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DangerousGoodsAccessibilityType = value match {
    case "ACCESSIBLE" => ACCESSIBLE
    case "INACCESSIBLE" => INACCESSIBLE

  }
}

case object ACCESSIBLE extends DangerousGoodsAccessibilityType { override def toString = "ACCESSIBLE" }
case object INACCESSIBLE extends DangerousGoodsAccessibilityType { override def toString = "INACCESSIBLE" }


/** Describes an approved container used to package dangerous goods commodities. This does not describe any individual inner receptacles that may be within this container.
*/
case class DangerousGoodsContainer(PackingType: Option[com.fedex.ship.stub.HazardousContainerPackingType] = None,
  ContainerType: Option[String] = None,
  RadioactiveContainerClass: Option[com.fedex.ship.stub.RadioactiveContainerClassType] = None,
  NumberOfContainers: Option[BigInt] = None,
  HazardousCommodities: Seq[com.fedex.ship.stub.HazardousCommodityContent] = Nil)
      


/** The descriptive data required for a FedEx shipment containing dangerous goods (hazardous materials).
*/
case class DangerousGoodsDetail(Regulation: Option[com.fedex.ship.stub.HazardousCommodityRegulationType] = None,
  Accessibility: Option[com.fedex.ship.stub.DangerousGoodsAccessibilityType] = None,
  CargoAircraftOnly: Option[Boolean] = None,
  Options: Seq[com.fedex.ship.stub.HazardousCommodityOptionType] = Nil,
  PackingOption: Option[com.fedex.ship.stub.DangerousGoodsPackingOptionType] = None,
  ReferenceId: Option[String] = None,
  Containers: Seq[com.fedex.ship.stub.DangerousGoodsContainer] = Nil,
  Packaging: Option[com.fedex.ship.stub.HazardousCommodityPackagingDetail] = None,
  Signatory: Option[com.fedex.ship.stub.DangerousGoodsSignatory] = None,
  EmergencyContactNumber: Option[String] = None,
  Offeror: Option[String] = None,
  InfectiousSubstanceResponsibleContact: Option[com.fedex.ship.stub.Contact] = None,
  AdditionalHandling: Option[String] = None,
  RadioactivityDetail: Option[com.fedex.ship.stub.RadioactivityDetail] = None)
      

trait DangerousGoodsPackingOptionType

object DangerousGoodsPackingOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DangerousGoodsPackingOptionType = value match {
    case "OVERPACK" => OVERPACK

  }
}

case object OVERPACK extends DangerousGoodsPackingOptionType { override def toString = "OVERPACK" }


/** The instructions indicating how to print the 1421c form for dangerous goods shipment.
*/
case class DangerousGoodsShippersDeclarationDetail(Format: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  CustomerImageUsages: Seq[com.fedex.ship.stub.CustomerImageUsage] = Nil)
      


/** Specifies that name, title and place of the signatory responsible for the dangerous goods shipment.
*/
case class DangerousGoodsSignatory(ContactName: Option[String] = None,
  Title: Option[String] = None,
  Place: Option[String] = None)
      


case class DateRange(Begins: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  Ends: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      

trait DayOfWeekType

object DayOfWeekType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DayOfWeekType = value match {
    case "FRI" => FRI
    case "MON" => MON
    case "SAT" => SAT
    case "SUN" => SUN
    case "THU" => THU
    case "TUE" => TUE
    case "WED" => WED

  }
}

case object FRI extends DayOfWeekType { override def toString = "FRI" }
case object MON extends DayOfWeekType { override def toString = "MON" }
case object SAT extends DayOfWeekType { override def toString = "SAT" }
case object SUN extends DayOfWeekType { override def toString = "SUN" }
case object THU extends DayOfWeekType { override def toString = "THU" }
case object TUE extends DayOfWeekType { override def toString = "TUE" }
case object WED extends DayOfWeekType { override def toString = "WED" }


/** Descriptive data sent to FedEx by a customer in order to delete a package.
*/
case class DeleteShipmentRequest(WebAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail,
  ClientDetail: com.fedex.ship.stub.ClientDetail,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId,
  ShipTimestamp: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  TrackingId: Option[com.fedex.ship.stub.TrackingId] = None,
  DeletionControl: com.fedex.ship.stub.DeletionControlType)
      


case class DeleteTagRequest(WebAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail,
  ClientDetail: com.fedex.ship.stub.ClientDetail,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId,
  DispatchLocationId: Option[String] = None,
  DispatchDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  Payment: com.fedex.ship.stub.Payment,
  ConfirmationNumber: String)
      

trait DeletionControlType

object DeletionControlType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DeletionControlType = value match {
    case "DELETE_ALL_PACKAGES" => DELETE_ALL_PACKAGES
    case "DELETE_ENTIRE_CONSOLIDATION" => DELETE_ENTIRE_CONSOLIDATION
    case "DELETE_ONE_PACKAGE" => DELETE_ONE_PACKAGE
    case "LEGACY" => LEGACY

  }
}

case object DELETE_ALL_PACKAGES extends DeletionControlType { override def toString = "DELETE_ALL_PACKAGES" }
case object DELETE_ENTIRE_CONSOLIDATION extends DeletionControlType { override def toString = "DELETE_ENTIRE_CONSOLIDATION" }
case object DELETE_ONE_PACKAGE extends DeletionControlType { override def toString = "DELETE_ONE_PACKAGE" }
case object LEGACY extends DeletionControlType { override def toString = "LEGACY" }


case class DeliveryOnInvoiceAcceptanceDetail(Recipient: Option[com.fedex.ship.stub.Party] = None,
  TrackingId: Option[com.fedex.ship.stub.TrackingId] = None)
      


/** Data required to complete the Destionation Control Statement for US exports.
*/
case class DestinationControlDetail(StatementTypes: Seq[com.fedex.ship.stub.DestinationControlStatementType] = Nil,
  DestinationCountries: Option[String] = None,
  EndUser: Option[String] = None)
      

trait DestinationControlStatementType

object DestinationControlStatementType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DestinationControlStatementType = value match {
    case "DEPARTMENT_OF_COMMERCE" => DEPARTMENT_OF_COMMERCE
    case "DEPARTMENT_OF_STATE" => DEPARTMENT_OF_STATE

  }
}

case object DEPARTMENT_OF_COMMERCE extends DestinationControlStatementType { override def toString = "DEPARTMENT_OF_COMMERCE" }
case object DEPARTMENT_OF_STATE extends DestinationControlStatementType { override def toString = "DEPARTMENT_OF_STATE" }


/** The dimensions of this package and the unit type used for the measurements.
*/
case class Dimensions(Length: BigInt,
  Width: BigInt,
  Height: BigInt,
  Units: com.fedex.ship.stub.LinearUnits)
      


case class DocTabContent(DocTabContentType: com.fedex.ship.stub.DocTabContentType,
  Zone001: Option[com.fedex.ship.stub.DocTabContentZone001] = None,
  Barcoded: Option[com.fedex.ship.stub.DocTabContentBarcoded] = None)
      


case class DocTabContentBarcoded(Symbology: Option[com.fedex.ship.stub.BarcodeSymbologyType] = None,
  Specification: com.fedex.ship.stub.DocTabZoneSpecification)
      

trait DocTabContentType

object DocTabContentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DocTabContentType = value match {
    case "BARCODED" => BARCODED
    case "CUSTOM" => CUSTOM
    case "MINIMUM" => MINIMUM
    case "STANDARD" => STANDARD
    case "ZONE001" => ZONE001

  }
}

case object BARCODED extends DocTabContentType { override def toString = "BARCODED" }
case object CUSTOM extends DocTabContentType { override def toString = "CUSTOM" }
case object MINIMUM extends DocTabContentType { override def toString = "MINIMUM" }
case object STANDARD extends DocTabContentType { override def toString = "STANDARD" }
case object ZONE001 extends DocTabContentType { override def toString = "ZONE001" }


case class DocTabContentZone001(DocTabZoneSpecifications: com.fedex.ship.stub.DocTabZoneSpecification*)
      

trait DocTabZoneJustificationType

object DocTabZoneJustificationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DocTabZoneJustificationType = value match {
    case "LEFT" => LEFTValue
    case "RIGHT" => RIGHTValue

  }
}

case object LEFTValue extends DocTabZoneJustificationType { override def toString = "LEFT" }
case object RIGHTValue extends DocTabZoneJustificationType { override def toString = "RIGHT" }


case class DocTabZoneSpecification(ZoneNumber: BigInt,
  Header: Option[String] = None,
  DataField: Option[String] = None,
  LiteralValue: Option[String] = None,
  Justification: Option[com.fedex.ship.stub.DocTabZoneJustificationType] = None)
      

trait DocumentFormatOptionType

object DocumentFormatOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DocumentFormatOptionType = value match {
    case "SUPPRESS_ADDITIONAL_LANGUAGES" => SUPPRESS_ADDITIONAL_LANGUAGES

  }
}

case object SUPPRESS_ADDITIONAL_LANGUAGES extends DocumentFormatOptionType { override def toString = "SUPPRESS_ADDITIONAL_LANGUAGES" }


case class DocumentFormatOptionsRequested(Options: com.fedex.ship.stub.DocumentFormatOptionType*)
      

trait DropoffType

object DropoffType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): DropoffType = value match {
    case "BUSINESS_SERVICE_CENTER" => BUSINESS_SERVICE_CENTER
    case "DROP_BOX" => DROP_BOX
    case "REGULAR_PICKUP" => REGULAR_PICKUP
    case "REQUEST_COURIER" => REQUEST_COURIER
    case "STATION" => STATION

  }
}

case object BUSINESS_SERVICE_CENTER extends DropoffType { override def toString = "BUSINESS_SERVICE_CENTER" }
case object DROP_BOX extends DropoffType { override def toString = "DROP_BOX" }
case object REGULAR_PICKUP extends DropoffType { override def toString = "REGULAR_PICKUP" }
case object REQUEST_COURIER extends DropoffType { override def toString = "REQUEST_COURIER" }
case object STATION extends DropoffType { override def toString = "STATION" }


/** Describes specific information about the email label shipment.
*/
case class EMailLabelDetail(Message: Option[String] = None,
  Recipients: Seq[com.fedex.ship.stub.EMailRecipient] = Nil)
      

trait EMailNotificationAggregationType

object EMailNotificationAggregationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EMailNotificationAggregationType = value match {
    case "PER_PACKAGE" => PER_PACKAGE
    case "PER_SHIPMENT" => PER_SHIPMENT

  }
}

case object PER_PACKAGE extends EMailNotificationAggregationType { override def toString = "PER_PACKAGE" }
case object PER_SHIPMENT extends EMailNotificationAggregationType { override def toString = "PER_SHIPMENT" }


/** Information describing email notifications that will be sent in relation to events that occur during package movement
*/
case class EMailNotificationDetail(AggregationType: Option[com.fedex.ship.stub.EMailNotificationAggregationType] = None,
  PersonalMessage: Option[String] = None,
  Recipients: Seq[com.fedex.ship.stub.EMailNotificationRecipient] = Nil)
      

trait EMailNotificationEventType

object EMailNotificationEventType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EMailNotificationEventType = value match {
    case "ON_DELIVERY" => ON_DELIVERY
    case "ON_EXCEPTION" => ON_EXCEPTION
    case "ON_SHIPMENT" => ON_SHIPMENT
    case "ON_TENDER" => ON_TENDER

  }
}

case object ON_DELIVERY extends EMailNotificationEventType { override def toString = "ON_DELIVERY" }
case object ON_EXCEPTION extends EMailNotificationEventType { override def toString = "ON_EXCEPTION" }
case object ON_SHIPMENT extends EMailNotificationEventType { override def toString = "ON_SHIPMENT" }
case object ON_TENDER extends EMailNotificationEventType { override def toString = "ON_TENDER" }

trait EMailNotificationFormatType

object EMailNotificationFormatType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EMailNotificationFormatType = value match {
    case "HTML" => HTML
    case "TEXT" => TEXT
    case "WIRELESS" => WIRELESS

  }
}

case object HTML extends EMailNotificationFormatType { override def toString = "HTML" }
case object TEXT extends EMailNotificationFormatType { override def toString = "TEXT" }
case object WIRELESS extends EMailNotificationFormatType { override def toString = "WIRELESS" }


/** The descriptive data for a FedEx email notification recipient.
*/
case class EMailNotificationRecipient(EMailNotificationRecipientType: com.fedex.ship.stub.EMailNotificationRecipientType,
  EMailAddress: String,
  NotificationEventsRequested: Seq[com.fedex.ship.stub.EMailNotificationEventType] = Nil,
  Format: com.fedex.ship.stub.EMailNotificationFormatType,
  Localization: com.fedex.ship.stub.Localization)
      

trait EMailNotificationRecipientType

object EMailNotificationRecipientType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EMailNotificationRecipientType = value match {
    case "BROKER" => BROKER
    case "OTHER" => OTHERValue3
    case "RECIPIENT" => RECIPIENTValue
    case "SHIPPER" => SHIPPERValue
    case "THIRD_PARTY" => THIRD_PARTYValue

  }
}

case object BROKER extends EMailNotificationRecipientType { override def toString = "BROKER" }
case object OTHERValue3 extends EMailNotificationRecipientType { override def toString = "OTHER" }
case object RECIPIENTValue extends EMailNotificationRecipientType { override def toString = "RECIPIENT" }
case object SHIPPERValue extends EMailNotificationRecipientType { override def toString = "SHIPPER" }
case object THIRD_PARTYValue extends EMailNotificationRecipientType { override def toString = "THIRD_PARTY" }


/** Information describing the address of of the email recipient, role of the email recipient and languages that are requested to be supported.
*/
case class EMailRecipient(EmailAddress: Option[String] = None,
  Role: Option[com.fedex.ship.stub.AccessorRoleType] = None,
  OptionsRequested: Option[com.fedex.ship.stub.EmailOptionsRequested] = None,
  Localization: Option[com.fedex.ship.stub.Localization] = None)
      


case class EdtCommodityTax(HarmonizedCode: Option[String] = None,
  Taxes: Seq[com.fedex.ship.stub.EdtTaxDetail] = Nil)
      


case class EdtExciseCondition(Category: Option[String] = None,
  Value: Option[String] = None)
      

trait EdtRequestType

object EdtRequestType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EdtRequestType = value match {
    case "ALL" => ALL
    case "NONE" => NONEValue

  }
}

case object ALL extends EdtRequestType { override def toString = "ALL" }
case object NONEValue extends EdtRequestType { override def toString = "NONE" }


case class EdtTaxDetail(TaxType: Option[com.fedex.ship.stub.EdtTaxType] = None,
  EffectiveDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  Name: Option[String] = None,
  TaxableValue: Option[com.fedex.ship.stub.Money] = None,
  Description: Option[String] = None,
  Formula: Option[String] = None,
  Amount: Option[com.fedex.ship.stub.Money] = None)
      

trait EdtTaxType

object EdtTaxType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EdtTaxType = value match {
    case "ADDITIONAL_TAXES" => ADDITIONAL_TAXES
    case "CONSULAR_INVOICE_FEE" => CONSULAR_INVOICE_FEE
    case "CUSTOMS_SURCHARGES" => CUSTOMS_SURCHARGES
    case "DUTY" => DUTY
    case "EXCISE_TAX" => EXCISE_TAX
    case "FOREIGN_EXCHANGE_TAX" => FOREIGN_EXCHANGE_TAX
    case "GENERAL_SALES_TAX" => GENERAL_SALES_TAX
    case "IMPORT_LICENSE_FEE" => IMPORT_LICENSE_FEE
    case "INTERNAL_ADDITIONAL_TAXES" => INTERNAL_ADDITIONAL_TAXES
    case "INTERNAL_SENSITIVE_PRODUCTS_TAX" => INTERNAL_SENSITIVE_PRODUCTS_TAX
    case "OTHER" => OTHERValue2
    case "SENSITIVE_PRODUCTS_TAX" => SENSITIVE_PRODUCTS_TAX
    case "STAMP_TAX" => STAMP_TAX
    case "STATISTICAL_TAX" => STATISTICAL_TAX
    case "TRANSPORT_FACILITIES_TAX" => TRANSPORT_FACILITIES_TAX

  }
}

case object ADDITIONAL_TAXES extends EdtTaxType { override def toString = "ADDITIONAL_TAXES" }
case object CONSULAR_INVOICE_FEE extends EdtTaxType { override def toString = "CONSULAR_INVOICE_FEE" }
case object CUSTOMS_SURCHARGES extends EdtTaxType { override def toString = "CUSTOMS_SURCHARGES" }
case object DUTY extends EdtTaxType { override def toString = "DUTY" }
case object EXCISE_TAX extends EdtTaxType { override def toString = "EXCISE_TAX" }
case object FOREIGN_EXCHANGE_TAX extends EdtTaxType { override def toString = "FOREIGN_EXCHANGE_TAX" }
case object GENERAL_SALES_TAX extends EdtTaxType { override def toString = "GENERAL_SALES_TAX" }
case object IMPORT_LICENSE_FEE extends EdtTaxType { override def toString = "IMPORT_LICENSE_FEE" }
case object INTERNAL_ADDITIONAL_TAXES extends EdtTaxType { override def toString = "INTERNAL_ADDITIONAL_TAXES" }
case object INTERNAL_SENSITIVE_PRODUCTS_TAX extends EdtTaxType { override def toString = "INTERNAL_SENSITIVE_PRODUCTS_TAX" }
case object OTHERValue2 extends EdtTaxType { override def toString = "OTHER" }
case object SENSITIVE_PRODUCTS_TAX extends EdtTaxType { override def toString = "SENSITIVE_PRODUCTS_TAX" }
case object STAMP_TAX extends EdtTaxType { override def toString = "STAMP_TAX" }
case object STATISTICAL_TAX extends EdtTaxType { override def toString = "STATISTICAL_TAX" }
case object TRANSPORT_FACILITIES_TAX extends EdtTaxType { override def toString = "TRANSPORT_FACILITIES_TAX" }

trait EmailOptionType

object EmailOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): EmailOptionType = value match {
    case "SUPPRESS_ACCESS_EMAILS" => SUPPRESS_ACCESS_EMAILS
    case "SUPPRESS_ADDITIONAL_LANGUAGES" => SUPPRESS_ADDITIONAL_LANGUAGESValue

  }
}

case object SUPPRESS_ACCESS_EMAILS extends EmailOptionType { override def toString = "SUPPRESS_ACCESS_EMAILS" }
case object SUPPRESS_ADDITIONAL_LANGUAGESValue extends EmailOptionType { override def toString = "SUPPRESS_ADDITIONAL_LANGUAGES" }


/** Specifies how to apply the localization detail to the current context.
*/
case class EmailOptionsRequested(Options: com.fedex.ship.stub.EmailOptionType*)
      


/** Electronic Trade document references used with the ETD special service.
*/
case class EtdDetail(RequestedDocumentCopies: Seq[com.fedex.ship.stub.RequestedShippingDocumentType] = Nil,
  DocumentReferences: Seq[com.fedex.ship.stub.UploadDocumentReferenceDetail] = Nil)
      


/** The instructions indicating how to print the Export Declaration.
*/
case class ExportDeclarationDetail(DocumentFormat: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  CustomerImageUsages: Seq[com.fedex.ship.stub.CustomerImageUsage] = Nil)
      


/** Country specific details of an International shipment.
*/
case class ExportDetail(B13AFilingOption: Option[com.fedex.ship.stub.B13AFilingOptionType] = None,
  ExportComplianceStatement: Option[String] = None,
  PermitNumber: Option[String] = None,
  DestinationControlDetail: Option[com.fedex.ship.stub.DestinationControlDetail] = None)
      


/** Details specific to an Express freight shipment.
*/
case class ExpressFreightDetail(PackingListEnclosed: Option[Boolean] = None,
  ShippersLoadAndCount: Option[BigInt] = None,
  BookingConfirmationNumber: Option[String] = None)
      

trait FedExLocationType

object FedExLocationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FedExLocationType = value match {
    case "FEDEX_EXPRESS_STATION" => FEDEX_EXPRESS_STATION
    case "FEDEX_FACILITY" => FEDEX_FACILITY
    case "FEDEX_FREIGHT_SERVICE_CENTER" => FEDEX_FREIGHT_SERVICE_CENTER
    case "FEDEX_GROUND_TERMINAL" => FEDEX_GROUND_TERMINAL
    case "FEDEX_HOME_DELIVERY_STATION" => FEDEX_HOME_DELIVERY_STATION
    case "FEDEX_OFFICE" => FEDEX_OFFICE
    case "FEDEX_SHIPSITE" => FEDEX_SHIPSITE
    case "FEDEX_SMART_POST_HUB" => FEDEX_SMART_POST_HUB

  }
}

case object FEDEX_EXPRESS_STATION extends FedExLocationType { override def toString = "FEDEX_EXPRESS_STATION" }
case object FEDEX_FACILITY extends FedExLocationType { override def toString = "FEDEX_FACILITY" }
case object FEDEX_FREIGHT_SERVICE_CENTER extends FedExLocationType { override def toString = "FEDEX_FREIGHT_SERVICE_CENTER" }
case object FEDEX_GROUND_TERMINAL extends FedExLocationType { override def toString = "FEDEX_GROUND_TERMINAL" }
case object FEDEX_HOME_DELIVERY_STATION extends FedExLocationType { override def toString = "FEDEX_HOME_DELIVERY_STATION" }
case object FEDEX_OFFICE extends FedExLocationType { override def toString = "FEDEX_OFFICE" }
case object FEDEX_SHIPSITE extends FedExLocationType { override def toString = "FEDEX_SHIPSITE" }
case object FEDEX_SMART_POST_HUB extends FedExLocationType { override def toString = "FEDEX_SMART_POST_HUB" }


/** Data required to produce the Freight handling-unit-level address labels. Note that the number of UNIQUE labels (the N as in 1 of N, 2 of N, etc.) is determined by total handling units.
*/
case class FreightAddressLabelDetail(Format: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  Copies: Option[BigInt] = None,
  StartingPosition: Option[com.fedex.ship.stub.PageQuadrantType] = None,
  DocTabContent: Option[com.fedex.ship.stub.DocTabContent] = None,
  CustomContentPosition: Option[com.fedex.ship.stub.RelativeVerticalPositionType] = None,
  CustomContent: Option[com.fedex.ship.stub.CustomLabelDetail] = None)
      


/** Individual charge which contributes to the total base charge for the shipment.
*/
case class FreightBaseCharge(FreightClass: Option[com.fedex.ship.stub.FreightClassType] = None,
  RatedAsClass: Option[com.fedex.ship.stub.FreightClassType] = None,
  NmfcCode: Option[String] = None,
  Description: Option[String] = None,
  Weight: Option[com.fedex.ship.stub.Weight] = None,
  ChargeRate: Option[com.fedex.ship.stub.Money] = None,
  ChargeBasis: Option[com.fedex.ship.stub.FreightChargeBasisType] = None,
  ExtendedAmount: Option[com.fedex.ship.stub.Money] = None)
      

trait FreightBaseChargeCalculationType

object FreightBaseChargeCalculationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightBaseChargeCalculationType = value match {
    case "BEYOND" => BEYOND
    case "LINE_ITEMS" => LINE_ITEMS
    case "UNIT_PRICING" => UNIT_PRICING

  }
}

case object BEYOND extends FreightBaseChargeCalculationType { override def toString = "BEYOND" }
case object LINE_ITEMS extends FreightBaseChargeCalculationType { override def toString = "LINE_ITEMS" }
case object UNIT_PRICING extends FreightBaseChargeCalculationType { override def toString = "UNIT_PRICING" }

trait FreightChargeBasisType

object FreightChargeBasisType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightChargeBasisType = value match {
    case "CWT" => CWT
    case "FLAT" => FLAT
    case "MINIMUM" => MINIMUMValue

  }
}

case object CWT extends FreightChargeBasisType { override def toString = "CWT" }
case object FLAT extends FreightChargeBasisType { override def toString = "FLAT" }
case object MINIMUMValue extends FreightChargeBasisType { override def toString = "MINIMUM" }

trait FreightClassType

object FreightClassType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightClassType = value match {
    case "CLASS_050" => CLASS_050
    case "CLASS_055" => CLASS_055
    case "CLASS_060" => CLASS_060
    case "CLASS_065" => CLASS_065
    case "CLASS_070" => CLASS_070
    case "CLASS_077_5" => CLASS_077_5
    case "CLASS_085" => CLASS_085
    case "CLASS_092_5" => CLASS_092_5
    case "CLASS_100" => CLASS_100
    case "CLASS_110" => CLASS_110
    case "CLASS_125" => CLASS_125
    case "CLASS_150" => CLASS_150
    case "CLASS_175" => CLASS_175
    case "CLASS_200" => CLASS_200
    case "CLASS_250" => CLASS_250
    case "CLASS_300" => CLASS_300
    case "CLASS_400" => CLASS_400
    case "CLASS_500" => CLASS_500

  }
}

case object CLASS_050 extends FreightClassType { override def toString = "CLASS_050" }
case object CLASS_055 extends FreightClassType { override def toString = "CLASS_055" }
case object CLASS_060 extends FreightClassType { override def toString = "CLASS_060" }
case object CLASS_065 extends FreightClassType { override def toString = "CLASS_065" }
case object CLASS_070 extends FreightClassType { override def toString = "CLASS_070" }
case object CLASS_077_5 extends FreightClassType { override def toString = "CLASS_077_5" }
case object CLASS_085 extends FreightClassType { override def toString = "CLASS_085" }
case object CLASS_092_5 extends FreightClassType { override def toString = "CLASS_092_5" }
case object CLASS_100 extends FreightClassType { override def toString = "CLASS_100" }
case object CLASS_110 extends FreightClassType { override def toString = "CLASS_110" }
case object CLASS_125 extends FreightClassType { override def toString = "CLASS_125" }
case object CLASS_150 extends FreightClassType { override def toString = "CLASS_150" }
case object CLASS_175 extends FreightClassType { override def toString = "CLASS_175" }
case object CLASS_200 extends FreightClassType { override def toString = "CLASS_200" }
case object CLASS_250 extends FreightClassType { override def toString = "CLASS_250" }
case object CLASS_300 extends FreightClassType { override def toString = "CLASS_300" }
case object CLASS_400 extends FreightClassType { override def toString = "CLASS_400" }
case object CLASS_500 extends FreightClassType { override def toString = "CLASS_500" }

trait FreightCollectTermsType

object FreightCollectTermsType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightCollectTermsType = value match {
    case "NON_RECOURSE_SHIPPER_SIGNED" => NON_RECOURSE_SHIPPER_SIGNED
    case "STANDARD" => STANDARDValue

  }
}

case object NON_RECOURSE_SHIPPER_SIGNED extends FreightCollectTermsType { override def toString = "NON_RECOURSE_SHIPPER_SIGNED" }
case object STANDARDValue extends FreightCollectTermsType { override def toString = "STANDARD" }


case class FreightGuaranteeDetail(Type: Option[com.fedex.ship.stub.FreightGuaranteeType] = None,
  Date: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      

trait FreightGuaranteeType

object FreightGuaranteeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightGuaranteeType = value match {
    case "GUARANTEED_DATE" => GUARANTEED_DATE
    case "GUARANTEED_MORNING" => GUARANTEED_MORNING

  }
}

case object GUARANTEED_DATE extends FreightGuaranteeType { override def toString = "GUARANTEED_DATE" }
case object GUARANTEED_MORNING extends FreightGuaranteeType { override def toString = "GUARANTEED_MORNING" }

trait FreightOnValueType

object FreightOnValueType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightOnValueType = value match {
    case "CARRIER_RISK" => CARRIER_RISK
    case "OWN_RISK" => OWN_RISK

  }
}

case object CARRIER_RISK extends FreightOnValueType { override def toString = "CARRIER_RISK" }
case object OWN_RISK extends FreightOnValueType { override def toString = "OWN_RISK" }


/** Rate data specific to FedEx Freight or FedEx National Freight services.
*/
case class FreightRateDetail(QuoteNumber: Option[String] = None,
  QuoteType: Option[com.fedex.ship.stub.FreightRateQuoteType] = None,
  BaseChargeCalculation: Option[com.fedex.ship.stub.FreightBaseChargeCalculationType] = None,
  BaseCharges: Seq[com.fedex.ship.stub.FreightBaseCharge] = Nil,
  Notations: Seq[com.fedex.ship.stub.FreightRateNotation] = Nil)
      


/** Additional non-monetary data returned with Freight rates.
*/
case class FreightRateNotation(Code: Option[String] = None,
  Description: Option[String] = None)
      

trait FreightRateQuoteType

object FreightRateQuoteType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightRateQuoteType = value match {
    case "AUTOMATED" => AUTOMATED
    case "MANUAL" => MANUAL

  }
}

case object AUTOMATED extends FreightRateQuoteType { override def toString = "AUTOMATED" }
case object MANUAL extends FreightRateQuoteType { override def toString = "MANUAL" }


/** Data applicable to shipments using FEDEX_FREIGHT_ECONOMY and FEDEX_FREIGHT_PRIORITY services.
*/
case class FreightShipmentDetail(FedExFreightAccountNumber: Option[String] = None,
  FedExFreightBillingContactAndAddress: Option[com.fedex.ship.stub.ContactAndAddress] = None,
  AlternateBilling: Option[com.fedex.ship.stub.Party] = None,
  PrintedReferences: Seq[com.fedex.ship.stub.PrintedReference] = Nil,
  Role: Option[com.fedex.ship.stub.FreightShipmentRoleType] = None,
  CollectTermsType: Option[com.fedex.ship.stub.FreightCollectTermsType] = None,
  DeclaredValuePerUnit: Option[com.fedex.ship.stub.Money] = None,
  DeclaredValueUnits: Option[String] = None,
  LiabilityCoverageDetail: Option[com.fedex.ship.stub.LiabilityCoverageDetail] = None,
  Coupons: Seq[String] = Nil,
  TotalHandlingUnits: Option[BigInt] = None,
  ClientDiscountPercent: Option[BigDecimal] = None,
  PalletWeight: Option[com.fedex.ship.stub.Weight] = None,
  ShipmentDimensions: Option[com.fedex.ship.stub.Dimensions] = None,
  Comment: Option[String] = None,
  SpecialServicePayments: Seq[com.fedex.ship.stub.FreightSpecialServicePayment] = Nil,
  HazardousMaterialsEmergencyContactNumber: Option[String] = None,
  HazardousMaterialsOfferor: Option[String] = None,
  LineItems: Seq[com.fedex.ship.stub.FreightShipmentLineItem] = Nil)
      


/** Description of an individual commodity or class of content in a shipment.
*/
case class FreightShipmentLineItem(FreightClass: Option[com.fedex.ship.stub.FreightClassType] = None,
  ClassProvidedByCustomer: Option[Boolean] = None,
  HandlingUnits: Option[BigInt] = None,
  Packaging: Option[com.fedex.ship.stub.PhysicalPackagingType] = None,
  Pieces: Option[BigInt] = None,
  NmfcCode: Option[String] = None,
  HazardousMaterials: Option[com.fedex.ship.stub.HazardousCommodityOptionType] = None,
  PurchaseOrderNumber: Option[String] = None,
  Description: Option[String] = None,
  Weight: Option[com.fedex.ship.stub.Weight] = None,
  Dimensions: Option[com.fedex.ship.stub.Dimensions] = None,
  Volume: Option[com.fedex.ship.stub.Volume] = None)
      

trait FreightShipmentRoleType

object FreightShipmentRoleType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): FreightShipmentRoleType = value match {
    case "CONSIGNEE" => CONSIGNEE
    case "SHIPPER" => SHIPPER

  }
}

case object CONSIGNEE extends FreightShipmentRoleType { override def toString = "CONSIGNEE" }
case object SHIPPER extends FreightShipmentRoleType { override def toString = "SHIPPER" }


/** Specifies which party will be responsible for payment of any surcharges for Freight special services for which split billing is allowed.
*/
case class FreightSpecialServicePayment(SpecialService: Option[com.fedex.ship.stub.ShipmentSpecialServiceType] = None,
  PaymentType: Option[com.fedex.ship.stub.FreightShipmentRoleType] = None)
      


/** Data required to produce a General Agency Agreement document. Remaining content (business data) to be defined once requirements have been completed.
*/
case class GeneralAgencyAgreementDetail(Format: com.fedex.ship.stub.ShippingDocumentFormat)
      

trait GroundDeliveryEligibilityType

object GroundDeliveryEligibilityType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): GroundDeliveryEligibilityType = value match {
    case "ALTERNATE_DAY_SERVICE" => ALTERNATE_DAY_SERVICE
    case "CARTAGE_AGENT_DELIVERY" => CARTAGE_AGENT_DELIVERY
    case "SATURDAY_DELIVERY" => SATURDAY_DELIVERYValue2
    case "USPS_DELIVERY" => USPS_DELIVERY

  }
}

case object ALTERNATE_DAY_SERVICE extends GroundDeliveryEligibilityType { override def toString = "ALTERNATE_DAY_SERVICE" }
case object CARTAGE_AGENT_DELIVERY extends GroundDeliveryEligibilityType { override def toString = "CARTAGE_AGENT_DELIVERY" }
case object SATURDAY_DELIVERYValue2 extends GroundDeliveryEligibilityType { override def toString = "SATURDAY_DELIVERY" }
case object USPS_DELIVERY extends GroundDeliveryEligibilityType { override def toString = "USPS_DELIVERY" }

trait HazardousCommodityAttributeType

object HazardousCommodityAttributeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousCommodityAttributeType = value match {
    case "NOT_SUBJECT_TO_REGULATIONS" => NOT_SUBJECT_TO_REGULATIONS
    case "PLACARDED_VEHICLE_REQUIRED" => PLACARDED_VEHICLE_REQUIRED

  }
}

case object NOT_SUBJECT_TO_REGULATIONS extends HazardousCommodityAttributeType { override def toString = "NOT_SUBJECT_TO_REGULATIONS" }
case object PLACARDED_VEHICLE_REQUIRED extends HazardousCommodityAttributeType { override def toString = "PLACARDED_VEHICLE_REQUIRED" }


/** Documents the kind and quantity of an individual hazardous commodity in a package.
*/
case class HazardousCommodityContent(Description: Option[com.fedex.ship.stub.HazardousCommodityDescription] = None,
  Quantity: Option[com.fedex.ship.stub.HazardousCommodityQuantityDetail] = None,
  InnerReceptacles: Seq[com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail] = Nil,
  Options: Option[com.fedex.ship.stub.HazardousCommodityOptionDetail] = None,
  RadionuclideDetail: Option[com.fedex.ship.stub.RadionuclideDetail] = None,
  NetExplosiveDetail: Option[com.fedex.ship.stub.NetExplosiveDetail] = None)
      


/** Identifies and describes an individual hazardous commodity.
*/
case class HazardousCommodityDescription(Id: Option[String] = None,
  SequenceNumber: Option[BigInt] = None,
  PackingGroup: Option[com.fedex.ship.stub.HazardousCommodityPackingGroupType] = None,
  PackingDetails: Option[com.fedex.ship.stub.HazardousCommodityPackingDetail] = None,
  ReportableQuantity: Option[Boolean] = None,
  ProperShippingName: Option[String] = None,
  TechnicalName: Option[String] = None,
  Percentage: Option[BigDecimal] = None,
  HazardClass: Option[String] = None,
  SubsidiaryClasses: Seq[String] = Nil,
  LabelText: Option[String] = None,
  ProcessingOptions: Seq[com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType] = Nil,
  Authorization: Option[String] = None)
      

trait HazardousCommodityDescriptionProcessingOptionType

object HazardousCommodityDescriptionProcessingOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousCommodityDescriptionProcessingOptionType = value match {
    case "INCLUDE_SPECIAL_PROVISIONS" => INCLUDE_SPECIAL_PROVISIONS

  }
}

case object INCLUDE_SPECIAL_PROVISIONS extends HazardousCommodityDescriptionProcessingOptionType { override def toString = "INCLUDE_SPECIAL_PROVISIONS" }


/** This describes information about the inner receptacles for the hazardous commodity in a particular dangerous goods container.
*/
case class HazardousCommodityInnerReceptacleDetail(Quantity: Option[com.fedex.ship.stub.HazardousCommodityQuantityDetail] = None)
      

trait HazardousCommodityLabelTextOptionType

object HazardousCommodityLabelTextOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousCommodityLabelTextOptionType = value match {
    case "APPEND" => APPEND
    case "OVERRIDE" => OVERRIDE
    case "STANDARD" => STANDARDValue2

  }
}

case object APPEND extends HazardousCommodityLabelTextOptionType { override def toString = "APPEND" }
case object OVERRIDE extends HazardousCommodityLabelTextOptionType { override def toString = "OVERRIDE" }
case object STANDARDValue2 extends HazardousCommodityLabelTextOptionType { override def toString = "STANDARD" }


/** Customer-provided specifications for handling individual commodities.
*/
case class HazardousCommodityOptionDetail(LabelTextOption: Option[com.fedex.ship.stub.HazardousCommodityLabelTextOptionType] = None,
  CustomerSuppliedLabelText: Option[String] = None)
      

trait HazardousCommodityOptionType

object HazardousCommodityOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousCommodityOptionType = value match {
    case "BATTERY" => BATTERY
    case "HAZARDOUS_MATERIALS" => HAZARDOUS_MATERIALS
    case "LIMITED_QUANTITIES_COMMODITIES" => LIMITED_QUANTITIES_COMMODITIES
    case "ORM_D" => ORM_D
    case "REPORTABLE_QUANTITIES" => REPORTABLE_QUANTITIES
    case "SMALL_QUANTITY_EXCEPTION" => SMALL_QUANTITY_EXCEPTION

  }
}

case object BATTERY extends HazardousCommodityOptionType { override def toString = "BATTERY" }
case object HAZARDOUS_MATERIALS extends HazardousCommodityOptionType { override def toString = "HAZARDOUS_MATERIALS" }
case object LIMITED_QUANTITIES_COMMODITIES extends HazardousCommodityOptionType { override def toString = "LIMITED_QUANTITIES_COMMODITIES" }
case object ORM_D extends HazardousCommodityOptionType { override def toString = "ORM_D" }
case object REPORTABLE_QUANTITIES extends HazardousCommodityOptionType { override def toString = "REPORTABLE_QUANTITIES" }
case object SMALL_QUANTITY_EXCEPTION extends HazardousCommodityOptionType { override def toString = "SMALL_QUANTITY_EXCEPTION" }


/** Identifies number and type of packaging units for hazardous commodities.
*/
case class HazardousCommodityPackagingDetail(Count: Option[BigInt] = None,
  Units: Option[String] = None)
      


/** Specifies documentation and limits for validation of an individual packing group/category.
*/
case class HazardousCommodityPackingDetail(CargoAircraftOnly: Option[Boolean] = None,
  PackingInstructions: Option[String] = None)
      

trait HazardousCommodityPackingGroupType

object HazardousCommodityPackingGroupType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousCommodityPackingGroupType = value match {
    case "DEFAULT" => DEFAULT
    case "I" => I
    case "II" => II
    case "III" => III

  }
}

case object DEFAULT extends HazardousCommodityPackingGroupType { override def toString = "DEFAULT" }
case object I extends HazardousCommodityPackingGroupType { override def toString = "I" }
case object II extends HazardousCommodityPackingGroupType { override def toString = "II" }
case object III extends HazardousCommodityPackingGroupType { override def toString = "III" }


/** Identifies amount and units for quantity of hazardous commodities.
*/
case class HazardousCommodityQuantityDetail(Amount: Option[BigDecimal] = None,
  Units: Option[String] = None,
  QuantityType: Option[com.fedex.ship.stub.HazardousCommodityQuantityType] = None)
      

trait HazardousCommodityQuantityType

object HazardousCommodityQuantityType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousCommodityQuantityType = value match {
    case "GROSS" => GROSS
    case "NET" => NET

  }
}

case object GROSS extends HazardousCommodityQuantityType { override def toString = "GROSS" }
case object NET extends HazardousCommodityQuantityType { override def toString = "NET" }

trait HazardousCommodityRegulationType

object HazardousCommodityRegulationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousCommodityRegulationType = value match {
    case "ADR" => ADR
    case "DOT" => DOT
    case "IATA" => IATA
    case "ORMD" => ORMD

  }
}

case object ADR extends HazardousCommodityRegulationType { override def toString = "ADR" }
case object DOT extends HazardousCommodityRegulationType { override def toString = "DOT" }
case object IATA extends HazardousCommodityRegulationType { override def toString = "IATA" }
case object ORMD extends HazardousCommodityRegulationType { override def toString = "ORMD" }

trait HazardousContainerPackingType

object HazardousContainerPackingType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HazardousContainerPackingType = value match {
    case "ALL_PACKED_IN_ONE" => ALL_PACKED_IN_ONE

  }
}

case object ALL_PACKED_IN_ONE extends HazardousContainerPackingType { override def toString = "ALL_PACKED_IN_ONE" }


/** Descriptive data required for a FedEx shipment that is to be held at the destination FedEx location for pickup by the recipient.
*/
case class HoldAtLocationDetail(PhoneNumber: String,
  LocationContactAndAddress: Option[com.fedex.ship.stub.ContactAndAddress] = None,
  LocationType: Option[com.fedex.ship.stub.FedExLocationType] = None)
      


/** The descriptive data required by FedEx for home delivery services.
*/
case class HomeDeliveryPremiumDetail(HomeDeliveryPremiumType: com.fedex.ship.stub.HomeDeliveryPremiumType,
  Date: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  PhoneNumber: Option[String] = None)
      

trait HomeDeliveryPremiumType

object HomeDeliveryPremiumType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): HomeDeliveryPremiumType = value match {
    case "APPOINTMENT" => APPOINTMENT
    case "DATE_CERTAIN" => DATE_CERTAIN
    case "EVENING" => EVENING

  }
}

case object APPOINTMENT extends HomeDeliveryPremiumType { override def toString = "APPOINTMENT" }
case object DATE_CERTAIN extends HomeDeliveryPremiumType { override def toString = "DATE_CERTAIN" }
case object EVENING extends HomeDeliveryPremiumType { override def toString = "EVENING" }

trait ImageId

object ImageId {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ImageId = value match {
    case "IMAGE_1" => IMAGE_1
    case "IMAGE_2" => IMAGE_2
    case "IMAGE_3" => IMAGE_3
    case "IMAGE_4" => IMAGE_4
    case "IMAGE_5" => IMAGE_5

  }
}

case object IMAGE_1 extends ImageId { override def toString = "IMAGE_1" }
case object IMAGE_2 extends ImageId { override def toString = "IMAGE_2" }
case object IMAGE_3 extends ImageId { override def toString = "IMAGE_3" }
case object IMAGE_4 extends ImageId { override def toString = "IMAGE_4" }
case object IMAGE_5 extends ImageId { override def toString = "IMAGE_5" }


case class InternationalControlledExportDetail(Type: com.fedex.ship.stub.InternationalControlledExportType,
  ForeignTradeZoneCode: Option[String] = None,
  EntryNumber: Option[String] = None,
  LicenseOrPermitNumber: Option[String] = None,
  LicenseOrPermitExpirationDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      

trait InternationalControlledExportType

object InternationalControlledExportType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): InternationalControlledExportType = value match {
    case "DEA_036" => DEA_036
    case "DEA_236" => DEA_236
    case "DEA_486" => DEA_486
    case "DSP_05" => DSP_05
    case "DSP_61" => DSP_61
    case "DSP_73" => DSP_73
    case "DSP_85" => DSP_85
    case "DSP_94" => DSP_94
    case "DSP_LICENSE_AGREEMENT" => DSP_LICENSE_AGREEMENT
    case "FROM_FOREIGN_TRADE_ZONE" => FROM_FOREIGN_TRADE_ZONE
    case "WAREHOUSE_WITHDRAWAL" => WAREHOUSE_WITHDRAWAL

  }
}

case object DEA_036 extends InternationalControlledExportType { override def toString = "DEA_036" }
case object DEA_236 extends InternationalControlledExportType { override def toString = "DEA_236" }
case object DEA_486 extends InternationalControlledExportType { override def toString = "DEA_486" }
case object DSP_05 extends InternationalControlledExportType { override def toString = "DSP_05" }
case object DSP_61 extends InternationalControlledExportType { override def toString = "DSP_61" }
case object DSP_73 extends InternationalControlledExportType { override def toString = "DSP_73" }
case object DSP_85 extends InternationalControlledExportType { override def toString = "DSP_85" }
case object DSP_94 extends InternationalControlledExportType { override def toString = "DSP_94" }
case object DSP_LICENSE_AGREEMENT extends InternationalControlledExportType { override def toString = "DSP_LICENSE_AGREEMENT" }
case object FROM_FOREIGN_TRADE_ZONE extends InternationalControlledExportType { override def toString = "FROM_FOREIGN_TRADE_ZONE" }
case object WAREHOUSE_WITHDRAWAL extends InternationalControlledExportType { override def toString = "WAREHOUSE_WITHDRAWAL" }

trait InternationalDocumentContentType

object InternationalDocumentContentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): InternationalDocumentContentType = value match {
    case "DERIVED" => DERIVED
    case "DOCUMENTS_ONLY" => DOCUMENTS_ONLY
    case "NON_DOCUMENTS" => NON_DOCUMENTS

  }
}

case object DERIVED extends InternationalDocumentContentType { override def toString = "DERIVED" }
case object DOCUMENTS_ONLY extends InternationalDocumentContentType { override def toString = "DOCUMENTS_ONLY" }
case object NON_DOCUMENTS extends InternationalDocumentContentType { override def toString = "NON_DOCUMENTS" }


case class InternationalTrafficInArmsRegulationsDetail(LicenseOrExemptionNumber: Option[String] = None)
      

trait LabelFormatType

object LabelFormatType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LabelFormatType = value match {
    case "COMMON2D" => COMMON2D
    case "FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING" => FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING
    case "LABEL_DATA_ONLY" => LABEL_DATA_ONLY
    case "VICS_BILL_OF_LADING" => VICS_BILL_OF_LADING

  }
}

case object COMMON2D extends LabelFormatType { override def toString = "COMMON2D" }
case object FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING extends LabelFormatType { override def toString = "FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING" }
case object LABEL_DATA_ONLY extends LabelFormatType { override def toString = "LABEL_DATA_ONLY" }
case object VICS_BILL_OF_LADING extends LabelFormatType { override def toString = "VICS_BILL_OF_LADING" }

trait LabelMaskableDataType

object LabelMaskableDataType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LabelMaskableDataType = value match {
    case "CUSTOMS_VALUE" => CUSTOMS_VALUE
    case "DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER" => DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER
    case "SECONDARY_BARCODE" => SECONDARY_BARCODE
    case "SHIPPER_ACCOUNT_NUMBER" => SHIPPER_ACCOUNT_NUMBER
    case "TERMS_AND_CONDITIONS" => TERMS_AND_CONDITIONSValue
    case "TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER" => TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER

  }
}

case object CUSTOMS_VALUE extends LabelMaskableDataType { override def toString = "CUSTOMS_VALUE" }
case object DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER extends LabelMaskableDataType { override def toString = "DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER" }
case object SECONDARY_BARCODE extends LabelMaskableDataType { override def toString = "SECONDARY_BARCODE" }
case object SHIPPER_ACCOUNT_NUMBER extends LabelMaskableDataType { override def toString = "SHIPPER_ACCOUNT_NUMBER" }
case object TERMS_AND_CONDITIONSValue extends LabelMaskableDataType { override def toString = "TERMS_AND_CONDITIONS" }
case object TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER extends LabelMaskableDataType { override def toString = "TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER" }

trait LabelOrderType

object LabelOrderType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LabelOrderType = value match {
    case "SHIPPING_LABEL_FIRST" => SHIPPING_LABEL_FIRST
    case "SHIPPING_LABEL_LAST" => SHIPPING_LABEL_LAST

  }
}

case object SHIPPING_LABEL_FIRST extends LabelOrderType { override def toString = "SHIPPING_LABEL_FIRST" }
case object SHIPPING_LABEL_LAST extends LabelOrderType { override def toString = "SHIPPING_LABEL_LAST" }

trait LabelPrintingOrientationType

object LabelPrintingOrientationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LabelPrintingOrientationType = value match {
    case "BOTTOM_EDGE_OF_TEXT_FIRST" => BOTTOM_EDGE_OF_TEXT_FIRST
    case "TOP_EDGE_OF_TEXT_FIRST" => TOP_EDGE_OF_TEXT_FIRST

  }
}

case object BOTTOM_EDGE_OF_TEXT_FIRST extends LabelPrintingOrientationType { override def toString = "BOTTOM_EDGE_OF_TEXT_FIRST" }
case object TOP_EDGE_OF_TEXT_FIRST extends LabelPrintingOrientationType { override def toString = "TOP_EDGE_OF_TEXT_FIRST" }

trait LabelRotationType

object LabelRotationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LabelRotationType = value match {
    case "LEFT" => LEFTValue2
    case "NONE" => NONEValue3
    case "RIGHT" => RIGHTValue2
    case "UPSIDE_DOWN" => UPSIDE_DOWNValue

  }
}

case object LEFTValue2 extends LabelRotationType { override def toString = "LEFT" }
case object NONEValue3 extends LabelRotationType { override def toString = "NONE" }
case object RIGHTValue2 extends LabelRotationType { override def toString = "RIGHT" }
case object UPSIDE_DOWNValue extends LabelRotationType { override def toString = "UPSIDE_DOWN" }


/** Description of shipping label to be returned in the reply
*/
case class LabelSpecification(Dispositions: Seq[com.fedex.ship.stub.ShippingDocumentDispositionDetail] = Nil,
  LabelFormatType: com.fedex.ship.stub.LabelFormatType,
  ImageType: Option[com.fedex.ship.stub.ShippingDocumentImageType] = None,
  LabelStockType: Option[com.fedex.ship.stub.LabelStockType] = None,
  LabelPrintingOrientation: Option[com.fedex.ship.stub.LabelPrintingOrientationType] = None,
  LabelOrder: Option[com.fedex.ship.stub.LabelOrderType] = None,
  PrintedLabelOrigin: Option[com.fedex.ship.stub.ContactAndAddress] = None,
  CustomerSpecifiedDetail: Option[com.fedex.ship.stub.CustomerSpecifiedLabelDetail] = None)
      

trait LabelStockType

object LabelStockType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LabelStockType = value match {
    case "PAPER_4X6" => PAPER_4X6
    case "PAPER_4X8" => PAPER_4X8
    case "PAPER_4X9" => PAPER_4X9
    case "PAPER_6X4" => PAPER_6X4
    case "PAPER_7X4.75" => PAPER_7X4u4675
    case "PAPER_8.5X11_BOTTOM_HALF_LABEL" => PAPER_8u465X11_BOTTOM_HALF_LABEL
    case "PAPER_8.5X11_TOP_HALF_LABEL" => PAPER_8u465X11_TOP_HALF_LABEL
    case "PAPER_LETTER" => PAPER_LETTER
    case "STOCK_4X6" => STOCK_4X6
    case "STOCK_4X6.75_LEADING_DOC_TAB" => STOCK_4X6u4675_LEADING_DOC_TAB
    case "STOCK_4X6.75_TRAILING_DOC_TAB" => STOCK_4X6u4675_TRAILING_DOC_TAB
    case "STOCK_4X8" => STOCK_4X8
    case "STOCK_4X9_LEADING_DOC_TAB" => STOCK_4X9_LEADING_DOC_TAB
    case "STOCK_4X9_TRAILING_DOC_TAB" => STOCK_4X9_TRAILING_DOC_TAB

  }
}

case object PAPER_4X6 extends LabelStockType { override def toString = "PAPER_4X6" }
case object PAPER_4X8 extends LabelStockType { override def toString = "PAPER_4X8" }
case object PAPER_4X9 extends LabelStockType { override def toString = "PAPER_4X9" }
case object PAPER_6X4 extends LabelStockType { override def toString = "PAPER_6X4" }
case object PAPER_7X4u4675 extends LabelStockType { override def toString = "PAPER_7X4.75" }
case object PAPER_8u465X11_BOTTOM_HALF_LABEL extends LabelStockType { override def toString = "PAPER_8.5X11_BOTTOM_HALF_LABEL" }
case object PAPER_8u465X11_TOP_HALF_LABEL extends LabelStockType { override def toString = "PAPER_8.5X11_TOP_HALF_LABEL" }
case object PAPER_LETTER extends LabelStockType { override def toString = "PAPER_LETTER" }
case object STOCK_4X6 extends LabelStockType { override def toString = "STOCK_4X6" }
case object STOCK_4X6u4675_LEADING_DOC_TAB extends LabelStockType { override def toString = "STOCK_4X6.75_LEADING_DOC_TAB" }
case object STOCK_4X6u4675_TRAILING_DOC_TAB extends LabelStockType { override def toString = "STOCK_4X6.75_TRAILING_DOC_TAB" }
case object STOCK_4X8 extends LabelStockType { override def toString = "STOCK_4X8" }
case object STOCK_4X9_LEADING_DOC_TAB extends LabelStockType { override def toString = "STOCK_4X9_LEADING_DOC_TAB" }
case object STOCK_4X9_TRAILING_DOC_TAB extends LabelStockType { override def toString = "STOCK_4X9_TRAILING_DOC_TAB" }


case class LiabilityCoverageDetail(CoverageType: Option[com.fedex.ship.stub.LiabilityCoverageType] = None,
  CoverageAmount: Option[com.fedex.ship.stub.Money] = None)
      

trait LiabilityCoverageType

object LiabilityCoverageType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LiabilityCoverageType = value match {
    case "NEW" => NEW
    case "USED_OR_RECONDITIONED" => USED_OR_RECONDITIONED

  }
}

case object NEW extends LiabilityCoverageType { override def toString = "NEW" }
case object USED_OR_RECONDITIONED extends LiabilityCoverageType { override def toString = "USED_OR_RECONDITIONED" }


case class LicenseOrPermitDetail(Number: Option[String] = None,
  EffectiveDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  ExpirationDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      


/** Represents a one-dimensional measurement in small units (e.g. suitable for measuring a package or document), contrasted with Distance, which represents a large one-dimensional measurement (e.g. distance between cities).
*/
case class LinearMeasure(Value: Option[BigDecimal] = None,
  Units: Option[com.fedex.ship.stub.LinearUnits] = None)
      

trait LinearUnits

object LinearUnits {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): LinearUnits = value match {
    case "CM" => CM
    case "IN" => IN

  }
}

case object CM extends LinearUnits { override def toString = "CM" }
case object IN extends LinearUnits { override def toString = "IN" }


/** Identifies the representation of human-readable text.
*/
case class Localization(LanguageCode: String,
  LocaleCode: Option[String] = None)
      


case class Measure(Quantity: Option[BigDecimal] = None,
  Units: Option[String] = None)
      

trait MinimumChargeType

object MinimumChargeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): MinimumChargeType = value match {
    case "CUSTOMER" => CUSTOMERValue
    case "CUSTOMER_FREIGHT_WEIGHT" => CUSTOMER_FREIGHT_WEIGHT
    case "EARNED_DISCOUNT" => EARNED_DISCOUNT
    case "MIXED" => MIXED
    case "RATE_SCALE" => RATE_SCALE

  }
}

case object CUSTOMERValue extends MinimumChargeType { override def toString = "CUSTOMER" }
case object CUSTOMER_FREIGHT_WEIGHT extends MinimumChargeType { override def toString = "CUSTOMER_FREIGHT_WEIGHT" }
case object EARNED_DISCOUNT extends MinimumChargeType { override def toString = "EARNED_DISCOUNT" }
case object MIXED extends MinimumChargeType { override def toString = "MIXED" }
case object RATE_SCALE extends MinimumChargeType { override def toString = "RATE_SCALE" }


/** The descriptive data for the medium of exchange for FedEx services.
*/
case class Money(Currency: String,
  Amount: BigDecimal)
      


/** Data required to produce a Certificate of Origin document. Remaining content (business data) to be defined once requirements have been completed.
*/
case class NaftaCertificateOfOriginDetail(Format: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  BlanketPeriod: Option[com.fedex.ship.stub.DateRange] = None,
  ImporterSpecification: Option[com.fedex.ship.stub.NaftaImporterSpecificationType] = None,
  SignatureContact: Option[com.fedex.ship.stub.Contact] = None,
  ProducerSpecification: Option[com.fedex.ship.stub.NaftaProducerSpecificationType] = None,
  Producers: Seq[com.fedex.ship.stub.NaftaProducer] = Nil,
  CustomerImageUsages: Seq[com.fedex.ship.stub.CustomerImageUsage] = Nil)
      


/** This element is currently not supported and is for the future use.
*/
case class NaftaCommodityDetail(PreferenceCriterion: Option[com.fedex.ship.stub.NaftaPreferenceCriterionCode] = None,
  ProducerDetermination: Option[com.fedex.ship.stub.NaftaProducerDeterminationCode] = None,
  ProducerId: Option[String] = None,
  NetCostMethod: Option[com.fedex.ship.stub.NaftaNetCostMethodCode] = None,
  NetCostDateRange: Option[com.fedex.ship.stub.DateRange] = None)
      

trait NaftaImporterSpecificationType

object NaftaImporterSpecificationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): NaftaImporterSpecificationType = value match {
    case "IMPORTER_OF_RECORD" => IMPORTER_OF_RECORD
    case "RECIPIENT" => RECIPIENTValue3
    case "UNKNOWN" => UNKNOWN
    case "VARIOUS" => VARIOUS

  }
}

case object IMPORTER_OF_RECORD extends NaftaImporterSpecificationType { override def toString = "IMPORTER_OF_RECORD" }
case object RECIPIENTValue3 extends NaftaImporterSpecificationType { override def toString = "RECIPIENT" }
case object UNKNOWN extends NaftaImporterSpecificationType { override def toString = "UNKNOWN" }
case object VARIOUS extends NaftaImporterSpecificationType { override def toString = "VARIOUS" }


/** Specifies the information necessary for printing the NAFTA Low Value statement on customs documentation.
*/
case class NaftaLowValueStatementDetail(Role: Option[com.fedex.ship.stub.CustomsRoleType] = None)
      

trait NaftaNetCostMethodCode

object NaftaNetCostMethodCode {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): NaftaNetCostMethodCode = value match {
    case "NC" => NC
    case "NO" => NO

  }
}

case object NC extends NaftaNetCostMethodCode { override def toString = "NC" }
case object NO extends NaftaNetCostMethodCode { override def toString = "NO" }

trait NaftaPreferenceCriterionCode

object NaftaPreferenceCriterionCode {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): NaftaPreferenceCriterionCode = value match {
    case "A" => A
    case "B" => B
    case "C" => C
    case "D" => D
    case "E" => E
    case "F" => F

  }
}

case object A extends NaftaPreferenceCriterionCode { override def toString = "A" }
case object B extends NaftaPreferenceCriterionCode { override def toString = "B" }
case object C extends NaftaPreferenceCriterionCode { override def toString = "C" }
case object D extends NaftaPreferenceCriterionCode { override def toString = "D" }
case object E extends NaftaPreferenceCriterionCode { override def toString = "E" }
case object F extends NaftaPreferenceCriterionCode { override def toString = "F" }


/** This element is currently not supported and is for the future use.
*/
case class NaftaProducer(Id: Option[String] = None,
  Producer: Option[com.fedex.ship.stub.Party] = None)
      

trait NaftaProducerDeterminationCode

object NaftaProducerDeterminationCode {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): NaftaProducerDeterminationCode = value match {
    case "NO_1" => NO_1
    case "NO_2" => NO_2
    case "NO_3" => NO_3
    case "YES" => YES

  }
}

case object NO_1 extends NaftaProducerDeterminationCode { override def toString = "NO_1" }
case object NO_2 extends NaftaProducerDeterminationCode { override def toString = "NO_2" }
case object NO_3 extends NaftaProducerDeterminationCode { override def toString = "NO_3" }
case object YES extends NaftaProducerDeterminationCode { override def toString = "YES" }

trait NaftaProducerSpecificationType

object NaftaProducerSpecificationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): NaftaProducerSpecificationType = value match {
    case "AVAILABLE_UPON_REQUEST" => AVAILABLE_UPON_REQUEST
    case "MULTIPLE_SPECIFIED" => MULTIPLE_SPECIFIED
    case "SAME" => SAME
    case "SINGLE_SPECIFIED" => SINGLE_SPECIFIED
    case "UNKNOWN" => UNKNOWNValue

  }
}

case object AVAILABLE_UPON_REQUEST extends NaftaProducerSpecificationType { override def toString = "AVAILABLE_UPON_REQUEST" }
case object MULTIPLE_SPECIFIED extends NaftaProducerSpecificationType { override def toString = "MULTIPLE_SPECIFIED" }
case object SAME extends NaftaProducerSpecificationType { override def toString = "SAME" }
case object SINGLE_SPECIFIED extends NaftaProducerSpecificationType { override def toString = "SINGLE_SPECIFIED" }
case object UNKNOWNValue extends NaftaProducerSpecificationType { override def toString = "UNKNOWN" }

trait NetExplosiveClassificationType

object NetExplosiveClassificationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): NetExplosiveClassificationType = value match {
    case "NET_EXPLOSIVE_CONTENT" => NET_EXPLOSIVE_CONTENT
    case "NET_EXPLOSIVE_MASS" => NET_EXPLOSIVE_MASS
    case "NET_EXPLOSIVE_QUANTITY" => NET_EXPLOSIVE_QUANTITY
    case "NET_EXPLOSIVE_WEIGHT" => NET_EXPLOSIVE_WEIGHT

  }
}

case object NET_EXPLOSIVE_CONTENT extends NetExplosiveClassificationType { override def toString = "NET_EXPLOSIVE_CONTENT" }
case object NET_EXPLOSIVE_MASS extends NetExplosiveClassificationType { override def toString = "NET_EXPLOSIVE_MASS" }
case object NET_EXPLOSIVE_QUANTITY extends NetExplosiveClassificationType { override def toString = "NET_EXPLOSIVE_QUANTITY" }
case object NET_EXPLOSIVE_WEIGHT extends NetExplosiveClassificationType { override def toString = "NET_EXPLOSIVE_WEIGHT" }


case class NetExplosiveDetail(Type: Option[com.fedex.ship.stub.NetExplosiveClassificationType] = None,
  Amount: Option[BigDecimal] = None,
  Units: Option[String] = None)
      


/** The descriptive data regarding the result of the submitted transaction.
*/
case class Notification(Severity: com.fedex.ship.stub.NotificationSeverityType,
  Source: String,
  Code: Option[String] = None,
  Message: Option[String] = None,
  LocalizedMessage: Option[String] = None,
  MessageParameters: Seq[com.fedex.ship.stub.NotificationParameter] = Nil)
      


case class NotificationParameter(Id: Option[String] = None,
  Value: Option[String] = None)
      

trait NotificationSeverityType

object NotificationSeverityType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): NotificationSeverityType = value match {
    case "ERROR" => ERROR
    case "FAILURE" => FAILURE
    case "NOTE" => NOTE
    case "SUCCESS" => SUCCESS
    case "WARNING" => WARNING

  }
}

case object ERROR extends NotificationSeverityType { override def toString = "ERROR" }
case object FAILURE extends NotificationSeverityType { override def toString = "FAILURE" }
case object NOTE extends NotificationSeverityType { override def toString = "NOTE" }
case object SUCCESS extends NotificationSeverityType { override def toString = "SUCCESS" }
case object WARNING extends NotificationSeverityType { override def toString = "WARNING" }


/** The instructions indicating how to print the OP-900 form for hazardous materials packages.
*/
case class Op900Detail(Format: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  Reference: Option[com.fedex.ship.stub.CustomerReferenceType] = None,
  CustomerImageUsages: Seq[com.fedex.ship.stub.CustomerImageUsage] = Nil,
  SignatureName: Option[String] = None)
      


case class OperationalInstruction(Number: Option[Int] = None,
  Content: Option[String] = None)
      

trait OversizeClassType

object OversizeClassType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): OversizeClassType = value match {
    case "OVERSIZE_1" => OVERSIZE_1
    case "OVERSIZE_2" => OVERSIZE_2
    case "OVERSIZE_3" => OVERSIZE_3

  }
}

case object OVERSIZE_1 extends OversizeClassType { override def toString = "OVERSIZE_1" }
case object OVERSIZE_2 extends OversizeClassType { override def toString = "OVERSIZE_2" }
case object OVERSIZE_3 extends OversizeClassType { override def toString = "OVERSIZE_3" }


/** Each instance of this data type represents the set of barcodes (of all types) which are associated with a specific package.
*/
case class PackageBarcodes(BinaryBarcodes: Seq[com.fedex.ship.stub.BinaryBarcode] = Nil,
  StringBarcodes: Seq[com.fedex.ship.stub.StringBarcode] = Nil)
      


/** Package-level data required for labeling and/or movement.
*/
case class PackageOperationalDetail(AstraHandlingText: Option[String] = None,
  OperationalInstructions: Seq[com.fedex.ship.stub.OperationalInstruction] = Nil,
  Barcodes: Option[com.fedex.ship.stub.PackageBarcodes] = None,
  GroundServiceCode: Option[String] = None)
      


/** Data for a package's rates, as calculated per a specific rate type.
*/
case class PackageRateDetail(RateType: Option[com.fedex.ship.stub.ReturnedRateType] = None,
  RatedWeightMethod: Option[com.fedex.ship.stub.RatedWeightMethod] = None,
  MinimumChargeType: Option[com.fedex.ship.stub.MinimumChargeType] = None,
  BillingWeight: Option[com.fedex.ship.stub.Weight] = None,
  DimWeight: Option[com.fedex.ship.stub.Weight] = None,
  OversizeWeight: Option[com.fedex.ship.stub.Weight] = None,
  BaseCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalFreightDiscounts: Option[com.fedex.ship.stub.Money] = None,
  NetFreight: Option[com.fedex.ship.stub.Money] = None,
  TotalSurcharges: Option[com.fedex.ship.stub.Money] = None,
  NetFedExCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalTaxes: Option[com.fedex.ship.stub.Money] = None,
  NetCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalRebates: Option[com.fedex.ship.stub.Money] = None,
  FreightDiscounts: Seq[com.fedex.ship.stub.RateDiscount] = Nil,
  Rebates: Seq[com.fedex.ship.stub.Rebate] = Nil,
  Surcharges: Seq[com.fedex.ship.stub.Surcharge] = Nil,
  Taxes: Seq[com.fedex.ship.stub.Tax] = Nil,
  VariableHandlingCharges: Option[com.fedex.ship.stub.VariableHandlingCharges] = None)
      


/** This class groups together for a single package all package-level rate data (across all rate types) as part of the response to a shipping request, which groups shipment-level data together and groups package-level data by package.
*/
case class PackageRating(ActualRateType: Option[com.fedex.ship.stub.ReturnedRateType] = None,
  EffectiveNetDiscount: Option[com.fedex.ship.stub.Money] = None,
  PackageRateDetails: Seq[com.fedex.ship.stub.PackageRateDetail] = Nil)
      

trait PackageSpecialServiceType

object PackageSpecialServiceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PackageSpecialServiceType = value match {
    case "ALCOHOL" => ALCOHOL
    case "APPOINTMENT_DELIVERY" => APPOINTMENT_DELIVERYValue
    case "COD" => CODValue
    case "DANGEROUS_GOODS" => DANGEROUS_GOODSValue
    case "DRY_ICE" => DRY_ICEValue
    case "NON_STANDARD_CONTAINER" => NON_STANDARD_CONTAINER
    case "PRIORITY_ALERT" => PRIORITY_ALERTValue
    case "SIGNATURE_OPTION" => SIGNATURE_OPTIONValue

  }
}

case object ALCOHOL extends PackageSpecialServiceType { override def toString = "ALCOHOL" }
case object APPOINTMENT_DELIVERYValue extends PackageSpecialServiceType { override def toString = "APPOINTMENT_DELIVERY" }
case object CODValue extends PackageSpecialServiceType { override def toString = "COD" }
case object DANGEROUS_GOODSValue extends PackageSpecialServiceType { override def toString = "DANGEROUS_GOODS" }
case object DRY_ICEValue extends PackageSpecialServiceType { override def toString = "DRY_ICE" }
case object NON_STANDARD_CONTAINER extends PackageSpecialServiceType { override def toString = "NON_STANDARD_CONTAINER" }
case object PRIORITY_ALERTValue extends PackageSpecialServiceType { override def toString = "PRIORITY_ALERT" }
case object SIGNATURE_OPTIONValue extends PackageSpecialServiceType { override def toString = "SIGNATURE_OPTION" }


/** These special services are available at the package level for some or all service types. If the shipper is requesting a special service which requires additional data, the package special service type must be present in the specialServiceTypes collection, and the supporting detail must be provided in the appropriate sub-object below.
*/
case class PackageSpecialServicesRequested(SpecialServiceTypes: Seq[com.fedex.ship.stub.PackageSpecialServiceType] = Nil,
  CodDetail: Option[com.fedex.ship.stub.CodDetail] = None,
  DangerousGoodsDetail: Option[com.fedex.ship.stub.DangerousGoodsDetail] = None,
  DryIceWeight: Option[com.fedex.ship.stub.Weight] = None,
  SignatureOptionDetail: Option[com.fedex.ship.stub.SignatureOptionDetail] = None,
  PriorityAlertDetail: Option[com.fedex.ship.stub.PriorityAlertDetail] = None,
  AlcoholDetail: Option[com.fedex.ship.stub.AlcoholDetail] = None)
      

trait PackagingType

object PackagingType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PackagingType = value match {
    case "FEDEX_10KG_BOX" => FEDEX_10KG_BOX
    case "FEDEX_25KG_BOX" => FEDEX_25KG_BOX
    case "FEDEX_BOX" => FEDEX_BOX
    case "FEDEX_ENVELOPE" => FEDEX_ENVELOPE
    case "FEDEX_EXTRA_LARGE_BOX" => FEDEX_EXTRA_LARGE_BOX
    case "FEDEX_LARGE_BOX" => FEDEX_LARGE_BOX
    case "FEDEX_MEDIUM_BOX" => FEDEX_MEDIUM_BOX
    case "FEDEX_PAK" => FEDEX_PAK
    case "FEDEX_SMALL_BOX" => FEDEX_SMALL_BOX
    case "FEDEX_TUBE" => FEDEX_TUBE
    case "YOUR_PACKAGING" => YOUR_PACKAGING

  }
}

case object FEDEX_10KG_BOX extends PackagingType { override def toString = "FEDEX_10KG_BOX" }
case object FEDEX_25KG_BOX extends PackagingType { override def toString = "FEDEX_25KG_BOX" }
case object FEDEX_BOX extends PackagingType { override def toString = "FEDEX_BOX" }
case object FEDEX_ENVELOPE extends PackagingType { override def toString = "FEDEX_ENVELOPE" }
case object FEDEX_EXTRA_LARGE_BOX extends PackagingType { override def toString = "FEDEX_EXTRA_LARGE_BOX" }
case object FEDEX_LARGE_BOX extends PackagingType { override def toString = "FEDEX_LARGE_BOX" }
case object FEDEX_MEDIUM_BOX extends PackagingType { override def toString = "FEDEX_MEDIUM_BOX" }
case object FEDEX_PAK extends PackagingType { override def toString = "FEDEX_PAK" }
case object FEDEX_SMALL_BOX extends PackagingType { override def toString = "FEDEX_SMALL_BOX" }
case object FEDEX_TUBE extends PackagingType { override def toString = "FEDEX_TUBE" }
case object YOUR_PACKAGING extends PackagingType { override def toString = "YOUR_PACKAGING" }

trait PageQuadrantType

object PageQuadrantType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PageQuadrantType = value match {
    case "BOTTOM_LEFT" => BOTTOM_LEFT
    case "BOTTOM_RIGHT" => BOTTOM_RIGHT
    case "TOP_LEFT" => TOP_LEFT
    case "TOP_RIGHT" => TOP_RIGHT

  }
}

case object BOTTOM_LEFT extends PageQuadrantType { override def toString = "BOTTOM_LEFT" }
case object BOTTOM_RIGHT extends PageQuadrantType { override def toString = "BOTTOM_RIGHT" }
case object TOP_LEFT extends PageQuadrantType { override def toString = "TOP_LEFT" }
case object TOP_RIGHT extends PageQuadrantType { override def toString = "TOP_RIGHT" }


/** The descriptive data for a person or company entitiy doing business with FedEx.
*/
case class Party(AccountNumber: Option[String] = None,
  Tins: Seq[com.fedex.ship.stub.TaxpayerIdentification] = Nil,
  Contact: Option[com.fedex.ship.stub.Contact] = None,
  Address: Option[com.fedex.ship.stub.Address] = None)
      


/** The descriptive data for the monetary compensation given to FedEx for services rendered to the customer.
*/
case class Payment(PaymentType: com.fedex.ship.stub.PaymentType,
  Payor: Option[com.fedex.ship.stub.Payor] = None)
      

trait PaymentType

object PaymentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PaymentType = value match {
    case "ACCOUNT" => ACCOUNTValue
    case "COLLECT" => COLLECT
    case "RECIPIENT" => RECIPIENT
    case "SENDER" => SENDER
    case "THIRD_PARTY" => THIRD_PARTY

  }
}

case object ACCOUNTValue extends PaymentType { override def toString = "ACCOUNT" }
case object COLLECT extends PaymentType { override def toString = "COLLECT" }
case object RECIPIENT extends PaymentType { override def toString = "RECIPIENT" }
case object SENDER extends PaymentType { override def toString = "SENDER" }
case object THIRD_PARTY extends PaymentType { override def toString = "THIRD_PARTY" }


/** The descriptive data identifying the party responsible for payment for a service.
*/
case class Payor(ResponsibleParty: Option[com.fedex.ship.stub.Party] = None)
      


/** This information describes how and when a pending shipment may be accessed for completion.
*/
case class PendingShipmentAccessDetail(AccessorDetails: com.fedex.ship.stub.PendingShipmentAccessorDetail*)
      


/** Specifies the details to be used by the user of the pending shipment
*/
case class PendingShipmentAccessorDetail(Role: Option[com.fedex.ship.stub.AccessorRoleType] = None,
  UserId: Option[String] = None,
  Password: Option[String] = None,
  EmailLabelUrl: Option[String] = None)
      


/** This information describes the kind of pending shipment being requested.
*/
case class PendingShipmentDetail(Type: com.fedex.ship.stub.PendingShipmentType,
  ExpirationDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  EmailLabelDetail: Option[com.fedex.ship.stub.EMailLabelDetail] = None,
  ProcessingOptions: Option[com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested] = None,
  RecommendedDocumentSpecification: Option[com.fedex.ship.stub.RecommendedDocumentSpecification] = None,
  DocumentReferences: Seq[com.fedex.ship.stub.UploadDocumentReferenceDetail] = Nil)
      

trait PendingShipmentProcessingOptionType

object PendingShipmentProcessingOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PendingShipmentProcessingOptionType = value match {
    case "ALLOW_MODIFICATIONS" => ALLOW_MODIFICATIONS

  }
}

case object ALLOW_MODIFICATIONS extends PendingShipmentProcessingOptionType { override def toString = "ALLOW_MODIFICATIONS" }


case class PendingShipmentProcessingOptionsRequested(Options: com.fedex.ship.stub.PendingShipmentProcessingOptionType*)
      

trait PendingShipmentType

object PendingShipmentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PendingShipmentType = value match {
    case "EMAIL" => EMAIL

  }
}

case object EMAIL extends PendingShipmentType { override def toString = "EMAIL" }

trait PhysicalFormType

object PhysicalFormType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PhysicalFormType = value match {
    case "GAS" => GAS
    case "LIQUID" => LIQUID
    case "SOLID" => SOLID
    case "SPECIAL" => SPECIAL

  }
}

case object GAS extends PhysicalFormType { override def toString = "GAS" }
case object LIQUID extends PhysicalFormType { override def toString = "LIQUID" }
case object SOLID extends PhysicalFormType { override def toString = "SOLID" }
case object SPECIAL extends PhysicalFormType { override def toString = "SPECIAL" }

trait PhysicalPackagingType

object PhysicalPackagingType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PhysicalPackagingType = value match {
    case "BAG" => BAG
    case "BARREL" => BARREL
    case "BASKET" => BASKET
    case "BOX" => BOX
    case "BUCKET" => BUCKET
    case "BUNDLE" => BUNDLE
    case "CARTON" => CARTON
    case "CASE" => CASE
    case "CONTAINER" => CONTAINER
    case "CRATE" => CRATE
    case "CYLINDER" => CYLINDER
    case "DRUM" => DRUM
    case "ENVELOPE" => ENVELOPE
    case "HAMPER" => HAMPER
    case "OTHER" => OTHERValue5
    case "PAIL" => PAIL
    case "PALLET" => PALLET
    case "PIECE" => PIECE
    case "REEL" => REEL
    case "ROLL" => ROLL
    case "SKID" => SKID
    case "TANK" => TANK
    case "TUBE" => TUBE

  }
}

case object BAG extends PhysicalPackagingType { override def toString = "BAG" }
case object BARREL extends PhysicalPackagingType { override def toString = "BARREL" }
case object BASKET extends PhysicalPackagingType { override def toString = "BASKET" }
case object BOX extends PhysicalPackagingType { override def toString = "BOX" }
case object BUCKET extends PhysicalPackagingType { override def toString = "BUCKET" }
case object BUNDLE extends PhysicalPackagingType { override def toString = "BUNDLE" }
case object CARTON extends PhysicalPackagingType { override def toString = "CARTON" }
case object CASE extends PhysicalPackagingType { override def toString = "CASE" }
case object CONTAINER extends PhysicalPackagingType { override def toString = "CONTAINER" }
case object CRATE extends PhysicalPackagingType { override def toString = "CRATE" }
case object CYLINDER extends PhysicalPackagingType { override def toString = "CYLINDER" }
case object DRUM extends PhysicalPackagingType { override def toString = "DRUM" }
case object ENVELOPE extends PhysicalPackagingType { override def toString = "ENVELOPE" }
case object HAMPER extends PhysicalPackagingType { override def toString = "HAMPER" }
case object OTHERValue5 extends PhysicalPackagingType { override def toString = "OTHER" }
case object PAIL extends PhysicalPackagingType { override def toString = "PAIL" }
case object PALLET extends PhysicalPackagingType { override def toString = "PALLET" }
case object PIECE extends PhysicalPackagingType { override def toString = "PIECE" }
case object REEL extends PhysicalPackagingType { override def toString = "REEL" }
case object ROLL extends PhysicalPackagingType { override def toString = "ROLL" }
case object SKID extends PhysicalPackagingType { override def toString = "SKID" }
case object TANK extends PhysicalPackagingType { override def toString = "TANK" }
case object TUBE extends PhysicalPackagingType { override def toString = "TUBE" }


/** This class describes the pickup characteristics of a shipment (e.g. for use in a tag request).
*/
case class PickupDetail(ReadyDateTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  LatestPickupDateTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  CourierInstructions: Option[String] = None,
  RequestType: Option[com.fedex.ship.stub.PickupRequestType] = None,
  RequestSource: Option[com.fedex.ship.stub.PickupRequestSourceType] = None)
      

trait PickupRequestSourceType

object PickupRequestSourceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PickupRequestSourceType = value match {
    case "AUTOMATION" => AUTOMATION
    case "CUSTOMER_SERVICE" => CUSTOMER_SERVICE

  }
}

case object AUTOMATION extends PickupRequestSourceType { override def toString = "AUTOMATION" }
case object CUSTOMER_SERVICE extends PickupRequestSourceType { override def toString = "CUSTOMER_SERVICE" }

trait PickupRequestType

object PickupRequestType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PickupRequestType = value match {
    case "FUTURE_DAY" => FUTURE_DAY
    case "SAME_DAY" => SAME_DAYValue

  }
}

case object FUTURE_DAY extends PickupRequestType { override def toString = "FUTURE_DAY" }
case object SAME_DAYValue extends PickupRequestType { override def toString = "SAME_DAY" }

trait PricingCodeType

object PricingCodeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PricingCodeType = value match {
    case "ACTUAL" => ACTUAL
    case "ALTERNATE" => ALTERNATE
    case "BASE" => BASE
    case "HUNDREDWEIGHT" => HUNDREDWEIGHT
    case "HUNDREDWEIGHT_ALTERNATE" => HUNDREDWEIGHT_ALTERNATE
    case "INTERNATIONAL_DISTRIBUTION" => INTERNATIONAL_DISTRIBUTION
    case "INTERNATIONAL_ECONOMY_SERVICE" => INTERNATIONAL_ECONOMY_SERVICE
    case "LTL_FREIGHT" => LTL_FREIGHT
    case "PACKAGE" => _PACKAGE_
    case "SHIPMENT" => SHIPMENT
    case "SHIPMENT_FIVE_POUND_OPTIONAL" => SHIPMENT_FIVE_POUND_OPTIONAL
    case "SHIPMENT_OPTIONAL" => SHIPMENT_OPTIONAL
    case "SPECIAL" => SPECIALValue

  }
}

case object ACTUAL extends PricingCodeType { override def toString = "ACTUAL" }
case object ALTERNATE extends PricingCodeType { override def toString = "ALTERNATE" }
case object BASE extends PricingCodeType { override def toString = "BASE" }
case object HUNDREDWEIGHT extends PricingCodeType { override def toString = "HUNDREDWEIGHT" }
case object HUNDREDWEIGHT_ALTERNATE extends PricingCodeType { override def toString = "HUNDREDWEIGHT_ALTERNATE" }
case object INTERNATIONAL_DISTRIBUTION extends PricingCodeType { override def toString = "INTERNATIONAL_DISTRIBUTION" }
case object INTERNATIONAL_ECONOMY_SERVICE extends PricingCodeType { override def toString = "INTERNATIONAL_ECONOMY_SERVICE" }
case object LTL_FREIGHT extends PricingCodeType { override def toString = "LTL_FREIGHT" }
case object _PACKAGE_ extends PricingCodeType { override def toString = "PACKAGE" }
case object SHIPMENT extends PricingCodeType { override def toString = "SHIPMENT" }
case object SHIPMENT_FIVE_POUND_OPTIONAL extends PricingCodeType { override def toString = "SHIPMENT_FIVE_POUND_OPTIONAL" }
case object SHIPMENT_OPTIONAL extends PricingCodeType { override def toString = "SHIPMENT_OPTIONAL" }
case object SPECIALValue extends PricingCodeType { override def toString = "SPECIAL" }


/** Represents a reference identifier printed on Freight bills of lading
*/
case class PrintedReference(Type: Option[com.fedex.ship.stub.PrintedReferenceType] = None,
  Value: Option[String] = None)
      

trait PrintedReferenceType

object PrintedReferenceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PrintedReferenceType = value match {
    case "BILL_OF_LADING" => BILL_OF_LADINGValue
    case "CONSIGNEE_ID_NUMBER" => CONSIGNEE_ID_NUMBER
    case "SHIPPER_ID_NUMBER" => SHIPPER_ID_NUMBER

  }
}

case object BILL_OF_LADINGValue extends PrintedReferenceType { override def toString = "BILL_OF_LADING" }
case object CONSIGNEE_ID_NUMBER extends PrintedReferenceType { override def toString = "CONSIGNEE_ID_NUMBER" }
case object SHIPPER_ID_NUMBER extends PrintedReferenceType { override def toString = "SHIPPER_ID_NUMBER" }


case class PriorityAlertDetail(EnhancementTypes: Seq[com.fedex.ship.stub.PriorityAlertEnhancementType] = Nil,
  Content: Seq[String] = Nil)
      

trait PriorityAlertEnhancementType

object PriorityAlertEnhancementType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PriorityAlertEnhancementType = value match {
    case "PRIORITY_ALERT_PLUS" => PRIORITY_ALERT_PLUS

  }
}

case object PRIORITY_ALERT_PLUS extends PriorityAlertEnhancementType { override def toString = "PRIORITY_ALERT_PLUS" }


case class ProcessShipmentReply(HighestSeverity: com.fedex.ship.stub.NotificationSeverityType,
  Notifications: Seq[com.fedex.ship.stub.Notification] = Nil,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId,
  JobId: Option[String] = None,
  CompletedShipmentDetail: Option[com.fedex.ship.stub.CompletedShipmentDetail] = None,
  ErrorLabels: Seq[com.fedex.ship.stub.ShippingDocument] = Nil)
      


/** Descriptive data sent to FedEx by a customer in order to ship a package.
*/
case class ProcessShipmentRequest(WebAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail,
  ClientDetail: com.fedex.ship.stub.ClientDetail,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId,
  RequestedShipment: com.fedex.ship.stub.RequestedShipment)
      


case class ProcessTagReply(HighestSeverity: com.fedex.ship.stub.NotificationSeverityType,
  Notifications: Seq[com.fedex.ship.stub.Notification] = Nil,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId,
  CompletedShipmentDetail: Option[com.fedex.ship.stub.CompletedShipmentDetail] = None)
      


/** Descriptive data sent to FedEx by a customer in order to ship a package.
*/
case class ProcessTagRequest(WebAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail,
  ClientDetail: com.fedex.ship.stub.ClientDetail,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId,
  RequestedShipment: com.fedex.ship.stub.RequestedShipment)
      

trait PurposeOfShipmentType

object PurposeOfShipmentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): PurposeOfShipmentType = value match {
    case "GIFT" => GIFT
    case "NOT_SOLD" => NOT_SOLD
    case "PERSONAL_EFFECTS" => PERSONAL_EFFECTS
    case "REPAIR_AND_RETURN" => REPAIR_AND_RETURN
    case "SAMPLE" => SAMPLE
    case "SOLD" => SOLD

  }
}

case object GIFT extends PurposeOfShipmentType { override def toString = "GIFT" }
case object NOT_SOLD extends PurposeOfShipmentType { override def toString = "NOT_SOLD" }
case object PERSONAL_EFFECTS extends PurposeOfShipmentType { override def toString = "PERSONAL_EFFECTS" }
case object REPAIR_AND_RETURN extends PurposeOfShipmentType { override def toString = "REPAIR_AND_RETURN" }
case object SAMPLE extends PurposeOfShipmentType { override def toString = "SAMPLE" }
case object SOLD extends PurposeOfShipmentType { override def toString = "SOLD" }

trait RadioactiveContainerClassType

object RadioactiveContainerClassType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RadioactiveContainerClassType = value match {
    case "EXCEPTED_PACKAGE" => EXCEPTED_PACKAGE
    case "INDUSTRIAL_IP1" => INDUSTRIAL_IP1
    case "INDUSTRIAL_IP2" => INDUSTRIAL_IP2
    case "INDUSTRIAL_IP3" => INDUSTRIAL_IP3
    case "TYPE_A" => TYPE_A
    case "TYPE_B_M" => TYPE_B_M
    case "TYPE_B_U" => TYPE_B_U
    case "TYPE_C" => TYPE_C

  }
}

case object EXCEPTED_PACKAGE extends RadioactiveContainerClassType { override def toString = "EXCEPTED_PACKAGE" }
case object INDUSTRIAL_IP1 extends RadioactiveContainerClassType { override def toString = "INDUSTRIAL_IP1" }
case object INDUSTRIAL_IP2 extends RadioactiveContainerClassType { override def toString = "INDUSTRIAL_IP2" }
case object INDUSTRIAL_IP3 extends RadioactiveContainerClassType { override def toString = "INDUSTRIAL_IP3" }
case object TYPE_A extends RadioactiveContainerClassType { override def toString = "TYPE_A" }
case object TYPE_B_M extends RadioactiveContainerClassType { override def toString = "TYPE_B_M" }
case object TYPE_B_U extends RadioactiveContainerClassType { override def toString = "TYPE_B_U" }
case object TYPE_C extends RadioactiveContainerClassType { override def toString = "TYPE_C" }

trait RadioactiveLabelType

object RadioactiveLabelType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RadioactiveLabelType = value match {
    case "III_YELLOW" => III_YELLOW
    case "II_YELLOW" => II_YELLOW
    case "I_WHITE" => I_WHITE

  }
}

case object III_YELLOW extends RadioactiveLabelType { override def toString = "III_YELLOW" }
case object II_YELLOW extends RadioactiveLabelType { override def toString = "II_YELLOW" }
case object I_WHITE extends RadioactiveLabelType { override def toString = "I_WHITE" }


case class RadioactivityDetail(TransportIndex: Option[BigDecimal] = None,
  SurfaceReading: Option[BigDecimal] = None,
  CriticalitySafetyIndex: Option[BigDecimal] = None,
  Dimensions: Option[com.fedex.ship.stub.Dimensions] = None)
      

trait RadioactivityUnitOfMeasure

object RadioactivityUnitOfMeasure {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RadioactivityUnitOfMeasure = value match {
    case "BQ" => BQ
    case "GBQ" => GBQ
    case "KBQ" => KBQ
    case "MBQ" => MBQ
    case "PBQ" => PBQ
    case "TBQ" => TBQ

  }
}

case object BQ extends RadioactivityUnitOfMeasure { override def toString = "BQ" }
case object GBQ extends RadioactivityUnitOfMeasure { override def toString = "GBQ" }
case object KBQ extends RadioactivityUnitOfMeasure { override def toString = "KBQ" }
case object MBQ extends RadioactivityUnitOfMeasure { override def toString = "MBQ" }
case object PBQ extends RadioactivityUnitOfMeasure { override def toString = "PBQ" }
case object TBQ extends RadioactivityUnitOfMeasure { override def toString = "TBQ" }


case class RadionuclideActivity(Value: Option[BigDecimal] = None,
  UnitOfMeasure: Option[com.fedex.ship.stub.RadioactivityUnitOfMeasure] = None)
      


case class RadionuclideDetail(Radionuclide: Option[String] = None,
  Activity: Option[com.fedex.ship.stub.RadionuclideActivity] = None,
  ExceptedPackagingIsReportableQuantity: Option[Boolean] = None,
  PhysicalForm: Option[com.fedex.ship.stub.PhysicalFormType] = None,
  ChemicalForm: Option[String] = None)
      

trait RateDimensionalDivisorType

object RateDimensionalDivisorType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RateDimensionalDivisorType = value match {
    case "COUNTRY" => COUNTRY
    case "CUSTOMER" => CUSTOMERValue2
    case "OTHER" => OTHERValue6
    case "PRODUCT" => PRODUCT
    case "WAIVED" => WAIVED

  }
}

case object COUNTRY extends RateDimensionalDivisorType { override def toString = "COUNTRY" }
case object CUSTOMERValue2 extends RateDimensionalDivisorType { override def toString = "CUSTOMER" }
case object OTHERValue6 extends RateDimensionalDivisorType { override def toString = "OTHER" }
case object PRODUCT extends RateDimensionalDivisorType { override def toString = "PRODUCT" }
case object WAIVED extends RateDimensionalDivisorType { override def toString = "WAIVED" }


/** Identifies a discount applied to the shipment.
*/
case class RateDiscount(RateDiscountType: Option[com.fedex.ship.stub.RateDiscountType] = None,
  Description: Option[String] = None,
  Amount: Option[com.fedex.ship.stub.Money] = None,
  Percent: Option[BigDecimal] = None)
      

trait RateDiscountType

object RateDiscountType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RateDiscountType = value match {
    case "BONUS" => BONUS
    case "COUPON" => COUPON
    case "EARNED" => EARNED
    case "INCENTIVE" => INCENTIVE
    case "OTHER" => OTHERValue7
    case "VOLUME" => VOLUMEValue

  }
}

case object BONUS extends RateDiscountType { override def toString = "BONUS" }
case object COUPON extends RateDiscountType { override def toString = "COUPON" }
case object EARNED extends RateDiscountType { override def toString = "EARNED" }
case object INCENTIVE extends RateDiscountType { override def toString = "INCENTIVE" }
case object OTHERValue7 extends RateDiscountType { override def toString = "OTHER" }
case object VOLUMEValue extends RateDiscountType { override def toString = "VOLUME" }

trait RateElementBasisType

object RateElementBasisType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RateElementBasisType = value match {
    case "BASE_CHARGE" => BASE_CHARGE
    case "NET_CHARGE" => NET_CHARGE
    case "NET_CHARGE_EXCLUDING_TAXES" => NET_CHARGE_EXCLUDING_TAXES
    case "NET_FREIGHT" => NET_FREIGHT

  }
}

case object BASE_CHARGE extends RateElementBasisType { override def toString = "BASE_CHARGE" }
case object NET_CHARGE extends RateElementBasisType { override def toString = "NET_CHARGE" }
case object NET_CHARGE_EXCLUDING_TAXES extends RateElementBasisType { override def toString = "NET_CHARGE_EXCLUDING_TAXES" }
case object NET_FREIGHT extends RateElementBasisType { override def toString = "NET_FREIGHT" }

trait RateRequestType

object RateRequestType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RateRequestType = value match {
    case "LIST" => LISTValue
    case "NONE" => NONEValue4
    case "PREFERRED" => PREFERRED

  }
}

case object LISTValue extends RateRequestType { override def toString = "LIST" }
case object NONEValue4 extends RateRequestType { override def toString = "NONE" }
case object PREFERRED extends RateRequestType { override def toString = "PREFERRED" }

trait RateTypeBasisType

object RateTypeBasisType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RateTypeBasisType = value match {
    case "ACCOUNT" => ACCOUNT
    case "LIST" => LIST

  }
}

case object ACCOUNT extends RateTypeBasisType { override def toString = "ACCOUNT" }
case object LIST extends RateTypeBasisType { override def toString = "LIST" }

trait RatedWeightMethod

object RatedWeightMethod {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RatedWeightMethod = value match {
    case "ACTUAL" => ACTUALValue
    case "AVERAGE_PACKAGE_WEIGHT_MINIMUM" => AVERAGE_PACKAGE_WEIGHT_MINIMUM
    case "BALLOON" => BALLOON
    case "DEFAULT_WEIGHT_APPLIED" => DEFAULT_WEIGHT_APPLIED
    case "DIM" => DIM
    case "FREIGHT_MINIMUM" => FREIGHT_MINIMUM
    case "MIXED" => MIXEDValue
    case "OVERSIZE" => OVERSIZEValue
    case "OVERSIZE_1" => OVERSIZE_1Value
    case "OVERSIZE_2" => OVERSIZE_2Value
    case "OVERSIZE_3" => OVERSIZE_3Value
    case "PACKAGING_MINIMUM" => PACKAGING_MINIMUM
    case "WEIGHT_BREAK" => WEIGHT_BREAK

  }
}

case object ACTUALValue extends RatedWeightMethod { override def toString = "ACTUAL" }
case object AVERAGE_PACKAGE_WEIGHT_MINIMUM extends RatedWeightMethod { override def toString = "AVERAGE_PACKAGE_WEIGHT_MINIMUM" }
case object BALLOON extends RatedWeightMethod { override def toString = "BALLOON" }
case object DEFAULT_WEIGHT_APPLIED extends RatedWeightMethod { override def toString = "DEFAULT_WEIGHT_APPLIED" }
case object DIM extends RatedWeightMethod { override def toString = "DIM" }
case object FREIGHT_MINIMUM extends RatedWeightMethod { override def toString = "FREIGHT_MINIMUM" }
case object MIXEDValue extends RatedWeightMethod { override def toString = "MIXED" }
case object OVERSIZEValue extends RatedWeightMethod { override def toString = "OVERSIZE" }
case object OVERSIZE_1Value extends RatedWeightMethod { override def toString = "OVERSIZE_1" }
case object OVERSIZE_2Value extends RatedWeightMethod { override def toString = "OVERSIZE_2" }
case object OVERSIZE_3Value extends RatedWeightMethod { override def toString = "OVERSIZE_3" }
case object PACKAGING_MINIMUM extends RatedWeightMethod { override def toString = "PACKAGING_MINIMUM" }
case object WEIGHT_BREAK extends RatedWeightMethod { override def toString = "WEIGHT_BREAK" }


case class Rebate(RebateType: Option[com.fedex.ship.stub.RebateType] = None,
  Description: Option[String] = None,
  Amount: Option[com.fedex.ship.stub.Money] = None,
  Percent: Option[BigDecimal] = None)
      

trait RebateType

object RebateType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RebateType = value match {
    case "BONUS" => BONUSValue
    case "EARNED" => EARNEDValue
    case "OTHER" => OTHERValue8

  }
}

case object BONUSValue extends RebateType { override def toString = "BONUS" }
case object EARNEDValue extends RebateType { override def toString = "EARNED" }
case object OTHERValue8 extends RebateType { override def toString = "OTHER" }


/** Specifies how the recipient is identified for customs purposes; the requirements on this information vary with destination country.
*/
case class RecipientCustomsId(Type: Option[com.fedex.ship.stub.RecipientCustomsIdType] = None,
  Value: Option[String] = None)
      

trait RecipientCustomsIdType

object RecipientCustomsIdType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RecipientCustomsIdType = value match {
    case "COMPANY" => COMPANY
    case "INDIVIDUAL" => INDIVIDUALValue
    case "PASSPORT" => PASSPORT

  }
}

case object COMPANY extends RecipientCustomsIdType { override def toString = "COMPANY" }
case object INDIVIDUALValue extends RecipientCustomsIdType { override def toString = "INDIVIDUAL" }
case object PASSPORT extends RecipientCustomsIdType { override def toString = "PASSPORT" }


/** Specifies the details about documents that are recommended to be included with the shipment for ease of shipment processing and transportation.
*/
case class RecommendedDocumentSpecification(Types: com.fedex.ship.stub.RecommendedDocumentType*)
      

trait RecommendedDocumentType

object RecommendedDocumentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RecommendedDocumentType = value match {
    case "ANTIQUE_STATEMENT_EUROPEAN_UNION" => ANTIQUE_STATEMENT_EUROPEAN_UNION
    case "ANTIQUE_STATEMENT_UNITED_STATES" => ANTIQUE_STATEMENT_UNITED_STATES
    case "ASSEMBLER_DECLARATION" => ASSEMBLER_DECLARATION
    case "BEARING_WORKSHEET" => BEARING_WORKSHEET
    case "CERTIFICATE_OF_SHIPMENTS_TO_SYRIA" => CERTIFICATE_OF_SHIPMENTS_TO_SYRIA
    case "COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET" => COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET
    case "CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA" => LongNameValue2
    case "DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS" => LongNameValue3
    case "DECLARATION_OF_BIOLOGICAL_STANDARDS" => DECLARATION_OF_BIOLOGICAL_STANDARDS
    case "DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD" => LongNameValue4
    case "ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET" => ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET
    case "FILM_AND_VIDEO_CERTIFICATE" => FILM_AND_VIDEO_CERTIFICATE
    case "INTERIM_FOOTWEAR_INVOICE" => INTERIM_FOOTWEAR_INVOICE
    case "NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH" => NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH
    case "NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH" => NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH
    case "NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH" => NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH
    case "NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES" => NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES
    case "PACKING_LIST" => PACKING_LIST
    case "PRINTED_CIRCUIT_BOARD_WORKSHEET" => PRINTED_CIRCUIT_BOARD_WORKSHEET
    case "REPAIRED_WATCH_BREAKOUT_WORKSHEET" => REPAIRED_WATCH_BREAKOUT_WORKSHEET
    case "STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES" => LongNameValue5
    case "TOXIC_SUBSTANCES_CONTROL_ACT" => TOXIC_SUBSTANCES_CONTROL_ACT
    case "UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES" => LongNameValue6
    case "UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES" => LongNameValue7
    case "UNITED_STATES_NEW_WATCH_WORKSHEET" => UNITED_STATES_NEW_WATCH_WORKSHEET
    case "UNITED_STATES_WATCH_REPAIR_DECLARATION" => UNITED_STATES_WATCH_REPAIR_DECLARATION

  }
}

case object ANTIQUE_STATEMENT_EUROPEAN_UNION extends RecommendedDocumentType { override def toString = "ANTIQUE_STATEMENT_EUROPEAN_UNION" }
case object ANTIQUE_STATEMENT_UNITED_STATES extends RecommendedDocumentType { override def toString = "ANTIQUE_STATEMENT_UNITED_STATES" }
case object ASSEMBLER_DECLARATION extends RecommendedDocumentType { override def toString = "ASSEMBLER_DECLARATION" }
case object BEARING_WORKSHEET extends RecommendedDocumentType { override def toString = "BEARING_WORKSHEET" }
case object CERTIFICATE_OF_SHIPMENTS_TO_SYRIA extends RecommendedDocumentType { override def toString = "CERTIFICATE_OF_SHIPMENTS_TO_SYRIA" }
case object COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET extends RecommendedDocumentType { override def toString = "COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET" }
case object LongNameValue2 extends RecommendedDocumentType { override def toString = "CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA" }
case object LongNameValue3 extends RecommendedDocumentType { override def toString = "DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS" }
case object DECLARATION_OF_BIOLOGICAL_STANDARDS extends RecommendedDocumentType { override def toString = "DECLARATION_OF_BIOLOGICAL_STANDARDS" }
case object LongNameValue4 extends RecommendedDocumentType { override def toString = "DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD" }
case object ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET extends RecommendedDocumentType { override def toString = "ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET" }
case object FILM_AND_VIDEO_CERTIFICATE extends RecommendedDocumentType { override def toString = "FILM_AND_VIDEO_CERTIFICATE" }
case object INTERIM_FOOTWEAR_INVOICE extends RecommendedDocumentType { override def toString = "INTERIM_FOOTWEAR_INVOICE" }
case object NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH extends RecommendedDocumentType { override def toString = "NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH" }
case object NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH extends RecommendedDocumentType { override def toString = "NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH" }
case object NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH extends RecommendedDocumentType { override def toString = "NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH" }
case object NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES extends RecommendedDocumentType { override def toString = "NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES" }
case object PACKING_LIST extends RecommendedDocumentType { override def toString = "PACKING_LIST" }
case object PRINTED_CIRCUIT_BOARD_WORKSHEET extends RecommendedDocumentType { override def toString = "PRINTED_CIRCUIT_BOARD_WORKSHEET" }
case object REPAIRED_WATCH_BREAKOUT_WORKSHEET extends RecommendedDocumentType { override def toString = "REPAIRED_WATCH_BREAKOUT_WORKSHEET" }
case object LongNameValue5 extends RecommendedDocumentType { override def toString = "STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES" }
case object TOXIC_SUBSTANCES_CONTROL_ACT extends RecommendedDocumentType { override def toString = "TOXIC_SUBSTANCES_CONTROL_ACT" }
case object LongNameValue6 extends RecommendedDocumentType { override def toString = "UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES" }
case object LongNameValue7 extends RecommendedDocumentType { override def toString = "UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES" }
case object UNITED_STATES_NEW_WATCH_WORKSHEET extends RecommendedDocumentType { override def toString = "UNITED_STATES_NEW_WATCH_WORKSHEET" }
case object UNITED_STATES_WATCH_REPAIR_DECLARATION extends RecommendedDocumentType { override def toString = "UNITED_STATES_WATCH_REPAIR_DECLARATION" }

trait RegulatoryControlType

object RegulatoryControlType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RegulatoryControlType = value match {
    case "EU_CIRCULATION" => EU_CIRCULATION
    case "FOOD_OR_PERISHABLE" => FOOD_OR_PERISHABLE
    case "NAFTA" => NAFTA
    case "NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION" => NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION

  }
}

case object EU_CIRCULATION extends RegulatoryControlType { override def toString = "EU_CIRCULATION" }
case object FOOD_OR_PERISHABLE extends RegulatoryControlType { override def toString = "FOOD_OR_PERISHABLE" }
case object NAFTA extends RegulatoryControlType { override def toString = "NAFTA" }
case object NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION extends RegulatoryControlType { override def toString = "NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION" }


/** Specifies details needed to generate any label artifacts required due to regulatory requirements.
*/
case class RegulatoryLabelContentDetail(Type: Option[com.fedex.ship.stub.RegulatoryLabelType] = None,
  GenerationOptions: Seq[com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType] = Nil)
      

trait RegulatoryLabelType

object RegulatoryLabelType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RegulatoryLabelType = value match {
    case "ALCOHOL_SHIPMENT_LABEL" => ALCOHOL_SHIPMENT_LABEL

  }
}

case object ALCOHOL_SHIPMENT_LABEL extends RegulatoryLabelType { override def toString = "ALCOHOL_SHIPMENT_LABEL" }

trait RelativeVerticalPositionType

object RelativeVerticalPositionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RelativeVerticalPositionType = value match {
    case "ABOVE" => ABOVE
    case "BELOW" => BELOW

  }
}

case object ABOVE extends RelativeVerticalPositionType { override def toString = "ABOVE" }
case object BELOW extends RelativeVerticalPositionType { override def toString = "BELOW" }


/** This class rationalizes RequestedPackage and RequestedPackageSummary from previous interfaces.
*/
case class RequestedPackageLineItem(SequenceNumber: Option[BigInt] = None,
  GroupNumber: Option[BigInt] = None,
  GroupPackageCount: Option[BigInt] = None,
  VariableHandlingChargeDetail: Option[com.fedex.ship.stub.VariableHandlingChargeDetail] = None,
  InsuredValue: Option[com.fedex.ship.stub.Money] = None,
  Weight: Option[com.fedex.ship.stub.Weight] = None,
  Dimensions: Option[com.fedex.ship.stub.Dimensions] = None,
  PhysicalPackaging: Option[com.fedex.ship.stub.PhysicalPackagingType] = None,
  ItemDescription: Option[String] = None,
  ItemDescriptionForClearance: Option[String] = None,
  CustomerReferences: Seq[com.fedex.ship.stub.CustomerReference] = Nil,
  SpecialServicesRequested: Option[com.fedex.ship.stub.PackageSpecialServicesRequested] = None,
  ContentRecords: Seq[com.fedex.ship.stub.ContentRecord] = Nil)
      


/** The descriptive data for the shipment being tendered to FedEx.
*/
case class RequestedShipment(ShipTimestamp: javax.xml.datatype.XMLGregorianCalendar,
  DropoffType: com.fedex.ship.stub.DropoffType,
  ServiceType: com.fedex.ship.stub.ServiceType,
  PackagingType: com.fedex.ship.stub.PackagingType,
  ManifestDetail: Option[com.fedex.ship.stub.ShipmentManifestDetail] = None,
  TotalWeight: Option[com.fedex.ship.stub.Weight] = None,
  TotalInsuredValue: Option[com.fedex.ship.stub.Money] = None,
  PreferredCurrency: Option[String] = None,
  Shipper: com.fedex.ship.stub.Party,
  Recipient: com.fedex.ship.stub.Party,
  RecipientLocationNumber: Option[String] = None,
  Origin: Option[com.fedex.ship.stub.ContactAndAddress] = None,
  SoldTo: Option[com.fedex.ship.stub.Party] = None,
  ShippingChargesPayment: Option[com.fedex.ship.stub.Payment] = None,
  SpecialServicesRequested: Option[com.fedex.ship.stub.ShipmentSpecialServicesRequested] = None,
  ExpressFreightDetail: Option[com.fedex.ship.stub.ExpressFreightDetail] = None,
  FreightShipmentDetail: Option[com.fedex.ship.stub.FreightShipmentDetail] = None,
  DeliveryInstructions: Option[String] = None,
  VariableHandlingChargeDetail: Option[com.fedex.ship.stub.VariableHandlingChargeDetail] = None,
  CustomsClearanceDetail: Option[com.fedex.ship.stub.CustomsClearanceDetail] = None,
  PickupDetail: Option[com.fedex.ship.stub.PickupDetail] = None,
  SmartPostDetail: Option[com.fedex.ship.stub.SmartPostShipmentDetail] = None,
  BlockInsightVisibility: Option[Boolean] = None,
  LabelSpecification: com.fedex.ship.stub.LabelSpecification,
  ShippingDocumentSpecification: Option[com.fedex.ship.stub.ShippingDocumentSpecification] = None,
  RateRequestTypes: Seq[com.fedex.ship.stub.RateRequestType] = Nil,
  EdtRequestType: Option[com.fedex.ship.stub.EdtRequestType] = None,
  MasterTrackingId: Option[com.fedex.ship.stub.TrackingId] = None,
  PackageCount: BigInt,
  ConfigurationData: Option[com.fedex.ship.stub.ShipmentConfigurationData] = None,
  RequestedPackageLineItems: Seq[com.fedex.ship.stub.RequestedPackageLineItem] = Nil)
      

trait RequestedShippingDocumentType

object RequestedShippingDocumentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RequestedShippingDocumentType = value match {
    case "CERTIFICATE_OF_ORIGIN" => CERTIFICATE_OF_ORIGINValue
    case "COMMERCIAL_INVOICE" => COMMERCIAL_INVOICEValue
    case "CUSTOMER_SPECIFIED_LABELS" => CUSTOMER_SPECIFIED_LABELS
    case "CUSTOM_PACKAGE_DOCUMENT" => CUSTOM_PACKAGE_DOCUMENTValue
    case "CUSTOM_SHIPMENT_DOCUMENT" => CUSTOM_SHIPMENT_DOCUMENTValue
    case "DANGEROUS_GOODS_SHIPPERS_DECLARATION" => DANGEROUS_GOODS_SHIPPERS_DECLARATIONValue
    case "EXPORT_DECLARATION" => EXPORT_DECLARATIONValue
    case "FREIGHT_ADDRESS_LABEL" => FREIGHT_ADDRESS_LABELValue
    case "GENERAL_AGENCY_AGREEMENT" => GENERAL_AGENCY_AGREEMENTValue
    case "LABEL" => LABEL
    case "NAFTA_CERTIFICATE_OF_ORIGIN" => NAFTA_CERTIFICATE_OF_ORIGINValue
    case "OP_900" => OP_900Value
    case "PRO_FORMA_INVOICE" => PRO_FORMA_INVOICEValue
    case "RETURN_INSTRUCTIONS" => RETURN_INSTRUCTIONSValue

  }
}

case object CERTIFICATE_OF_ORIGINValue extends RequestedShippingDocumentType { override def toString = "CERTIFICATE_OF_ORIGIN" }
case object COMMERCIAL_INVOICEValue extends RequestedShippingDocumentType { override def toString = "COMMERCIAL_INVOICE" }
case object CUSTOMER_SPECIFIED_LABELS extends RequestedShippingDocumentType { override def toString = "CUSTOMER_SPECIFIED_LABELS" }
case object CUSTOM_PACKAGE_DOCUMENTValue extends RequestedShippingDocumentType { override def toString = "CUSTOM_PACKAGE_DOCUMENT" }
case object CUSTOM_SHIPMENT_DOCUMENTValue extends RequestedShippingDocumentType { override def toString = "CUSTOM_SHIPMENT_DOCUMENT" }
case object DANGEROUS_GOODS_SHIPPERS_DECLARATIONValue extends RequestedShippingDocumentType { override def toString = "DANGEROUS_GOODS_SHIPPERS_DECLARATION" }
case object EXPORT_DECLARATIONValue extends RequestedShippingDocumentType { override def toString = "EXPORT_DECLARATION" }
case object FREIGHT_ADDRESS_LABELValue extends RequestedShippingDocumentType { override def toString = "FREIGHT_ADDRESS_LABEL" }
case object GENERAL_AGENCY_AGREEMENTValue extends RequestedShippingDocumentType { override def toString = "GENERAL_AGENCY_AGREEMENT" }
case object LABEL extends RequestedShippingDocumentType { override def toString = "LABEL" }
case object NAFTA_CERTIFICATE_OF_ORIGINValue extends RequestedShippingDocumentType { override def toString = "NAFTA_CERTIFICATE_OF_ORIGIN" }
case object OP_900Value extends RequestedShippingDocumentType { override def toString = "OP_900" }
case object PRO_FORMA_INVOICEValue extends RequestedShippingDocumentType { override def toString = "PRO_FORMA_INVOICE" }
case object RETURN_INSTRUCTIONSValue extends RequestedShippingDocumentType { override def toString = "RETURN_INSTRUCTIONS" }


case class ReturnAssociationDetail(TrackingNumber: Option[String] = None,
  ShipDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      

trait ReturnEMailAllowedSpecialServiceType

object ReturnEMailAllowedSpecialServiceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ReturnEMailAllowedSpecialServiceType = value match {
    case "SATURDAY_DELIVERY" => SATURDAY_DELIVERYValue
    case "SATURDAY_PICKUP" => SATURDAY_PICKUPValue

  }
}

case object SATURDAY_DELIVERYValue extends ReturnEMailAllowedSpecialServiceType { override def toString = "SATURDAY_DELIVERY" }
case object SATURDAY_PICKUPValue extends ReturnEMailAllowedSpecialServiceType { override def toString = "SATURDAY_PICKUP" }


/** Return Email Details
*/
case class ReturnEMailDetail(MerchantPhoneNumber: Option[String] = None,
  AllowedSpecialServices: Seq[com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType] = Nil)
      


/** The instructions indicating how to print the return instructions( e.g. image type) Specifies characteristics of a shipping document to be produced.
*/
case class ReturnInstructionsDetail(Format: Option[com.fedex.ship.stub.ShippingDocumentFormat] = None,
  CustomText: Option[String] = None)
      


/** Information relating to a return shipment.
*/
case class ReturnShipmentDetail(ReturnType: com.fedex.ship.stub.ReturnType,
  Rma: Option[com.fedex.ship.stub.Rma] = None,
  ReturnEMailDetail: Option[com.fedex.ship.stub.ReturnEMailDetail] = None,
  ReturnAssociation: Option[com.fedex.ship.stub.ReturnAssociationDetail] = None)
      

trait ReturnType

object ReturnType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ReturnType = value match {
    case "FEDEX_TAG" => FEDEX_TAGValue
    case "PENDING" => PENDING
    case "PRINT_RETURN_LABEL" => PRINT_RETURN_LABEL

  }
}

case object FEDEX_TAGValue extends ReturnType { override def toString = "FEDEX_TAG" }
case object PENDING extends ReturnType { override def toString = "PENDING" }
case object PRINT_RETURN_LABEL extends ReturnType { override def toString = "PRINT_RETURN_LABEL" }

trait ReturnedRateType

object ReturnedRateType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ReturnedRateType = value match {
    case "INCENTIVE" => INCENTIVEValue
    case "PAYOR_ACCOUNT_PACKAGE" => PAYOR_ACCOUNT_PACKAGE
    case "PAYOR_ACCOUNT_SHIPMENT" => PAYOR_ACCOUNT_SHIPMENT
    case "PAYOR_LIST_PACKAGE" => PAYOR_LIST_PACKAGE
    case "PAYOR_LIST_SHIPMENT" => PAYOR_LIST_SHIPMENT
    case "PREFERRED_ACCOUNT_PACKAGE" => PREFERRED_ACCOUNT_PACKAGE
    case "PREFERRED_ACCOUNT_SHIPMENT" => PREFERRED_ACCOUNT_SHIPMENT
    case "PREFERRED_LIST_PACKAGE" => PREFERRED_LIST_PACKAGE
    case "PREFERRED_LIST_SHIPMENT" => PREFERRED_LIST_SHIPMENT

  }
}

case object INCENTIVEValue extends ReturnedRateType { override def toString = "INCENTIVE" }
case object PAYOR_ACCOUNT_PACKAGE extends ReturnedRateType { override def toString = "PAYOR_ACCOUNT_PACKAGE" }
case object PAYOR_ACCOUNT_SHIPMENT extends ReturnedRateType { override def toString = "PAYOR_ACCOUNT_SHIPMENT" }
case object PAYOR_LIST_PACKAGE extends ReturnedRateType { override def toString = "PAYOR_LIST_PACKAGE" }
case object PAYOR_LIST_SHIPMENT extends ReturnedRateType { override def toString = "PAYOR_LIST_SHIPMENT" }
case object PREFERRED_ACCOUNT_PACKAGE extends ReturnedRateType { override def toString = "PREFERRED_ACCOUNT_PACKAGE" }
case object PREFERRED_ACCOUNT_SHIPMENT extends ReturnedRateType { override def toString = "PREFERRED_ACCOUNT_SHIPMENT" }
case object PREFERRED_LIST_PACKAGE extends ReturnedRateType { override def toString = "PREFERRED_LIST_PACKAGE" }
case object PREFERRED_LIST_SHIPMENT extends ReturnedRateType { override def toString = "PREFERRED_LIST_SHIPMENT" }

trait ReturnedShippingDocumentType

object ReturnedShippingDocumentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ReturnedShippingDocumentType = value match {
    case "AUXILIARY_LABEL" => AUXILIARY_LABEL
    case "CERTIFICATE_OF_ORIGIN" => CERTIFICATE_OF_ORIGIN
    case "COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE" => LongName
    case "COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL" => LongNameValue
    case "COD_RETURN_2_D_BARCODE" => COD_RETURN_2_D_BARCODE
    case "COD_RETURN_LABEL" => COD_RETURN_LABEL
    case "COMMERCIAL_INVOICE" => COMMERCIAL_INVOICE
    case "CUSTOM_PACKAGE_DOCUMENT" => CUSTOM_PACKAGE_DOCUMENT
    case "CUSTOM_SHIPMENT_DOCUMENT" => CUSTOM_SHIPMENT_DOCUMENT
    case "DANGEROUS_GOODS_SHIPPERS_DECLARATION" => DANGEROUS_GOODS_SHIPPERS_DECLARATION
    case "DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE" => DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE
    case "DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL" => DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL
    case "ETD_LABEL" => ETD_LABEL
    case "EXPORT_DECLARATION" => EXPORT_DECLARATION
    case "FREIGHT_ADDRESS_LABEL" => FREIGHT_ADDRESS_LABEL
    case "GENERAL_AGENCY_AGREEMENT" => GENERAL_AGENCY_AGREEMENT
    case "GROUND_BARCODE" => GROUND_BARCODE
    case "NAFTA_CERTIFICATE_OF_ORIGIN" => NAFTA_CERTIFICATE_OF_ORIGIN
    case "OP_900" => OP_900
    case "OUTBOUND_2_D_BARCODE" => OUTBOUND_2_D_BARCODE
    case "OUTBOUND_LABEL" => OUTBOUND_LABEL
    case "PRO_FORMA_INVOICE" => PRO_FORMA_INVOICE
    case "RECIPIENT_ADDRESS_BARCODE" => RECIPIENT_ADDRESS_BARCODE
    case "RECIPIENT_POSTAL_BARCODE" => RECIPIENT_POSTAL_BARCODE
    case "RETURN_INSTRUCTIONS" => RETURN_INSTRUCTIONS
    case "TERMS_AND_CONDITIONS" => TERMS_AND_CONDITIONS
    case "USPS_BARCODE" => USPS_BARCODE

  }
}

case object AUXILIARY_LABEL extends ReturnedShippingDocumentType { override def toString = "AUXILIARY_LABEL" }
case object CERTIFICATE_OF_ORIGIN extends ReturnedShippingDocumentType { override def toString = "CERTIFICATE_OF_ORIGIN" }
case object LongName extends ReturnedShippingDocumentType { override def toString = "COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE" }
case object LongNameValue extends ReturnedShippingDocumentType { override def toString = "COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL" }
case object COD_RETURN_2_D_BARCODE extends ReturnedShippingDocumentType { override def toString = "COD_RETURN_2_D_BARCODE" }
case object COD_RETURN_LABEL extends ReturnedShippingDocumentType { override def toString = "COD_RETURN_LABEL" }
case object COMMERCIAL_INVOICE extends ReturnedShippingDocumentType { override def toString = "COMMERCIAL_INVOICE" }
case object CUSTOM_PACKAGE_DOCUMENT extends ReturnedShippingDocumentType { override def toString = "CUSTOM_PACKAGE_DOCUMENT" }
case object CUSTOM_SHIPMENT_DOCUMENT extends ReturnedShippingDocumentType { override def toString = "CUSTOM_SHIPMENT_DOCUMENT" }
case object DANGEROUS_GOODS_SHIPPERS_DECLARATION extends ReturnedShippingDocumentType { override def toString = "DANGEROUS_GOODS_SHIPPERS_DECLARATION" }
case object DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE extends ReturnedShippingDocumentType { override def toString = "DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE" }
case object DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL extends ReturnedShippingDocumentType { override def toString = "DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL" }
case object ETD_LABEL extends ReturnedShippingDocumentType { override def toString = "ETD_LABEL" }
case object EXPORT_DECLARATION extends ReturnedShippingDocumentType { override def toString = "EXPORT_DECLARATION" }
case object FREIGHT_ADDRESS_LABEL extends ReturnedShippingDocumentType { override def toString = "FREIGHT_ADDRESS_LABEL" }
case object GENERAL_AGENCY_AGREEMENT extends ReturnedShippingDocumentType { override def toString = "GENERAL_AGENCY_AGREEMENT" }
case object GROUND_BARCODE extends ReturnedShippingDocumentType { override def toString = "GROUND_BARCODE" }
case object NAFTA_CERTIFICATE_OF_ORIGIN extends ReturnedShippingDocumentType { override def toString = "NAFTA_CERTIFICATE_OF_ORIGIN" }
case object OP_900 extends ReturnedShippingDocumentType { override def toString = "OP_900" }
case object OUTBOUND_2_D_BARCODE extends ReturnedShippingDocumentType { override def toString = "OUTBOUND_2_D_BARCODE" }
case object OUTBOUND_LABEL extends ReturnedShippingDocumentType { override def toString = "OUTBOUND_LABEL" }
case object PRO_FORMA_INVOICE extends ReturnedShippingDocumentType { override def toString = "PRO_FORMA_INVOICE" }
case object RECIPIENT_ADDRESS_BARCODE extends ReturnedShippingDocumentType { override def toString = "RECIPIENT_ADDRESS_BARCODE" }
case object RECIPIENT_POSTAL_BARCODE extends ReturnedShippingDocumentType { override def toString = "RECIPIENT_POSTAL_BARCODE" }
case object RETURN_INSTRUCTIONS extends ReturnedShippingDocumentType { override def toString = "RETURN_INSTRUCTIONS" }
case object TERMS_AND_CONDITIONS extends ReturnedShippingDocumentType { override def toString = "TERMS_AND_CONDITIONS" }
case object USPS_BARCODE extends ReturnedShippingDocumentType { override def toString = "USPS_BARCODE" }


/** June 2011 ITG 121203 IR-RMA number has been removed from this structure and added as a new customer reference type. The structure remains because of the reason field below.
*/
case class Rma(Reason: Option[String] = None)
      

trait RotationType

object RotationType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): RotationType = value match {
    case "LEFT" => LEFT
    case "NONE" => NONE
    case "RIGHT" => RIGHT
    case "UPSIDE_DOWN" => UPSIDE_DOWN

  }
}

case object LEFT extends RotationType { override def toString = "LEFT" }
case object NONE extends RotationType { override def toString = "NONE" }
case object RIGHT extends RotationType { override def toString = "RIGHT" }
case object UPSIDE_DOWN extends RotationType { override def toString = "UPSIDE_DOWN" }

trait SecondaryBarcodeType

object SecondaryBarcodeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SecondaryBarcodeType = value match {
    case "COMMON_2D" => COMMON_2DValue
    case "NONE" => NONEValue5
    case "SSCC_18" => SSCC_18
    case "USPS" => USPS

  }
}

case object COMMON_2DValue extends SecondaryBarcodeType { override def toString = "COMMON_2D" }
case object NONEValue5 extends SecondaryBarcodeType { override def toString = "NONE" }
case object SSCC_18 extends SecondaryBarcodeType { override def toString = "SSCC_18" }
case object USPS extends SecondaryBarcodeType { override def toString = "USPS" }

trait ServiceType

object ServiceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ServiceType = value match {
    case "EUROPE_FIRST_INTERNATIONAL_PRIORITY" => EUROPE_FIRST_INTERNATIONAL_PRIORITY
    case "FEDEX_1_DAY_FREIGHT" => FEDEX_1_DAY_FREIGHT
    case "FEDEX_2_DAY" => FEDEX_2_DAY
    case "FEDEX_2_DAY_AM" => FEDEX_2_DAY_AM
    case "FEDEX_2_DAY_FREIGHT" => FEDEX_2_DAY_FREIGHT
    case "FEDEX_3_DAY_FREIGHT" => FEDEX_3_DAY_FREIGHT
    case "FEDEX_DISTANCE_DEFERRED" => FEDEX_DISTANCE_DEFERRED
    case "FEDEX_EXPRESS_SAVER" => FEDEX_EXPRESS_SAVER
    case "FEDEX_FIRST_FREIGHT" => FEDEX_FIRST_FREIGHT
    case "FEDEX_FREIGHT_ECONOMY" => FEDEX_FREIGHT_ECONOMY
    case "FEDEX_FREIGHT_PRIORITY" => FEDEX_FREIGHT_PRIORITY
    case "FEDEX_GROUND" => FEDEX_GROUND
    case "FEDEX_NEXT_DAY_AFTERNOON" => FEDEX_NEXT_DAY_AFTERNOON
    case "FEDEX_NEXT_DAY_EARLY_MORNING" => FEDEX_NEXT_DAY_EARLY_MORNING
    case "FEDEX_NEXT_DAY_END_OF_DAY" => FEDEX_NEXT_DAY_END_OF_DAY
    case "FEDEX_NEXT_DAY_FREIGHT" => FEDEX_NEXT_DAY_FREIGHT
    case "FEDEX_NEXT_DAY_MID_MORNING" => FEDEX_NEXT_DAY_MID_MORNING
    case "FIRST_OVERNIGHT" => FIRST_OVERNIGHT
    case "GROUND_HOME_DELIVERY" => GROUND_HOME_DELIVERY
    case "INTERNATIONAL_ECONOMY" => INTERNATIONAL_ECONOMY
    case "INTERNATIONAL_ECONOMY_FREIGHT" => INTERNATIONAL_ECONOMY_FREIGHT
    case "INTERNATIONAL_FIRST" => INTERNATIONAL_FIRST
    case "INTERNATIONAL_PRIORITY" => INTERNATIONAL_PRIORITY
    case "INTERNATIONAL_PRIORITY_FREIGHT" => INTERNATIONAL_PRIORITY_FREIGHT
    case "PRIORITY_OVERNIGHT" => PRIORITY_OVERNIGHT
    case "SAME_DAY" => SAME_DAY
    case "SAME_DAY_CITY" => SAME_DAY_CITY
    case "SMART_POST" => SMART_POST
    case "STANDARD_OVERNIGHT" => STANDARD_OVERNIGHT

  }
}

case object EUROPE_FIRST_INTERNATIONAL_PRIORITY extends ServiceType { override def toString = "EUROPE_FIRST_INTERNATIONAL_PRIORITY" }
case object FEDEX_1_DAY_FREIGHT extends ServiceType { override def toString = "FEDEX_1_DAY_FREIGHT" }
case object FEDEX_2_DAY extends ServiceType { override def toString = "FEDEX_2_DAY" }
case object FEDEX_2_DAY_AM extends ServiceType { override def toString = "FEDEX_2_DAY_AM" }
case object FEDEX_2_DAY_FREIGHT extends ServiceType { override def toString = "FEDEX_2_DAY_FREIGHT" }
case object FEDEX_3_DAY_FREIGHT extends ServiceType { override def toString = "FEDEX_3_DAY_FREIGHT" }
case object FEDEX_DISTANCE_DEFERRED extends ServiceType { override def toString = "FEDEX_DISTANCE_DEFERRED" }
case object FEDEX_EXPRESS_SAVER extends ServiceType { override def toString = "FEDEX_EXPRESS_SAVER" }
case object FEDEX_FIRST_FREIGHT extends ServiceType { override def toString = "FEDEX_FIRST_FREIGHT" }
case object FEDEX_FREIGHT_ECONOMY extends ServiceType { override def toString = "FEDEX_FREIGHT_ECONOMY" }
case object FEDEX_FREIGHT_PRIORITY extends ServiceType { override def toString = "FEDEX_FREIGHT_PRIORITY" }
case object FEDEX_GROUND extends ServiceType { override def toString = "FEDEX_GROUND" }
case object FEDEX_NEXT_DAY_AFTERNOON extends ServiceType { override def toString = "FEDEX_NEXT_DAY_AFTERNOON" }
case object FEDEX_NEXT_DAY_EARLY_MORNING extends ServiceType { override def toString = "FEDEX_NEXT_DAY_EARLY_MORNING" }
case object FEDEX_NEXT_DAY_END_OF_DAY extends ServiceType { override def toString = "FEDEX_NEXT_DAY_END_OF_DAY" }
case object FEDEX_NEXT_DAY_FREIGHT extends ServiceType { override def toString = "FEDEX_NEXT_DAY_FREIGHT" }
case object FEDEX_NEXT_DAY_MID_MORNING extends ServiceType { override def toString = "FEDEX_NEXT_DAY_MID_MORNING" }
case object FIRST_OVERNIGHT extends ServiceType { override def toString = "FIRST_OVERNIGHT" }
case object GROUND_HOME_DELIVERY extends ServiceType { override def toString = "GROUND_HOME_DELIVERY" }
case object INTERNATIONAL_ECONOMY extends ServiceType { override def toString = "INTERNATIONAL_ECONOMY" }
case object INTERNATIONAL_ECONOMY_FREIGHT extends ServiceType { override def toString = "INTERNATIONAL_ECONOMY_FREIGHT" }
case object INTERNATIONAL_FIRST extends ServiceType { override def toString = "INTERNATIONAL_FIRST" }
case object INTERNATIONAL_PRIORITY extends ServiceType { override def toString = "INTERNATIONAL_PRIORITY" }
case object INTERNATIONAL_PRIORITY_FREIGHT extends ServiceType { override def toString = "INTERNATIONAL_PRIORITY_FREIGHT" }
case object PRIORITY_OVERNIGHT extends ServiceType { override def toString = "PRIORITY_OVERNIGHT" }
case object SAME_DAY extends ServiceType { override def toString = "SAME_DAY" }
case object SAME_DAY_CITY extends ServiceType { override def toString = "SAME_DAY_CITY" }
case object SMART_POST extends ServiceType { override def toString = "SMART_POST" }
case object STANDARD_OVERNIGHT extends ServiceType { override def toString = "STANDARD_OVERNIGHT" }


/** Specifies data structures that may be re-used multiple times with s single shipment.
*/
case class ShipmentConfigurationData(DangerousGoodsPackageConfigurations: com.fedex.ship.stub.DangerousGoodsDetail*)
      


/** Shipment-level totals of dry ice data across all packages.
*/
case class ShipmentDryIceDetail(PackageCount: BigInt,
  TotalWeight: com.fedex.ship.stub.Weight)
      


/** Data for a single leg of a shipment's total/summary rates, as calculated per a specific rate type.
*/
case class ShipmentLegRateDetail(LegDescription: Option[String] = None,
  LegOrigin: Option[com.fedex.ship.stub.Address] = None,
  LegOriginLocationId: Option[String] = None,
  LegDestination: Option[com.fedex.ship.stub.Address] = None,
  LegDestinationLocationId: Option[String] = None,
  RateType: Option[com.fedex.ship.stub.ReturnedRateType] = None,
  RateScale: Option[String] = None,
  RateZone: Option[String] = None,
  PricingCode: Option[com.fedex.ship.stub.PricingCodeType] = None,
  RatedWeightMethod: Option[com.fedex.ship.stub.RatedWeightMethod] = None,
  MinimumChargeType: Option[com.fedex.ship.stub.MinimumChargeType] = None,
  CurrencyExchangeRate: Option[com.fedex.ship.stub.CurrencyExchangeRate] = None,
  SpecialRatingApplied: Seq[com.fedex.ship.stub.SpecialRatingAppliedType] = Nil,
  DimDivisor: Option[BigInt] = None,
  DimDivisorType: Option[com.fedex.ship.stub.RateDimensionalDivisorType] = None,
  FuelSurchargePercent: Option[BigDecimal] = None,
  TotalBillingWeight: Option[com.fedex.ship.stub.Weight] = None,
  TotalDimWeight: Option[com.fedex.ship.stub.Weight] = None,
  TotalBaseCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalFreightDiscounts: Option[com.fedex.ship.stub.Money] = None,
  TotalNetFreight: Option[com.fedex.ship.stub.Money] = None,
  TotalSurcharges: Option[com.fedex.ship.stub.Money] = None,
  TotalNetFedExCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalTaxes: Option[com.fedex.ship.stub.Money] = None,
  TotalNetCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalRebates: Option[com.fedex.ship.stub.Money] = None,
  TotalDutiesAndTaxes: Option[com.fedex.ship.stub.Money] = None,
  TotalNetChargeWithDutiesAndTaxes: Option[com.fedex.ship.stub.Money] = None,
  FreightRateDetail: Option[com.fedex.ship.stub.FreightRateDetail] = None,
  FreightDiscounts: Seq[com.fedex.ship.stub.RateDiscount] = Nil,
  Rebates: Seq[com.fedex.ship.stub.Rebate] = Nil,
  Surcharges: Seq[com.fedex.ship.stub.Surcharge] = Nil,
  Taxes: Seq[com.fedex.ship.stub.Tax] = Nil,
  DutiesAndTaxes: Seq[com.fedex.ship.stub.EdtCommodityTax] = Nil,
  VariableHandlingCharges: Option[com.fedex.ship.stub.VariableHandlingCharges] = None,
  TotalVariableHandlingCharges: Option[com.fedex.ship.stub.VariableHandlingCharges] = None)
      


case class ShipmentManifestDetail(ManifestReferenceType: Option[com.fedex.ship.stub.CustomerReferenceType] = None)
      


case class ShipmentOperationalDetail(UrsaPrefixCode: Option[String] = None,
  UrsaSuffixCode: Option[String] = None,
  OriginLocationId: Option[String] = None,
  OriginLocationNumber: Option[Int] = None,
  OriginServiceArea: Option[String] = None,
  DestinationLocationId: Option[String] = None,
  DestinationLocationNumber: Option[Int] = None,
  DestinationServiceArea: Option[String] = None,
  DestinationLocationStateOrProvinceCode: Option[String] = None,
  DeliveryDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  DeliveryDay: Option[com.fedex.ship.stub.DayOfWeekType] = None,
  PublishedDeliveryTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  CommitDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  CommitDay: Option[com.fedex.ship.stub.DayOfWeekType] = None,
  TransitTime: Option[com.fedex.ship.stub.TransitTimeType] = None,
  MaximumTransitTime: Option[com.fedex.ship.stub.TransitTimeType] = None,
  CustomTransitTime: Option[com.fedex.ship.stub.TransitTimeType] = None,
  IneligibleForMoneyBackGuarantee: Option[Boolean] = None,
  DeliveryEligibilities: Seq[com.fedex.ship.stub.GroundDeliveryEligibilityType] = Nil,
  AstraPlannedServiceLevel: Option[String] = None,
  AstraDescription: Option[String] = None,
  PostalCode: Option[String] = None,
  StateOrProvinceCode: Option[String] = None,
  CountryCode: Option[String] = None,
  AirportId: Option[String] = None,
  ServiceCode: Option[String] = None,
  PackagingCode: Option[String] = None,
  Scac: Option[String] = None)
      


/** Data for a shipment's total/summary rates, as calculated per a specific rate type. The "total..." fields may differ from the sum of corresponding package data for Multiweight or Express MPS.
*/
case class ShipmentRateDetail(RateType: Option[com.fedex.ship.stub.ReturnedRateType] = None,
  RateScale: Option[String] = None,
  RateZone: Option[String] = None,
  PricingCode: Option[com.fedex.ship.stub.PricingCodeType] = None,
  RatedWeightMethod: Option[com.fedex.ship.stub.RatedWeightMethod] = None,
  MinimumChargeType: Option[com.fedex.ship.stub.MinimumChargeType] = None,
  CurrencyExchangeRate: Option[com.fedex.ship.stub.CurrencyExchangeRate] = None,
  SpecialRatingApplied: Seq[com.fedex.ship.stub.SpecialRatingAppliedType] = Nil,
  DimDivisor: Option[BigInt] = None,
  DimDivisorType: Option[com.fedex.ship.stub.RateDimensionalDivisorType] = None,
  FuelSurchargePercent: Option[BigDecimal] = None,
  TotalBillingWeight: Option[com.fedex.ship.stub.Weight] = None,
  TotalDimWeight: Option[com.fedex.ship.stub.Weight] = None,
  TotalBaseCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalFreightDiscounts: Option[com.fedex.ship.stub.Money] = None,
  TotalNetFreight: Option[com.fedex.ship.stub.Money] = None,
  TotalSurcharges: Option[com.fedex.ship.stub.Money] = None,
  TotalNetFedExCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalTaxes: Option[com.fedex.ship.stub.Money] = None,
  TotalNetCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalRebates: Option[com.fedex.ship.stub.Money] = None,
  TotalDutiesAndTaxes: Option[com.fedex.ship.stub.Money] = None,
  TotalNetChargeWithDutiesAndTaxes: Option[com.fedex.ship.stub.Money] = None,
  ShipmentLegRateDetails: Seq[com.fedex.ship.stub.ShipmentLegRateDetail] = Nil,
  FreightRateDetail: Option[com.fedex.ship.stub.FreightRateDetail] = None,
  FreightDiscounts: Seq[com.fedex.ship.stub.RateDiscount] = Nil,
  Rebates: Seq[com.fedex.ship.stub.Rebate] = Nil,
  Surcharges: Seq[com.fedex.ship.stub.Surcharge] = Nil,
  Taxes: Seq[com.fedex.ship.stub.Tax] = Nil,
  DutiesAndTaxes: Seq[com.fedex.ship.stub.EdtCommodityTax] = Nil,
  VariableHandlingCharges: Option[com.fedex.ship.stub.VariableHandlingCharges] = None,
  TotalVariableHandlingCharges: Option[com.fedex.ship.stub.VariableHandlingCharges] = None)
      


/** This class groups together all shipment-level rate data (across all rate types) as part of the response to a shipping request, which groups shipment-level data together and groups package-level data by package.
*/
case class ShipmentRating(ActualRateType: Option[com.fedex.ship.stub.ReturnedRateType] = None,
  EffectiveNetDiscount: Option[com.fedex.ship.stub.Money] = None,
  ShipmentRateDetails: Seq[com.fedex.ship.stub.ShipmentRateDetail] = Nil)
      


case class ShipmentReply(HighestSeverity: com.fedex.ship.stub.NotificationSeverityType,
  Notifications: Seq[com.fedex.ship.stub.Notification] = Nil,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId)
      

trait ShipmentSpecialServiceType

object ShipmentSpecialServiceType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ShipmentSpecialServiceType = value match {
    case "BROKER_SELECT_OPTION" => BROKER_SELECT_OPTIONValue
    case "CALL_BEFORE_DELIVERY" => CALL_BEFORE_DELIVERY
    case "COD" => CODValue2
    case "CUSTOM_DELIVERY_WINDOW" => CUSTOM_DELIVERY_WINDOW
    case "DANGEROUS_GOODS" => DANGEROUS_GOODSValue2
    case "DELIVERY_ON_INVOICE_ACCEPTANCE" => DELIVERY_ON_INVOICE_ACCEPTANCEValue
    case "DO_NOT_BREAK_DOWN_PALLETS" => DO_NOT_BREAK_DOWN_PALLETS
    case "DO_NOT_STACK_PALLETS" => DO_NOT_STACK_PALLETS
    case "DRY_ICE" => DRY_ICEValue2
    case "EAST_COAST_SPECIAL" => EAST_COAST_SPECIAL
    case "ELECTRONIC_TRADE_DOCUMENTS" => ELECTRONIC_TRADE_DOCUMENTS
    case "EMAIL_NOTIFICATION" => EMAIL_NOTIFICATION
    case "EXTREME_LENGTH" => EXTREME_LENGTHValue
    case "FEDEX_ONE_RATE" => FEDEX_ONE_RATE
    case "FOOD" => FOOD
    case "FREIGHT_GUARANTEE" => FREIGHT_GUARANTEEValue
    case "FREIGHT_TO_COLLECT" => FREIGHT_TO_COLLECTValue
    case "FUTURE_DAY_SHIPMENT" => FUTURE_DAY_SHIPMENT
    case "HOLD_AT_LOCATION" => HOLD_AT_LOCATIONValue
    case "HOME_DELIVERY_PREMIUM" => HOME_DELIVERY_PREMIUM
    case "INSIDE_DELIVERY" => INSIDE_DELIVERYValue
    case "INSIDE_PICKUP" => INSIDE_PICKUPValue
    case "INTERNATIONAL_CONTROLLED_EXPORT_SERVICE" => INTERNATIONAL_CONTROLLED_EXPORT_SERVICE
    case "INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS" => INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS
    case "LIFTGATE_DELIVERY" => LIFTGATE_DELIVERYValue
    case "LIFTGATE_PICKUP" => LIFTGATE_PICKUPValue
    case "LIMITED_ACCESS_DELIVERY" => LIMITED_ACCESS_DELIVERYValue
    case "LIMITED_ACCESS_PICKUP" => LIMITED_ACCESS_PICKUPValue
    case "PENDING_SHIPMENT" => PENDING_SHIPMENT
    case "PHARMACY_DELIVERY" => PHARMACY_DELIVERY
    case "POISON" => POISON
    case "PROTECTION_FROM_FREEZING" => PROTECTION_FROM_FREEZINGValue
    case "RETURNS_CLEARANCE" => RETURNS_CLEARANCE
    case "RETURN_SHIPMENT" => RETURN_SHIPMENT
    case "SATURDAY_DELIVERY" => SATURDAY_DELIVERYValue3
    case "SATURDAY_PICKUP" => SATURDAY_PICKUPValue2
    case "TOP_LOAD" => TOP_LOAD

  }
}

case object BROKER_SELECT_OPTIONValue extends ShipmentSpecialServiceType { override def toString = "BROKER_SELECT_OPTION" }
case object CALL_BEFORE_DELIVERY extends ShipmentSpecialServiceType { override def toString = "CALL_BEFORE_DELIVERY" }
case object CODValue2 extends ShipmentSpecialServiceType { override def toString = "COD" }
case object CUSTOM_DELIVERY_WINDOW extends ShipmentSpecialServiceType { override def toString = "CUSTOM_DELIVERY_WINDOW" }
case object DANGEROUS_GOODSValue2 extends ShipmentSpecialServiceType { override def toString = "DANGEROUS_GOODS" }
case object DELIVERY_ON_INVOICE_ACCEPTANCEValue extends ShipmentSpecialServiceType { override def toString = "DELIVERY_ON_INVOICE_ACCEPTANCE" }
case object DO_NOT_BREAK_DOWN_PALLETS extends ShipmentSpecialServiceType { override def toString = "DO_NOT_BREAK_DOWN_PALLETS" }
case object DO_NOT_STACK_PALLETS extends ShipmentSpecialServiceType { override def toString = "DO_NOT_STACK_PALLETS" }
case object DRY_ICEValue2 extends ShipmentSpecialServiceType { override def toString = "DRY_ICE" }
case object EAST_COAST_SPECIAL extends ShipmentSpecialServiceType { override def toString = "EAST_COAST_SPECIAL" }
case object ELECTRONIC_TRADE_DOCUMENTS extends ShipmentSpecialServiceType { override def toString = "ELECTRONIC_TRADE_DOCUMENTS" }
case object EMAIL_NOTIFICATION extends ShipmentSpecialServiceType { override def toString = "EMAIL_NOTIFICATION" }
case object EXTREME_LENGTHValue extends ShipmentSpecialServiceType { override def toString = "EXTREME_LENGTH" }
case object FEDEX_ONE_RATE extends ShipmentSpecialServiceType { override def toString = "FEDEX_ONE_RATE" }
case object FOOD extends ShipmentSpecialServiceType { override def toString = "FOOD" }
case object FREIGHT_GUARANTEEValue extends ShipmentSpecialServiceType { override def toString = "FREIGHT_GUARANTEE" }
case object FREIGHT_TO_COLLECTValue extends ShipmentSpecialServiceType { override def toString = "FREIGHT_TO_COLLECT" }
case object FUTURE_DAY_SHIPMENT extends ShipmentSpecialServiceType { override def toString = "FUTURE_DAY_SHIPMENT" }
case object HOLD_AT_LOCATIONValue extends ShipmentSpecialServiceType { override def toString = "HOLD_AT_LOCATION" }
case object HOME_DELIVERY_PREMIUM extends ShipmentSpecialServiceType { override def toString = "HOME_DELIVERY_PREMIUM" }
case object INSIDE_DELIVERYValue extends ShipmentSpecialServiceType { override def toString = "INSIDE_DELIVERY" }
case object INSIDE_PICKUPValue extends ShipmentSpecialServiceType { override def toString = "INSIDE_PICKUP" }
case object INTERNATIONAL_CONTROLLED_EXPORT_SERVICE extends ShipmentSpecialServiceType { override def toString = "INTERNATIONAL_CONTROLLED_EXPORT_SERVICE" }
case object INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS extends ShipmentSpecialServiceType { override def toString = "INTERNATIONAL_TRAFFIC_IN_ARMS_REGULATIONS" }
case object LIFTGATE_DELIVERYValue extends ShipmentSpecialServiceType { override def toString = "LIFTGATE_DELIVERY" }
case object LIFTGATE_PICKUPValue extends ShipmentSpecialServiceType { override def toString = "LIFTGATE_PICKUP" }
case object LIMITED_ACCESS_DELIVERYValue extends ShipmentSpecialServiceType { override def toString = "LIMITED_ACCESS_DELIVERY" }
case object LIMITED_ACCESS_PICKUPValue extends ShipmentSpecialServiceType { override def toString = "LIMITED_ACCESS_PICKUP" }
case object PENDING_SHIPMENT extends ShipmentSpecialServiceType { override def toString = "PENDING_SHIPMENT" }
case object PHARMACY_DELIVERY extends ShipmentSpecialServiceType { override def toString = "PHARMACY_DELIVERY" }
case object POISON extends ShipmentSpecialServiceType { override def toString = "POISON" }
case object PROTECTION_FROM_FREEZINGValue extends ShipmentSpecialServiceType { override def toString = "PROTECTION_FROM_FREEZING" }
case object RETURNS_CLEARANCE extends ShipmentSpecialServiceType { override def toString = "RETURNS_CLEARANCE" }
case object RETURN_SHIPMENT extends ShipmentSpecialServiceType { override def toString = "RETURN_SHIPMENT" }
case object SATURDAY_DELIVERYValue3 extends ShipmentSpecialServiceType { override def toString = "SATURDAY_DELIVERY" }
case object SATURDAY_PICKUPValue2 extends ShipmentSpecialServiceType { override def toString = "SATURDAY_PICKUP" }
case object TOP_LOAD extends ShipmentSpecialServiceType { override def toString = "TOP_LOAD" }


/** These special services are available at the shipment level for some or all service types. If the shipper is requesting a special service which requires additional data (such as the COD amount), the shipment special service type must be present in the specialServiceTypes collection, and the supporting detail must be provided in the appropriate sub-object below.
*/
case class ShipmentSpecialServicesRequested(SpecialServiceTypes: Seq[com.fedex.ship.stub.ShipmentSpecialServiceType] = Nil,
  CodDetail: Option[com.fedex.ship.stub.CodDetail] = None,
  DeliveryOnInvoiceAcceptanceDetail: Option[com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail] = None,
  HoldAtLocationDetail: Option[com.fedex.ship.stub.HoldAtLocationDetail] = None,
  EMailNotificationDetail: Option[com.fedex.ship.stub.EMailNotificationDetail] = None,
  ReturnShipmentDetail: Option[com.fedex.ship.stub.ReturnShipmentDetail] = None,
  PendingShipmentDetail: Option[com.fedex.ship.stub.PendingShipmentDetail] = None,
  InternationalControlledExportDetail: Option[com.fedex.ship.stub.InternationalControlledExportDetail] = None,
  InternationalTrafficInArmsRegulationsDetail: Option[com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail] = None,
  ShipmentDryIceDetail: Option[com.fedex.ship.stub.ShipmentDryIceDetail] = None,
  HomeDeliveryPremiumDetail: Option[com.fedex.ship.stub.HomeDeliveryPremiumDetail] = None,
  FreightGuaranteeDetail: Option[com.fedex.ship.stub.FreightGuaranteeDetail] = None,
  EtdDetail: Option[com.fedex.ship.stub.EtdDetail] = None,
  CustomDeliveryWindowDetail: Option[com.fedex.ship.stub.CustomDeliveryWindowDetail] = None)
      


/** All package-level shipping documents (other than labels and barcodes).
*/
case class ShippingDocument(Type: Option[com.fedex.ship.stub.ReturnedShippingDocumentType] = None,
  Localizations: Seq[com.fedex.ship.stub.Localization] = Nil,
  Grouping: Option[com.fedex.ship.stub.ShippingDocumentGroupingType] = None,
  ShippingDocumentDisposition: Option[com.fedex.ship.stub.ShippingDocumentDispositionType] = None,
  AccessReference: Option[String] = None,
  ImageType: Option[com.fedex.ship.stub.ShippingDocumentImageType] = None,
  Resolution: Option[BigInt] = None,
  CopiesToPrint: Option[BigInt] = None,
  Parts: Seq[com.fedex.ship.stub.ShippingDocumentPart] = Nil)
      


/** Each occurrence of this class specifies a particular way in which a kind of shipping document is to be produced and provided.
*/
case class ShippingDocumentDispositionDetail(DispositionType: Option[com.fedex.ship.stub.ShippingDocumentDispositionType] = None,
  Grouping: Option[com.fedex.ship.stub.ShippingDocumentGroupingType] = None,
  EMailDetail: Option[com.fedex.ship.stub.ShippingDocumentEMailDetail] = None,
  PrintDetail: Option[com.fedex.ship.stub.ShippingDocumentPrintDetail] = None)
      

trait ShippingDocumentDispositionType

object ShippingDocumentDispositionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ShippingDocumentDispositionType = value match {
    case "CONFIRMED" => CONFIRMED
    case "DEFERRED_RETURNED" => DEFERRED_RETURNED
    case "DEFERRED_STORED" => DEFERRED_STORED
    case "EMAILED" => EMAILED
    case "QUEUED" => QUEUED
    case "RETURNED" => RETURNED
    case "STORED" => STORED

  }
}

case object CONFIRMED extends ShippingDocumentDispositionType { override def toString = "CONFIRMED" }
case object DEFERRED_RETURNED extends ShippingDocumentDispositionType { override def toString = "DEFERRED_RETURNED" }
case object DEFERRED_STORED extends ShippingDocumentDispositionType { override def toString = "DEFERRED_STORED" }
case object EMAILED extends ShippingDocumentDispositionType { override def toString = "EMAILED" }
case object QUEUED extends ShippingDocumentDispositionType { override def toString = "QUEUED" }
case object RETURNED extends ShippingDocumentDispositionType { override def toString = "RETURNED" }
case object STORED extends ShippingDocumentDispositionType { override def toString = "STORED" }


/** Specifies how to e-mail shipping documents.
*/
case class ShippingDocumentEMailDetail(EMailRecipients: Seq[com.fedex.ship.stub.ShippingDocumentEMailRecipient] = Nil,
  Grouping: Option[com.fedex.ship.stub.ShippingDocumentEMailGroupingType] = None,
  Localization: Option[com.fedex.ship.stub.Localization] = None)
      

trait ShippingDocumentEMailGroupingType

object ShippingDocumentEMailGroupingType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ShippingDocumentEMailGroupingType = value match {
    case "BY_RECIPIENT" => BY_RECIPIENT
    case "NONE" => NONEValue6

  }
}

case object BY_RECIPIENT extends ShippingDocumentEMailGroupingType { override def toString = "BY_RECIPIENT" }
case object NONEValue6 extends ShippingDocumentEMailGroupingType { override def toString = "NONE" }


/** Specifies an individual recipient of e-mailed shipping document(s).
*/
case class ShippingDocumentEMailRecipient(RecipientType: Option[com.fedex.ship.stub.EMailNotificationRecipientType] = None,
  Address: Option[String] = None)
      


/** Specifies characteristics of a shipping document to be produced.
*/
case class ShippingDocumentFormat(Dispositions: Seq[com.fedex.ship.stub.ShippingDocumentDispositionDetail] = Nil,
  TopOfPageOffset: Option[com.fedex.ship.stub.LinearMeasure] = None,
  ImageType: Option[com.fedex.ship.stub.ShippingDocumentImageType] = None,
  StockType: Option[com.fedex.ship.stub.ShippingDocumentStockType] = None,
  ProvideInstructions: Option[Boolean] = None,
  OptionsRequested: Option[com.fedex.ship.stub.DocumentFormatOptionsRequested] = None,
  Localization: Option[com.fedex.ship.stub.Localization] = None,
  CustomDocumentIdentifier: Option[String] = None)
      

trait ShippingDocumentGroupingType

object ShippingDocumentGroupingType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ShippingDocumentGroupingType = value match {
    case "CONSOLIDATED_BY_DOCUMENT_TYPE" => CONSOLIDATED_BY_DOCUMENT_TYPE
    case "INDIVIDUAL" => INDIVIDUAL

  }
}

case object CONSOLIDATED_BY_DOCUMENT_TYPE extends ShippingDocumentGroupingType { override def toString = "CONSOLIDATED_BY_DOCUMENT_TYPE" }
case object INDIVIDUAL extends ShippingDocumentGroupingType { override def toString = "INDIVIDUAL" }

trait ShippingDocumentImageType

object ShippingDocumentImageType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ShippingDocumentImageType = value match {
    case "DOC" => DOC
    case "DPL" => DPL
    case "EPL2" => EPL2
    case "PDF" => PDF
    case "PNG" => PNG
    case "RTF" => RTF
    case "TEXT" => TEXTValue
    case "ZPLII" => ZPLII

  }
}

case object DOC extends ShippingDocumentImageType { override def toString = "DOC" }
case object DPL extends ShippingDocumentImageType { override def toString = "DPL" }
case object EPL2 extends ShippingDocumentImageType { override def toString = "EPL2" }
case object PDF extends ShippingDocumentImageType { override def toString = "PDF" }
case object PNG extends ShippingDocumentImageType { override def toString = "PNG" }
case object RTF extends ShippingDocumentImageType { override def toString = "RTF" }
case object TEXTValue extends ShippingDocumentImageType { override def toString = "TEXT" }
case object ZPLII extends ShippingDocumentImageType { override def toString = "ZPLII" }


/** A single part of a shipping document, such as one page of a multiple-page document whose format requires a separate image per page.
*/
case class ShippingDocumentPart(DocumentPartSequenceNumber: Option[BigInt] = None,
  Image: Option[scalaxb.Base64Binary] = None)
      


/** Specifies printing options for a shipping document.
*/
case class ShippingDocumentPrintDetail(PrinterId: Option[String] = None)
      


/** Contains all data required for additional (non-label) shipping documents to be produced in conjunction with a specific shipment.
*/
case class ShippingDocumentSpecification(ShippingDocumentTypes: Seq[com.fedex.ship.stub.RequestedShippingDocumentType] = Nil,
  CertificateOfOrigin: Option[com.fedex.ship.stub.CertificateOfOriginDetail] = None,
  CommercialInvoiceDetail: Option[com.fedex.ship.stub.CommercialInvoiceDetail] = None,
  CustomPackageDocumentDetail: Seq[com.fedex.ship.stub.CustomDocumentDetail] = Nil,
  CustomShipmentDocumentDetail: Seq[com.fedex.ship.stub.CustomDocumentDetail] = Nil,
  ExportDeclarationDetail: Option[com.fedex.ship.stub.ExportDeclarationDetail] = None,
  GeneralAgencyAgreementDetail: Option[com.fedex.ship.stub.GeneralAgencyAgreementDetail] = None,
  NaftaCertificateOfOriginDetail: Option[com.fedex.ship.stub.NaftaCertificateOfOriginDetail] = None,
  Op900Detail: Option[com.fedex.ship.stub.Op900Detail] = None,
  DangerousGoodsShippersDeclarationDetail: Option[com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail] = None,
  FreightAddressLabelDetail: Option[com.fedex.ship.stub.FreightAddressLabelDetail] = None,
  ReturnInstructionsDetail: Option[com.fedex.ship.stub.ReturnInstructionsDetail] = None)
      

trait ShippingDocumentStockType

object ShippingDocumentStockType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): ShippingDocumentStockType = value match {
    case "OP_900_LG_B" => OP_900_LG_B
    case "OP_900_LL_B" => OP_900_LL_B
    case "OP_950" => OP_950
    case "PAPER_4X6" => PAPER_4X6Value
    case "PAPER_4_PER_PAGE_PORTRAIT" => PAPER_4_PER_PAGE_PORTRAIT
    case "PAPER_LETTER" => PAPER_LETTERValue
    case "STOCK_4X6" => STOCK_4X6Value
    case "STOCK_4X6.75_LEADING_DOC_TAB" => STOCK_4X6u4675_LEADING_DOC_TABValue
    case "STOCK_4X6.75_TRAILING_DOC_TAB" => STOCK_4X6u4675_TRAILING_DOC_TABValue
    case "STOCK_4X8" => STOCK_4X8Value
    case "STOCK_4X9_LEADING_DOC_TAB" => STOCK_4X9_LEADING_DOC_TABValue
    case "STOCK_4X9_TRAILING_DOC_TAB" => STOCK_4X9_TRAILING_DOC_TABValue

  }
}

case object OP_900_LG_B extends ShippingDocumentStockType { override def toString = "OP_900_LG_B" }
case object OP_900_LL_B extends ShippingDocumentStockType { override def toString = "OP_900_LL_B" }
case object OP_950 extends ShippingDocumentStockType { override def toString = "OP_950" }
case object PAPER_4X6Value extends ShippingDocumentStockType { override def toString = "PAPER_4X6" }
case object PAPER_4_PER_PAGE_PORTRAIT extends ShippingDocumentStockType { override def toString = "PAPER_4_PER_PAGE_PORTRAIT" }
case object PAPER_LETTERValue extends ShippingDocumentStockType { override def toString = "PAPER_LETTER" }
case object STOCK_4X6Value extends ShippingDocumentStockType { override def toString = "STOCK_4X6" }
case object STOCK_4X6u4675_LEADING_DOC_TABValue extends ShippingDocumentStockType { override def toString = "STOCK_4X6.75_LEADING_DOC_TAB" }
case object STOCK_4X6u4675_TRAILING_DOC_TABValue extends ShippingDocumentStockType { override def toString = "STOCK_4X6.75_TRAILING_DOC_TAB" }
case object STOCK_4X8Value extends ShippingDocumentStockType { override def toString = "STOCK_4X8" }
case object STOCK_4X9_LEADING_DOC_TABValue extends ShippingDocumentStockType { override def toString = "STOCK_4X9_LEADING_DOC_TAB" }
case object STOCK_4X9_TRAILING_DOC_TABValue extends ShippingDocumentStockType { override def toString = "STOCK_4X9_TRAILING_DOC_TAB" }


/** The descriptive data required for FedEx delivery signature services.
*/
case class SignatureOptionDetail(OptionType: com.fedex.ship.stub.SignatureOptionType,
  SignatureReleaseNumber: Option[String] = None)
      

trait SignatureOptionType

object SignatureOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SignatureOptionType = value match {
    case "ADULT" => ADULT
    case "DIRECT" => DIRECT
    case "INDIRECT" => INDIRECT
    case "NO_SIGNATURE_REQUIRED" => NO_SIGNATURE_REQUIRED
    case "SERVICE_DEFAULT" => SERVICE_DEFAULT

  }
}

case object ADULT extends SignatureOptionType { override def toString = "ADULT" }
case object DIRECT extends SignatureOptionType { override def toString = "DIRECT" }
case object INDIRECT extends SignatureOptionType { override def toString = "INDIRECT" }
case object NO_SIGNATURE_REQUIRED extends SignatureOptionType { override def toString = "NO_SIGNATURE_REQUIRED" }
case object SERVICE_DEFAULT extends SignatureOptionType { override def toString = "SERVICE_DEFAULT" }

trait SmartPostAncillaryEndorsementType

object SmartPostAncillaryEndorsementType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SmartPostAncillaryEndorsementType = value match {
    case "ADDRESS_CORRECTION" => ADDRESS_CORRECTION
    case "CARRIER_LEAVE_IF_NO_RESPONSE" => CARRIER_LEAVE_IF_NO_RESPONSE
    case "CHANGE_SERVICE" => CHANGE_SERVICE
    case "FORWARDING_SERVICE" => FORWARDING_SERVICE
    case "RETURN_SERVICE" => RETURN_SERVICE

  }
}

case object ADDRESS_CORRECTION extends SmartPostAncillaryEndorsementType { override def toString = "ADDRESS_CORRECTION" }
case object CARRIER_LEAVE_IF_NO_RESPONSE extends SmartPostAncillaryEndorsementType { override def toString = "CARRIER_LEAVE_IF_NO_RESPONSE" }
case object CHANGE_SERVICE extends SmartPostAncillaryEndorsementType { override def toString = "CHANGE_SERVICE" }
case object FORWARDING_SERVICE extends SmartPostAncillaryEndorsementType { override def toString = "FORWARDING_SERVICE" }
case object RETURN_SERVICE extends SmartPostAncillaryEndorsementType { override def toString = "RETURN_SERVICE" }

trait SmartPostIndiciaType

object SmartPostIndiciaType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SmartPostIndiciaType = value match {
    case "MEDIA_MAIL" => MEDIA_MAIL
    case "PARCEL_RETURN" => PARCEL_RETURN
    case "PARCEL_SELECT" => PARCEL_SELECT
    case "PRESORTED_BOUND_PRINTED_MATTER" => PRESORTED_BOUND_PRINTED_MATTER
    case "PRESORTED_STANDARD" => PRESORTED_STANDARD

  }
}

case object MEDIA_MAIL extends SmartPostIndiciaType { override def toString = "MEDIA_MAIL" }
case object PARCEL_RETURN extends SmartPostIndiciaType { override def toString = "PARCEL_RETURN" }
case object PARCEL_SELECT extends SmartPostIndiciaType { override def toString = "PARCEL_SELECT" }
case object PRESORTED_BOUND_PRINTED_MATTER extends SmartPostIndiciaType { override def toString = "PRESORTED_BOUND_PRINTED_MATTER" }
case object PRESORTED_STANDARD extends SmartPostIndiciaType { override def toString = "PRESORTED_STANDARD" }


/** Data required for shipments handled under the SMART_POST and GROUND_SMART_POST service types.
*/
case class SmartPostShipmentDetail(ProcessingOptionsRequested: Option[com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested] = None,
  Indicia: Option[com.fedex.ship.stub.SmartPostIndiciaType] = None,
  AncillaryEndorsement: Option[com.fedex.ship.stub.SmartPostAncillaryEndorsementType] = None,
  HubId: Option[String] = None,
  CustomerManifestId: Option[String] = None)
      

trait SmartPostShipmentProcessingOptionType

object SmartPostShipmentProcessingOptionType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SmartPostShipmentProcessingOptionType = value match {
    case "GROUND_TRACKING_NUMBER_REQUESTED" => GROUND_TRACKING_NUMBER_REQUESTED

  }
}

case object GROUND_TRACKING_NUMBER_REQUESTED extends SmartPostShipmentProcessingOptionType { override def toString = "GROUND_TRACKING_NUMBER_REQUESTED" }


case class SmartPostShipmentProcessingOptionsRequested(Options: com.fedex.ship.stub.SmartPostShipmentProcessingOptionType*)
      

trait SpecialRatingAppliedType

object SpecialRatingAppliedType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SpecialRatingAppliedType = value match {
    case "FEDEX_ONE_RATE" => FEDEX_ONE_RATEValue
    case "FIXED_FUEL_SURCHARGE" => FIXED_FUEL_SURCHARGE
    case "IMPORT_PRICING" => IMPORT_PRICING

  }
}

case object FEDEX_ONE_RATEValue extends SpecialRatingAppliedType { override def toString = "FEDEX_ONE_RATE" }
case object FIXED_FUEL_SURCHARGE extends SpecialRatingAppliedType { override def toString = "FIXED_FUEL_SURCHARGE" }
case object IMPORT_PRICING extends SpecialRatingAppliedType { override def toString = "IMPORT_PRICING" }


/** Each instance of this data type represents a barcode whose content must be represented as ASCII text (i.e. not binary data).
*/
case class StringBarcode(Type: Option[com.fedex.ship.stub.StringBarcodeType] = None,
  Value: Option[String] = None)
      

trait StringBarcodeType

object StringBarcodeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): StringBarcodeType = value match {
    case "ADDRESS" => ADDRESSValue
    case "ASTRA" => ASTRA
    case "FEDEX_1D" => FEDEX_1D
    case "GROUND" => GROUND
    case "POSTAL" => POSTAL
    case "USPS" => USPSValue

  }
}

case object ADDRESSValue extends StringBarcodeType { override def toString = "ADDRESS" }
case object ASTRA extends StringBarcodeType { override def toString = "ASTRA" }
case object FEDEX_1D extends StringBarcodeType { override def toString = "FEDEX_1D" }
case object GROUND extends StringBarcodeType { override def toString = "GROUND" }
case object POSTAL extends StringBarcodeType { override def toString = "POSTAL" }
case object USPSValue extends StringBarcodeType { override def toString = "USPS" }


/** Identifies each surcharge applied to the shipment.
*/
case class Surcharge(SurchargeType: Option[com.fedex.ship.stub.SurchargeType] = None,
  Level: Option[com.fedex.ship.stub.SurchargeLevelType] = None,
  Description: Option[String] = None,
  Amount: com.fedex.ship.stub.Money)
      

trait SurchargeLevelType

object SurchargeLevelType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SurchargeLevelType = value match {
    case "PACKAGE" => PACKAGEValue
    case "SHIPMENT" => SHIPMENTValue

  }
}

case object PACKAGEValue extends SurchargeLevelType { override def toString = "PACKAGE" }
case object SHIPMENTValue extends SurchargeLevelType { override def toString = "SHIPMENT" }

trait SurchargeType

object SurchargeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SurchargeType = value match {
    case "ADDITIONAL_HANDLING" => ADDITIONAL_HANDLING
    case "ANCILLARY_FEE" => ANCILLARY_FEE
    case "APPOINTMENT_DELIVERY" => APPOINTMENT_DELIVERY
    case "BROKER_SELECT_OPTION" => BROKER_SELECT_OPTION
    case "CANADIAN_DESTINATION" => CANADIAN_DESTINATION
    case "CLEARANCE_ENTRY_FEE" => CLEARANCE_ENTRY_FEE
    case "COD" => COD
    case "CUT_FLOWERS" => CUT_FLOWERS
    case "DANGEROUS_GOODS" => DANGEROUS_GOODS
    case "DELIVERY_AREA" => DELIVERY_AREA
    case "DELIVERY_CONFIRMATION" => DELIVERY_CONFIRMATION
    case "DELIVERY_ON_INVOICE_ACCEPTANCE" => DELIVERY_ON_INVOICE_ACCEPTANCE
    case "DOCUMENTATION_FEE" => DOCUMENTATION_FEE
    case "DRY_ICE" => DRY_ICE
    case "EMAIL_LABEL" => EMAIL_LABEL
    case "EUROPE_FIRST" => EUROPE_FIRST
    case "EXCESS_VALUE" => EXCESS_VALUE
    case "EXHIBITION" => EXHIBITION
    case "EXPORT" => EXPORTValue
    case "EXTRA_SURFACE_HANDLING_CHARGE" => EXTRA_SURFACE_HANDLING_CHARGE
    case "EXTREME_LENGTH" => EXTREME_LENGTH
    case "FEDEX_INTRACOUNTRY_FEES" => FEDEX_INTRACOUNTRY_FEES
    case "FEDEX_TAG" => FEDEX_TAG
    case "FICE" => FICE
    case "FLATBED" => FLATBED
    case "FREIGHT_GUARANTEE" => FREIGHT_GUARANTEE
    case "FREIGHT_ON_VALUE" => FREIGHT_ON_VALUE
    case "FREIGHT_TO_COLLECT" => FREIGHT_TO_COLLECT
    case "FUEL" => FUEL
    case "HOLD_AT_LOCATION" => HOLD_AT_LOCATION
    case "HOME_DELIVERY_APPOINTMENT" => HOME_DELIVERY_APPOINTMENT
    case "HOME_DELIVERY_DATE_CERTAIN" => HOME_DELIVERY_DATE_CERTAIN
    case "HOME_DELIVERY_EVENING" => HOME_DELIVERY_EVENING
    case "INSIDE_DELIVERY" => INSIDE_DELIVERY
    case "INSIDE_PICKUP" => INSIDE_PICKUP
    case "INSURED_VALUE" => INSURED_VALUE
    case "INTERHAWAII" => INTERHAWAII
    case "LIFTGATE_DELIVERY" => LIFTGATE_DELIVERY
    case "LIFTGATE_PICKUP" => LIFTGATE_PICKUP
    case "LIMITED_ACCESS_DELIVERY" => LIMITED_ACCESS_DELIVERY
    case "LIMITED_ACCESS_PICKUP" => LIMITED_ACCESS_PICKUP
    case "METRO_DELIVERY" => METRO_DELIVERY
    case "METRO_PICKUP" => METRO_PICKUP
    case "NON_MACHINABLE" => NON_MACHINABLE
    case "OFFSHORE" => OFFSHORE
    case "ON_CALL_PICKUP" => ON_CALL_PICKUP
    case "OTHER" => OTHERValue
    case "OUT_OF_DELIVERY_AREA" => OUT_OF_DELIVERY_AREA
    case "OUT_OF_PICKUP_AREA" => OUT_OF_PICKUP_AREA
    case "OVERSIZE" => OVERSIZE
    case "OVER_DIMENSION" => OVER_DIMENSION
    case "PIECE_COUNT_VERIFICATION" => PIECE_COUNT_VERIFICATION
    case "PRE_DELIVERY_NOTIFICATION" => PRE_DELIVERY_NOTIFICATION
    case "PRIORITY_ALERT" => PRIORITY_ALERT
    case "PROTECTION_FROM_FREEZING" => PROTECTION_FROM_FREEZING
    case "REGIONAL_MALL_DELIVERY" => REGIONAL_MALL_DELIVERY
    case "REGIONAL_MALL_PICKUP" => REGIONAL_MALL_PICKUP
    case "REROUTE" => REROUTE
    case "RESCHEDULE" => RESCHEDULE
    case "RESIDENTIAL_DELIVERY" => RESIDENTIAL_DELIVERY
    case "RESIDENTIAL_PICKUP" => RESIDENTIAL_PICKUP
    case "RETURN_LABEL" => RETURN_LABEL
    case "SATURDAY_DELIVERY" => SATURDAY_DELIVERY
    case "SATURDAY_PICKUP" => SATURDAY_PICKUP
    case "SIGNATURE_OPTION" => SIGNATURE_OPTION
    case "TARP" => TARP
    case "THIRD_PARTY_CONSIGNEE" => THIRD_PARTY_CONSIGNEE
    case "TRANSMART_SERVICE_FEE" => TRANSMART_SERVICE_FEE

  }
}

case object ADDITIONAL_HANDLING extends SurchargeType { override def toString = "ADDITIONAL_HANDLING" }
case object ANCILLARY_FEE extends SurchargeType { override def toString = "ANCILLARY_FEE" }
case object APPOINTMENT_DELIVERY extends SurchargeType { override def toString = "APPOINTMENT_DELIVERY" }
case object BROKER_SELECT_OPTION extends SurchargeType { override def toString = "BROKER_SELECT_OPTION" }
case object CANADIAN_DESTINATION extends SurchargeType { override def toString = "CANADIAN_DESTINATION" }
case object CLEARANCE_ENTRY_FEE extends SurchargeType { override def toString = "CLEARANCE_ENTRY_FEE" }
case object COD extends SurchargeType { override def toString = "COD" }
case object CUT_FLOWERS extends SurchargeType { override def toString = "CUT_FLOWERS" }
case object DANGEROUS_GOODS extends SurchargeType { override def toString = "DANGEROUS_GOODS" }
case object DELIVERY_AREA extends SurchargeType { override def toString = "DELIVERY_AREA" }
case object DELIVERY_CONFIRMATION extends SurchargeType { override def toString = "DELIVERY_CONFIRMATION" }
case object DELIVERY_ON_INVOICE_ACCEPTANCE extends SurchargeType { override def toString = "DELIVERY_ON_INVOICE_ACCEPTANCE" }
case object DOCUMENTATION_FEE extends SurchargeType { override def toString = "DOCUMENTATION_FEE" }
case object DRY_ICE extends SurchargeType { override def toString = "DRY_ICE" }
case object EMAIL_LABEL extends SurchargeType { override def toString = "EMAIL_LABEL" }
case object EUROPE_FIRST extends SurchargeType { override def toString = "EUROPE_FIRST" }
case object EXCESS_VALUE extends SurchargeType { override def toString = "EXCESS_VALUE" }
case object EXHIBITION extends SurchargeType { override def toString = "EXHIBITION" }
case object EXPORTValue extends SurchargeType { override def toString = "EXPORT" }
case object EXTRA_SURFACE_HANDLING_CHARGE extends SurchargeType { override def toString = "EXTRA_SURFACE_HANDLING_CHARGE" }
case object EXTREME_LENGTH extends SurchargeType { override def toString = "EXTREME_LENGTH" }
case object FEDEX_INTRACOUNTRY_FEES extends SurchargeType { override def toString = "FEDEX_INTRACOUNTRY_FEES" }
case object FEDEX_TAG extends SurchargeType { override def toString = "FEDEX_TAG" }
case object FICE extends SurchargeType { override def toString = "FICE" }
case object FLATBED extends SurchargeType { override def toString = "FLATBED" }
case object FREIGHT_GUARANTEE extends SurchargeType { override def toString = "FREIGHT_GUARANTEE" }
case object FREIGHT_ON_VALUE extends SurchargeType { override def toString = "FREIGHT_ON_VALUE" }
case object FREIGHT_TO_COLLECT extends SurchargeType { override def toString = "FREIGHT_TO_COLLECT" }
case object FUEL extends SurchargeType { override def toString = "FUEL" }
case object HOLD_AT_LOCATION extends SurchargeType { override def toString = "HOLD_AT_LOCATION" }
case object HOME_DELIVERY_APPOINTMENT extends SurchargeType { override def toString = "HOME_DELIVERY_APPOINTMENT" }
case object HOME_DELIVERY_DATE_CERTAIN extends SurchargeType { override def toString = "HOME_DELIVERY_DATE_CERTAIN" }
case object HOME_DELIVERY_EVENING extends SurchargeType { override def toString = "HOME_DELIVERY_EVENING" }
case object INSIDE_DELIVERY extends SurchargeType { override def toString = "INSIDE_DELIVERY" }
case object INSIDE_PICKUP extends SurchargeType { override def toString = "INSIDE_PICKUP" }
case object INSURED_VALUE extends SurchargeType { override def toString = "INSURED_VALUE" }
case object INTERHAWAII extends SurchargeType { override def toString = "INTERHAWAII" }
case object LIFTGATE_DELIVERY extends SurchargeType { override def toString = "LIFTGATE_DELIVERY" }
case object LIFTGATE_PICKUP extends SurchargeType { override def toString = "LIFTGATE_PICKUP" }
case object LIMITED_ACCESS_DELIVERY extends SurchargeType { override def toString = "LIMITED_ACCESS_DELIVERY" }
case object LIMITED_ACCESS_PICKUP extends SurchargeType { override def toString = "LIMITED_ACCESS_PICKUP" }
case object METRO_DELIVERY extends SurchargeType { override def toString = "METRO_DELIVERY" }
case object METRO_PICKUP extends SurchargeType { override def toString = "METRO_PICKUP" }
case object NON_MACHINABLE extends SurchargeType { override def toString = "NON_MACHINABLE" }
case object OFFSHORE extends SurchargeType { override def toString = "OFFSHORE" }
case object ON_CALL_PICKUP extends SurchargeType { override def toString = "ON_CALL_PICKUP" }
case object OTHERValue extends SurchargeType { override def toString = "OTHER" }
case object OUT_OF_DELIVERY_AREA extends SurchargeType { override def toString = "OUT_OF_DELIVERY_AREA" }
case object OUT_OF_PICKUP_AREA extends SurchargeType { override def toString = "OUT_OF_PICKUP_AREA" }
case object OVERSIZE extends SurchargeType { override def toString = "OVERSIZE" }
case object OVER_DIMENSION extends SurchargeType { override def toString = "OVER_DIMENSION" }
case object PIECE_COUNT_VERIFICATION extends SurchargeType { override def toString = "PIECE_COUNT_VERIFICATION" }
case object PRE_DELIVERY_NOTIFICATION extends SurchargeType { override def toString = "PRE_DELIVERY_NOTIFICATION" }
case object PRIORITY_ALERT extends SurchargeType { override def toString = "PRIORITY_ALERT" }
case object PROTECTION_FROM_FREEZING extends SurchargeType { override def toString = "PROTECTION_FROM_FREEZING" }
case object REGIONAL_MALL_DELIVERY extends SurchargeType { override def toString = "REGIONAL_MALL_DELIVERY" }
case object REGIONAL_MALL_PICKUP extends SurchargeType { override def toString = "REGIONAL_MALL_PICKUP" }
case object REROUTE extends SurchargeType { override def toString = "REROUTE" }
case object RESCHEDULE extends SurchargeType { override def toString = "RESCHEDULE" }
case object RESIDENTIAL_DELIVERY extends SurchargeType { override def toString = "RESIDENTIAL_DELIVERY" }
case object RESIDENTIAL_PICKUP extends SurchargeType { override def toString = "RESIDENTIAL_PICKUP" }
case object RETURN_LABEL extends SurchargeType { override def toString = "RETURN_LABEL" }
case object SATURDAY_DELIVERY extends SurchargeType { override def toString = "SATURDAY_DELIVERY" }
case object SATURDAY_PICKUP extends SurchargeType { override def toString = "SATURDAY_PICKUP" }
case object SIGNATURE_OPTION extends SurchargeType { override def toString = "SIGNATURE_OPTION" }
case object TARP extends SurchargeType { override def toString = "TARP" }
case object THIRD_PARTY_CONSIGNEE extends SurchargeType { override def toString = "THIRD_PARTY_CONSIGNEE" }
case object TRANSMART_SERVICE_FEE extends SurchargeType { override def toString = "TRANSMART_SERVICE_FEE" }


/** Identifies each tax applied to the shipment.
*/
case class Tax(TaxType: Option[com.fedex.ship.stub.TaxType] = None,
  Description: Option[String] = None,
  Amount: Option[com.fedex.ship.stub.Money] = None)
      

trait TaxType

object TaxType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TaxType = value match {
    case "EXPORT" => EXPORT
    case "GST" => GST
    case "HST" => HST
    case "INTRACOUNTRY" => INTRACOUNTRY
    case "OTHER" => OTHER
    case "PST" => PST
    case "VAT" => VAT

  }
}

case object EXPORT extends TaxType { override def toString = "EXPORT" }
case object GST extends TaxType { override def toString = "GST" }
case object HST extends TaxType { override def toString = "HST" }
case object INTRACOUNTRY extends TaxType { override def toString = "INTRACOUNTRY" }
case object OTHER extends TaxType { override def toString = "OTHER" }
case object PST extends TaxType { override def toString = "PST" }
case object VAT extends TaxType { override def toString = "VAT" }

trait TaxesOrMiscellaneousChargeType

object TaxesOrMiscellaneousChargeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TaxesOrMiscellaneousChargeType = value match {
    case "COMMISSIONS" => COMMISSIONS
    case "DISCOUNTS" => DISCOUNTS
    case "HANDLING_FEES" => HANDLING_FEES
    case "OTHER" => OTHERValue9
    case "ROYALTIES_AND_LICENSE_FEES" => ROYALTIES_AND_LICENSE_FEES
    case "TAXES" => TAXES

  }
}

case object COMMISSIONS extends TaxesOrMiscellaneousChargeType { override def toString = "COMMISSIONS" }
case object DISCOUNTS extends TaxesOrMiscellaneousChargeType { override def toString = "DISCOUNTS" }
case object HANDLING_FEES extends TaxesOrMiscellaneousChargeType { override def toString = "HANDLING_FEES" }
case object OTHERValue9 extends TaxesOrMiscellaneousChargeType { override def toString = "OTHER" }
case object ROYALTIES_AND_LICENSE_FEES extends TaxesOrMiscellaneousChargeType { override def toString = "ROYALTIES_AND_LICENSE_FEES" }
case object TAXES extends TaxesOrMiscellaneousChargeType { override def toString = "TAXES" }


/** The descriptive data for taxpayer identification information.
*/
case class TaxpayerIdentification(TinType: com.fedex.ship.stub.TinType,
  Number: String,
  Usage: Option[String] = None,
  EffectiveDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  ExpirationDate: Option[javax.xml.datatype.XMLGregorianCalendar] = None)
      

trait TinType

object TinType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TinType = value match {
    case "BUSINESS_NATIONAL" => BUSINESS_NATIONAL
    case "BUSINESS_STATE" => BUSINESS_STATE
    case "BUSINESS_UNION" => BUSINESS_UNION
    case "PERSONAL_NATIONAL" => PERSONAL_NATIONAL
    case "PERSONAL_STATE" => PERSONAL_STATE

  }
}

case object BUSINESS_NATIONAL extends TinType { override def toString = "BUSINESS_NATIONAL" }
case object BUSINESS_STATE extends TinType { override def toString = "BUSINESS_STATE" }
case object BUSINESS_UNION extends TinType { override def toString = "BUSINESS_UNION" }
case object PERSONAL_NATIONAL extends TinType { override def toString = "PERSONAL_NATIONAL" }
case object PERSONAL_STATE extends TinType { override def toString = "PERSONAL_STATE" }


case class TrackingId(TrackingIdType: Option[com.fedex.ship.stub.TrackingIdType] = None,
  FormId: Option[String] = None,
  UspsApplicationId: Option[String] = None,
  TrackingNumber: Option[String] = None)
      

trait TrackingIdType

object TrackingIdType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TrackingIdType = value match {
    case "EXPRESS" => EXPRESS
    case "FEDEX" => FEDEX
    case "FREIGHT" => FREIGHT
    case "GROUND" => GROUNDValue
    case "USPS" => USPSValue2

  }
}

case object EXPRESS extends TrackingIdType { override def toString = "EXPRESS" }
case object FEDEX extends TrackingIdType { override def toString = "FEDEX" }
case object FREIGHT extends TrackingIdType { override def toString = "FREIGHT" }
case object GROUNDValue extends TrackingIdType { override def toString = "GROUND" }
case object USPSValue2 extends TrackingIdType { override def toString = "USPS" }


/** Descriptive data for this customer transaction. The TransactionDetail from the request is echoed back to the caller in the corresponding reply.
*/
case class TransactionDetail(CustomerTransactionId: Option[String] = None,
  Localization: Option[com.fedex.ship.stub.Localization] = None)
      

trait TransitTimeType

object TransitTimeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TransitTimeType = value match {
    case "EIGHTEEN_DAYS" => EIGHTEEN_DAYS
    case "EIGHT_DAYS" => EIGHT_DAYS
    case "ELEVEN_DAYS" => ELEVEN_DAYS
    case "FIFTEEN_DAYS" => FIFTEEN_DAYS
    case "FIVE_DAYS" => FIVE_DAYS
    case "FOURTEEN_DAYS" => FOURTEEN_DAYS
    case "FOUR_DAYS" => FOUR_DAYS
    case "NINETEEN_DAYS" => NINETEEN_DAYS
    case "NINE_DAYS" => NINE_DAYS
    case "ONE_DAY" => ONE_DAY
    case "SEVENTEEN_DAYS" => SEVENTEEN_DAYS
    case "SEVEN_DAYS" => SEVEN_DAYS
    case "SIXTEEN_DAYS" => SIXTEEN_DAYS
    case "SIX_DAYS" => SIX_DAYS
    case "TEN_DAYS" => TEN_DAYS
    case "THIRTEEN_DAYS" => THIRTEEN_DAYS
    case "THREE_DAYS" => THREE_DAYS
    case "TWELVE_DAYS" => TWELVE_DAYS
    case "TWENTY_DAYS" => TWENTY_DAYS
    case "TWO_DAYS" => TWO_DAYS
    case "UNKNOWN" => UNKNOWNValue2

  }
}

case object EIGHTEEN_DAYS extends TransitTimeType { override def toString = "EIGHTEEN_DAYS" }
case object EIGHT_DAYS extends TransitTimeType { override def toString = "EIGHT_DAYS" }
case object ELEVEN_DAYS extends TransitTimeType { override def toString = "ELEVEN_DAYS" }
case object FIFTEEN_DAYS extends TransitTimeType { override def toString = "FIFTEEN_DAYS" }
case object FIVE_DAYS extends TransitTimeType { override def toString = "FIVE_DAYS" }
case object FOURTEEN_DAYS extends TransitTimeType { override def toString = "FOURTEEN_DAYS" }
case object FOUR_DAYS extends TransitTimeType { override def toString = "FOUR_DAYS" }
case object NINETEEN_DAYS extends TransitTimeType { override def toString = "NINETEEN_DAYS" }
case object NINE_DAYS extends TransitTimeType { override def toString = "NINE_DAYS" }
case object ONE_DAY extends TransitTimeType { override def toString = "ONE_DAY" }
case object SEVENTEEN_DAYS extends TransitTimeType { override def toString = "SEVENTEEN_DAYS" }
case object SEVEN_DAYS extends TransitTimeType { override def toString = "SEVEN_DAYS" }
case object SIXTEEN_DAYS extends TransitTimeType { override def toString = "SIXTEEN_DAYS" }
case object SIX_DAYS extends TransitTimeType { override def toString = "SIX_DAYS" }
case object TEN_DAYS extends TransitTimeType { override def toString = "TEN_DAYS" }
case object THIRTEEN_DAYS extends TransitTimeType { override def toString = "THIRTEEN_DAYS" }
case object THREE_DAYS extends TransitTimeType { override def toString = "THREE_DAYS" }
case object TWELVE_DAYS extends TransitTimeType { override def toString = "TWELVE_DAYS" }
case object TWENTY_DAYS extends TransitTimeType { override def toString = "TWENTY_DAYS" }
case object TWO_DAYS extends TransitTimeType { override def toString = "TWO_DAYS" }
case object UNKNOWNValue2 extends TransitTimeType { override def toString = "UNKNOWN" }

trait UploadDocumentIdProducer

object UploadDocumentIdProducer {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): UploadDocumentIdProducer = value match {
    case "CUSTOMER" => CUSTOMER
    case "FEDEX_CAFE" => FEDEX_CAFE
    case "FEDEX_CSHP" => FEDEX_CSHP
    case "FEDEX_FXRS" => FEDEX_FXRS
    case "FEDEX_GSMW" => FEDEX_GSMW
    case "FEDEX_GTM" => FEDEX_GTM
    case "FEDEX_INET" => FEDEX_INET

  }
}

case object CUSTOMER extends UploadDocumentIdProducer { override def toString = "CUSTOMER" }
case object FEDEX_CAFE extends UploadDocumentIdProducer { override def toString = "FEDEX_CAFE" }
case object FEDEX_CSHP extends UploadDocumentIdProducer { override def toString = "FEDEX_CSHP" }
case object FEDEX_FXRS extends UploadDocumentIdProducer { override def toString = "FEDEX_FXRS" }
case object FEDEX_GSMW extends UploadDocumentIdProducer { override def toString = "FEDEX_GSMW" }
case object FEDEX_GTM extends UploadDocumentIdProducer { override def toString = "FEDEX_GTM" }
case object FEDEX_INET extends UploadDocumentIdProducer { override def toString = "FEDEX_INET" }

trait UploadDocumentProducerType

object UploadDocumentProducerType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): UploadDocumentProducerType = value match {
    case "CUSTOMER" => CUSTOMERValue3
    case "FEDEX_CLS" => FEDEX_CLS
    case "FEDEX_GSMW" => FEDEX_GSMWValue
    case "FEDEX_GTM" => FEDEX_GTMValue
    case "OTHER" => OTHERValue10

  }
}

case object CUSTOMERValue3 extends UploadDocumentProducerType { override def toString = "CUSTOMER" }
case object FEDEX_CLS extends UploadDocumentProducerType { override def toString = "FEDEX_CLS" }
case object FEDEX_GSMWValue extends UploadDocumentProducerType { override def toString = "FEDEX_GSMW" }
case object FEDEX_GTMValue extends UploadDocumentProducerType { override def toString = "FEDEX_GTM" }
case object OTHERValue10 extends UploadDocumentProducerType { override def toString = "OTHER" }


case class UploadDocumentReferenceDetail(LineNumber: Option[BigInt] = None,
  CustomerReference: Option[String] = None,
  Description: Option[String] = None,
  DocumentProducer: Option[com.fedex.ship.stub.UploadDocumentProducerType] = None,
  DocumentType: Option[com.fedex.ship.stub.UploadDocumentType] = None,
  DocumentId: Option[String] = None,
  DocumentIdProducer: Option[com.fedex.ship.stub.UploadDocumentIdProducer] = None)
      

trait UploadDocumentType

object UploadDocumentType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): UploadDocumentType = value match {
    case "CERTIFICATE_OF_ORIGIN" => CERTIFICATE_OF_ORIGINValue2
    case "COMMERCIAL_INVOICE" => COMMERCIAL_INVOICEValue2
    case "ETD_LABEL" => ETD_LABELValue
    case "NAFTA_CERTIFICATE_OF_ORIGIN" => NAFTA_CERTIFICATE_OF_ORIGINValue2
    case "OTHER" => OTHERValue11
    case "PRO_FORMA_INVOICE" => PRO_FORMA_INVOICEValue2

  }
}

case object CERTIFICATE_OF_ORIGINValue2 extends UploadDocumentType { override def toString = "CERTIFICATE_OF_ORIGIN" }
case object COMMERCIAL_INVOICEValue2 extends UploadDocumentType { override def toString = "COMMERCIAL_INVOICE" }
case object ETD_LABELValue extends UploadDocumentType { override def toString = "ETD_LABEL" }
case object NAFTA_CERTIFICATE_OF_ORIGINValue2 extends UploadDocumentType { override def toString = "NAFTA_CERTIFICATE_OF_ORIGIN" }
case object OTHERValue11 extends UploadDocumentType { override def toString = "OTHER" }
case object PRO_FORMA_INVOICEValue2 extends UploadDocumentType { override def toString = "PRO_FORMA_INVOICE" }


/** Descriptive data sent to FedEx by a customer in order to validate a shipment.
*/
case class ValidateShipmentRequest(WebAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail,
  ClientDetail: com.fedex.ship.stub.ClientDetail,
  TransactionDetail: Option[com.fedex.ship.stub.TransactionDetail] = None,
  Version: com.fedex.ship.stub.VersionId,
  RequestedShipment: com.fedex.ship.stub.RequestedShipment)
      


/** Documents the kind and quantity of an individual hazardous commodity in a package.
*/
case class ValidatedHazardousCommodityContent(Description: Option[com.fedex.ship.stub.ValidatedHazardousCommodityDescription] = None,
  Quantity: Option[com.fedex.ship.stub.HazardousCommodityQuantityDetail] = None,
  MassPoints: Option[BigDecimal] = None,
  Options: Option[com.fedex.ship.stub.HazardousCommodityOptionDetail] = None,
  NetExplosiveDetail: Option[com.fedex.ship.stub.NetExplosiveDetail] = None)
      


/** Identifies and describes an individual hazardous commodity. For 201001 load, this is based on data from the FedEx Ground Hazardous Materials Shipping Guide.
*/
case class ValidatedHazardousCommodityDescription(Id: Option[String] = None,
  SequenceNumber: Option[BigInt] = None,
  PackingGroup: Option[com.fedex.ship.stub.HazardousCommodityPackingGroupType] = None,
  PackingInstructions: Option[String] = None,
  ProperShippingName: Option[String] = None,
  ProperShippingNameAndDescription: Option[String] = None,
  TechnicalName: Option[String] = None,
  HazardClass: Option[String] = None,
  SubsidiaryClasses: Seq[String] = Nil,
  Symbols: Option[String] = None,
  TunnelRestrictionCode: Option[String] = None,
  SpecialProvisions: Option[String] = None,
  AttributesValue: Seq[com.fedex.ship.stub.HazardousCommodityAttributeType] = Nil,
  Authorization: Option[String] = None,
  LabelText: Option[String] = None)
      


/** Specifies the concept of a container used to package dangerous goods commodities.
*/
case class ValidatedHazardousContainer(QValue: Option[BigDecimal] = None,
  HazardousCommodities: Seq[com.fedex.ship.stub.ValidatedHazardousCommodityContent] = Nil)
      


/** This definition of variable handling charge detail is intended for use in Jan 2011 corp load.
*/
case class VariableHandlingChargeDetail(FixedValue: Option[com.fedex.ship.stub.Money] = None,
  PercentValue: Option[BigDecimal] = None,
  RateElementBasis: Option[com.fedex.ship.stub.RateElementBasisType] = None,
  RateTypeBasis: Option[com.fedex.ship.stub.RateTypeBasisType] = None)
      


/** The variable handling charges calculated based on the type variable handling charges requested.
*/
case class VariableHandlingCharges(VariableHandlingCharge: Option[com.fedex.ship.stub.Money] = None,
  FixedVariableHandlingCharge: Option[com.fedex.ship.stub.Money] = None,
  PercentVariableHandlingCharge: Option[com.fedex.ship.stub.Money] = None,
  TotalCustomerCharge: Option[com.fedex.ship.stub.Money] = None)
      


/** Three-dimensional volume/cubic measurement.
*/
case class Volume(Units: Option[com.fedex.ship.stub.VolumeUnits] = None,
  Value: Option[BigDecimal] = None)
      

trait VolumeUnits

object VolumeUnits {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): VolumeUnits = value match {
    case "CUBIC_FT" => CUBIC_FT
    case "CUBIC_M" => CUBIC_M

  }
}

case object CUBIC_FT extends VolumeUnits { override def toString = "CUBIC_FT" }
case object CUBIC_M extends VolumeUnits { override def toString = "CUBIC_M" }


/** The descriptive data for the heaviness of an object.
*/
case class Weight(Units: com.fedex.ship.stub.WeightUnits,
  Value: BigDecimal)
      

trait WeightUnits

object WeightUnits {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): WeightUnits = value match {
    case "KG" => KG
    case "LB" => LB

  }
}

case object KG extends WeightUnits { override def toString = "KG" }
case object LB extends WeightUnits { override def toString = "LB" }


/** Used in authentication of the sender's identity.
*/
case class WebAuthenticationDetail(ParentCredential: Option[com.fedex.ship.stub.WebAuthenticationCredential] = None,
  UserCredential: com.fedex.ship.stub.WebAuthenticationCredential)
      


/** Two part authentication string used for the sender's identity
*/
case class WebAuthenticationCredential(Key: String,
  Password: String)
      


/** Identifies the version/level of a service operation expected by a caller (in each request) and performed by the callee (in each reply).
*/
case class VersionId(ServiceId: String,
  Major: Int,
  Intermediate: Int,
  Minor: Int)
      

