// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.fedex.ship.stub

import scala.concurrent.Future

trait ShipServiceSoapBindings { this: scalaxb.Soap11ClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    lazy val service: com.fedex.ship.stub.ShipPortType = new ShipServiceSoapBinding {}
    def baseAddress = new java.net.URI("https://wsbeta.fedex.com:443/web-services/ship")

    trait ShipServiceSoapBinding extends com.fedex.ship.stub.ShipPortType {
      import scalaxb.ElemName._
      def processTag(webAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail, clientDetail: com.fedex.ship.stub.ClientDetail, transactionDetail: Option[com.fedex.ship.stub.TransactionDetail], version: com.fedex.ship.stub.VersionId, requestedShipment: com.fedex.ship.stub.RequestedShipment): Future[com.fedex.ship.stub.ProcessTagReply] = 
        soapClient.requestResponse(scalaxb.toXML(com.fedex.ship.stub.ProcessTagRequest(webAuthenticationDetail, clientDetail, transactionDetail, version, requestedShipment), Some("http://fedex.com/ws/ship/v17"), "ProcessTagRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://fedex.com/ws/ship/v17/processTag"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.fedex.ship.stub.ProcessTagReply](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ProcessTagReply").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def processShipment(webAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail, clientDetail: com.fedex.ship.stub.ClientDetail, transactionDetail: Option[com.fedex.ship.stub.TransactionDetail], version: com.fedex.ship.stub.VersionId, requestedShipment: com.fedex.ship.stub.RequestedShipment): Future[com.fedex.ship.stub.ProcessShipmentReply] = 
        soapClient.requestResponse(scalaxb.toXML(com.fedex.ship.stub.ProcessShipmentRequest(webAuthenticationDetail, clientDetail, transactionDetail, version, requestedShipment), Some("http://fedex.com/ws/ship/v17"), "ProcessShipmentRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://fedex.com/ws/ship/v17/processShipment"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.fedex.ship.stub.ProcessShipmentReply](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ProcessShipmentReply").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def deleteTag(webAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail, clientDetail: com.fedex.ship.stub.ClientDetail, transactionDetail: Option[com.fedex.ship.stub.TransactionDetail], version: com.fedex.ship.stub.VersionId, dispatchLocationId: Option[String], dispatchDate: Option[javax.xml.datatype.XMLGregorianCalendar], payment: com.fedex.ship.stub.Payment, confirmationNumber: String): Future[com.fedex.ship.stub.ShipmentReply] = 
        soapClient.requestResponse(scalaxb.toXML(com.fedex.ship.stub.DeleteTagRequest(webAuthenticationDetail, clientDetail, transactionDetail, version, dispatchLocationId, dispatchDate, payment, confirmationNumber), Some("http://fedex.com/ws/ship/v17"), "DeleteTagRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://fedex.com/ws/ship/v17/deleteTag"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.fedex.ship.stub.ShipmentReply](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ShipmentReply").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def deleteShipment(webAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail, clientDetail: com.fedex.ship.stub.ClientDetail, transactionDetail: Option[com.fedex.ship.stub.TransactionDetail], version: com.fedex.ship.stub.VersionId, shipTimestamp: Option[javax.xml.datatype.XMLGregorianCalendar], trackingId: Option[com.fedex.ship.stub.TrackingId], deletionControl: com.fedex.ship.stub.DeletionControlType): Future[com.fedex.ship.stub.ShipmentReply] = 
        soapClient.requestResponse(scalaxb.toXML(com.fedex.ship.stub.DeleteShipmentRequest(webAuthenticationDetail, clientDetail, transactionDetail, version, shipTimestamp, trackingId, deletionControl), Some("http://fedex.com/ws/ship/v17"), "DeleteShipmentRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://fedex.com/ws/ship/v17/deleteShipment"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.fedex.ship.stub.ShipmentReply](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ShipmentReply").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def validateShipment(webAuthenticationDetail: com.fedex.ship.stub.WebAuthenticationDetail, clientDetail: com.fedex.ship.stub.ClientDetail, transactionDetail: Option[com.fedex.ship.stub.TransactionDetail], version: com.fedex.ship.stub.VersionId, requestedShipment: com.fedex.ship.stub.RequestedShipment): Future[com.fedex.ship.stub.ShipmentReply] = 
        soapClient.requestResponse(scalaxb.toXML(com.fedex.ship.stub.ValidateShipmentRequest(webAuthenticationDetail, clientDetail, transactionDetail, version, requestedShipment), Some("http://fedex.com/ws/ship/v17"), "ValidateShipmentRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://fedex.com/ws/ship/v17/validateShipment"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.fedex.ship.stub.ShipmentReply](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ShipmentReply").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
    }
  }

/**
usage:
val obj = scalaxb.fromXML[com.fedex.ship.stub.Foo](node)
val document = scalaxb.toXML[com.fedex.ship.stub.Foo](obj, "foo", com.fedex.ship.stub.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://fedex.com/ws/ship/v17",
    Some("ns") -> "http://fedex.com/ws/ship/v17",
    Some("tns") -> "http://fedex.com/ws/ship/v17",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val StubAccessorRoleTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AccessorRoleType] = new DefaultStubAccessorRoleTypeFormat {}
  implicit lazy val StubAdditionalLabelsDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AdditionalLabelsDetail] = new DefaultStubAdditionalLabelsDetailFormat {}
  implicit lazy val StubAdditionalLabelsTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AdditionalLabelsType] = new DefaultStubAdditionalLabelsTypeFormat {}
  implicit lazy val StubAddressFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Address] = new DefaultStubAddressFormat {}
  implicit lazy val StubAdrLicenseDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AdrLicenseDetail] = new DefaultStubAdrLicenseDetailFormat {}
  implicit lazy val StubAlcoholDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AlcoholDetail] = new DefaultStubAlcoholDetailFormat {}
  implicit lazy val StubAlcoholRecipientTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AlcoholRecipientType] = new DefaultStubAlcoholRecipientTypeFormat {}
  implicit lazy val StubAssociatedShipmentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AssociatedShipmentDetail] = new DefaultStubAssociatedShipmentDetailFormat {}
  implicit lazy val StubAssociatedShipmentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.AssociatedShipmentType] = new DefaultStubAssociatedShipmentTypeFormat {}
  implicit lazy val StubB13AFilingOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.B13AFilingOptionType] = new DefaultStubB13AFilingOptionTypeFormat {}
  implicit lazy val StubBarcodeSymbologyTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.BarcodeSymbologyType] = new DefaultStubBarcodeSymbologyTypeFormat {}
  implicit lazy val StubBinaryBarcodeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.BinaryBarcode] = new DefaultStubBinaryBarcodeFormat {}
  implicit lazy val StubBinaryBarcodeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.BinaryBarcodeType] = new DefaultStubBinaryBarcodeTypeFormat {}
  implicit lazy val StubBrokerDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.BrokerDetail] = new DefaultStubBrokerDetailFormat {}
  implicit lazy val StubBrokerTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.BrokerType] = new DefaultStubBrokerTypeFormat {}
  implicit lazy val StubCarrierCodeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CarrierCodeType] = new DefaultStubCarrierCodeTypeFormat {}
  implicit lazy val StubCertificateOfOriginDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CertificateOfOriginDetail] = new DefaultStubCertificateOfOriginDetailFormat {}
  implicit lazy val StubChargeBasisLevelTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ChargeBasisLevelType] = new DefaultStubChargeBasisLevelTypeFormat {}
  implicit lazy val StubClearanceBrokerageTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ClearanceBrokerageType] = new DefaultStubClearanceBrokerageTypeFormat {}
  implicit lazy val StubClientDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ClientDetail] = new DefaultStubClientDetailFormat {}
  implicit lazy val StubCodAddTransportationChargeBasisTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CodAddTransportationChargeBasisType] = new DefaultStubCodAddTransportationChargeBasisTypeFormat {}
  implicit lazy val StubCodAddTransportationChargesDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CodAddTransportationChargesDetail] = new DefaultStubCodAddTransportationChargesDetailFormat {}
  implicit lazy val StubCodAdjustmentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CodAdjustmentType] = new DefaultStubCodAdjustmentTypeFormat {}
  implicit lazy val StubCodCollectionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CodCollectionType] = new DefaultStubCodCollectionTypeFormat {}
  implicit lazy val StubCodDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CodDetail] = new DefaultStubCodDetailFormat {}
  implicit lazy val StubCodReturnPackageDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CodReturnPackageDetail] = new DefaultStubCodReturnPackageDetailFormat {}
  implicit lazy val StubCodReturnReferenceIndicatorTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CodReturnReferenceIndicatorType] = new DefaultStubCodReturnReferenceIndicatorTypeFormat {}
  implicit lazy val StubCommercialInvoiceFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CommercialInvoice] = new DefaultStubCommercialInvoiceFormat {}
  implicit lazy val StubCommercialInvoiceDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CommercialInvoiceDetail] = new DefaultStubCommercialInvoiceDetailFormat {}
  implicit lazy val StubCommodityFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Commodity] = new DefaultStubCommodityFormat {}
  implicit lazy val StubCompletedCodDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedCodDetail] = new DefaultStubCompletedCodDetailFormat {}
  implicit lazy val StubCompletedEtdDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedEtdDetail] = new DefaultStubCompletedEtdDetailFormat {}
  implicit lazy val StubCompletedHazardousPackageDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedHazardousPackageDetail] = new DefaultStubCompletedHazardousPackageDetailFormat {}
  implicit lazy val StubCompletedHazardousShipmentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedHazardousShipmentDetail] = new DefaultStubCompletedHazardousShipmentDetailFormat {}
  implicit lazy val StubCompletedHazardousSummaryDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedHazardousSummaryDetail] = new DefaultStubCompletedHazardousSummaryDetailFormat {}
  implicit lazy val StubCompletedHoldAtLocationDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedHoldAtLocationDetail] = new DefaultStubCompletedHoldAtLocationDetailFormat {}
  implicit lazy val StubCompletedPackageDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedPackageDetail] = new DefaultStubCompletedPackageDetailFormat {}
  implicit lazy val StubCompletedShipmentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedShipmentDetail] = new DefaultStubCompletedShipmentDetailFormat {}
  implicit lazy val StubCompletedSmartPostDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedSmartPostDetail] = new DefaultStubCompletedSmartPostDetailFormat {}
  implicit lazy val StubCompletedTagDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CompletedTagDetail] = new DefaultStubCompletedTagDetailFormat {}
  implicit lazy val StubConfigurableLabelReferenceEntryFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ConfigurableLabelReferenceEntry] = new DefaultStubConfigurableLabelReferenceEntryFormat {}
  implicit lazy val StubContactFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Contact] = new DefaultStubContactFormat {}
  implicit lazy val StubContactAndAddressFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ContactAndAddress] = new DefaultStubContactAndAddressFormat {}
  implicit lazy val StubContentRecordFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ContentRecord] = new DefaultStubContentRecordFormat {}
  implicit lazy val StubCurrencyExchangeRateFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CurrencyExchangeRate] = new DefaultStubCurrencyExchangeRateFormat {}
  implicit lazy val StubCustomDeliveryWindowDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomDeliveryWindowDetail] = new DefaultStubCustomDeliveryWindowDetailFormat {}
  implicit lazy val StubCustomDeliveryWindowTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomDeliveryWindowType] = new DefaultStubCustomDeliveryWindowTypeFormat {}
  implicit lazy val StubCustomDocumentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomDocumentDetail] = new DefaultStubCustomDocumentDetailFormat {}
  implicit lazy val StubCustomLabelBarcodeEntryFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelBarcodeEntry] = new DefaultStubCustomLabelBarcodeEntryFormat {}
  implicit lazy val StubCustomLabelBoxEntryFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelBoxEntry] = new DefaultStubCustomLabelBoxEntryFormat {}
  implicit lazy val StubCustomLabelCoordinateUnitsFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelCoordinateUnits] = new DefaultStubCustomLabelCoordinateUnitsFormat {}
  implicit lazy val StubCustomLabelDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelDetail] = new DefaultStubCustomLabelDetailFormat {}
  implicit lazy val StubCustomLabelGraphicEntryFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelGraphicEntry] = new DefaultStubCustomLabelGraphicEntryFormat {}
  implicit lazy val StubCustomLabelPositionFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelPosition] = new DefaultStubCustomLabelPositionFormat {}
  implicit lazy val StubCustomLabelTextBoxEntryFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelTextBoxEntry] = new DefaultStubCustomLabelTextBoxEntryFormat {}
  implicit lazy val StubCustomLabelTextEntryFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelTextEntry] = new DefaultStubCustomLabelTextEntryFormat {}
  implicit lazy val StubCustomerImageUsageFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomerImageUsage] = new DefaultStubCustomerImageUsageFormat {}
  implicit lazy val StubCustomerImageUsageTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomerImageUsageType] = new DefaultStubCustomerImageUsageTypeFormat {}
  implicit lazy val StubCustomerReferenceFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomerReference] = new DefaultStubCustomerReferenceFormat {}
  implicit lazy val StubCustomerReferenceTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomerReferenceType] = new DefaultStubCustomerReferenceTypeFormat {}
  implicit lazy val StubCustomerSpecifiedLabelDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomerSpecifiedLabelDetail] = new DefaultStubCustomerSpecifiedLabelDetailFormat {}
  implicit lazy val StubCustomerSpecifiedLabelGenerationOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType] = new DefaultStubCustomerSpecifiedLabelGenerationOptionTypeFormat {}
  implicit lazy val StubCustomsClearanceDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomsClearanceDetail] = new DefaultStubCustomsClearanceDetailFormat {}
  implicit lazy val StubCustomsDeclarationStatementDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomsDeclarationStatementDetail] = new DefaultStubCustomsDeclarationStatementDetailFormat {}
  implicit lazy val StubCustomsDeclarationStatementTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomsDeclarationStatementType] = new DefaultStubCustomsDeclarationStatementTypeFormat {}
  implicit lazy val StubCustomsOptionDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomsOptionDetail] = new DefaultStubCustomsOptionDetailFormat {}
  implicit lazy val StubCustomsOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomsOptionType] = new DefaultStubCustomsOptionTypeFormat {}
  implicit lazy val StubCustomsRoleTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.CustomsRoleType] = new DefaultStubCustomsRoleTypeFormat {}
  implicit lazy val StubDangerousGoodsAccessibilityTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsAccessibilityType] = new DefaultStubDangerousGoodsAccessibilityTypeFormat {}
  implicit lazy val StubDangerousGoodsContainerFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsContainer] = new DefaultStubDangerousGoodsContainerFormat {}
  implicit lazy val StubDangerousGoodsDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsDetail] = new DefaultStubDangerousGoodsDetailFormat {}
  implicit lazy val StubDangerousGoodsPackingOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsPackingOptionType] = new DefaultStubDangerousGoodsPackingOptionTypeFormat {}
  implicit lazy val StubDangerousGoodsShippersDeclarationDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail] = new DefaultStubDangerousGoodsShippersDeclarationDetailFormat {}
  implicit lazy val StubDangerousGoodsSignatoryFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsSignatory] = new DefaultStubDangerousGoodsSignatoryFormat {}
  implicit lazy val StubDateRangeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DateRange] = new DefaultStubDateRangeFormat {}
  implicit lazy val StubDayOfWeekTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DayOfWeekType] = new DefaultStubDayOfWeekTypeFormat {}
  implicit lazy val StubDeleteShipmentRequestFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DeleteShipmentRequest] = new DefaultStubDeleteShipmentRequestFormat {}
  implicit lazy val StubDeleteTagRequestFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DeleteTagRequest] = new DefaultStubDeleteTagRequestFormat {}
  implicit lazy val StubDeletionControlTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DeletionControlType] = new DefaultStubDeletionControlTypeFormat {}
  implicit lazy val StubDeliveryOnInvoiceAcceptanceDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail] = new DefaultStubDeliveryOnInvoiceAcceptanceDetailFormat {}
  implicit lazy val StubDestinationControlDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DestinationControlDetail] = new DefaultStubDestinationControlDetailFormat {}
  implicit lazy val StubDestinationControlStatementTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DestinationControlStatementType] = new DefaultStubDestinationControlStatementTypeFormat {}
  implicit lazy val StubDimensionsFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Dimensions] = new DefaultStubDimensionsFormat {}
  implicit lazy val StubDocTabContentFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DocTabContent] = new DefaultStubDocTabContentFormat {}
  implicit lazy val StubDocTabContentBarcodedFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DocTabContentBarcoded] = new DefaultStubDocTabContentBarcodedFormat {}
  implicit lazy val StubDocTabContentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DocTabContentType] = new DefaultStubDocTabContentTypeFormat {}
  implicit lazy val StubDocTabContentZone001Format: scalaxb.XMLFormat[com.fedex.ship.stub.DocTabContentZone001] = new DefaultStubDocTabContentZone001Format {}
  implicit lazy val StubDocTabZoneJustificationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DocTabZoneJustificationType] = new DefaultStubDocTabZoneJustificationTypeFormat {}
  implicit lazy val StubDocTabZoneSpecificationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DocTabZoneSpecification] = new DefaultStubDocTabZoneSpecificationFormat {}
  implicit lazy val StubDocumentFormatOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DocumentFormatOptionType] = new DefaultStubDocumentFormatOptionTypeFormat {}
  implicit lazy val StubDocumentFormatOptionsRequestedFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DocumentFormatOptionsRequested] = new DefaultStubDocumentFormatOptionsRequestedFormat {}
  implicit lazy val StubDropoffTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.DropoffType] = new DefaultStubDropoffTypeFormat {}
  implicit lazy val StubEMailLabelDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailLabelDetail] = new DefaultStubEMailLabelDetailFormat {}
  implicit lazy val StubEMailNotificationAggregationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationAggregationType] = new DefaultStubEMailNotificationAggregationTypeFormat {}
  implicit lazy val StubEMailNotificationDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationDetail] = new DefaultStubEMailNotificationDetailFormat {}
  implicit lazy val StubEMailNotificationEventTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationEventType] = new DefaultStubEMailNotificationEventTypeFormat {}
  implicit lazy val StubEMailNotificationFormatTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationFormatType] = new DefaultStubEMailNotificationFormatTypeFormat {}
  implicit lazy val StubEMailNotificationRecipientFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationRecipient] = new DefaultStubEMailNotificationRecipientFormat {}
  implicit lazy val StubEMailNotificationRecipientTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationRecipientType] = new DefaultStubEMailNotificationRecipientTypeFormat {}
  implicit lazy val StubEMailRecipientFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EMailRecipient] = new DefaultStubEMailRecipientFormat {}
  implicit lazy val StubEdtCommodityTaxFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EdtCommodityTax] = new DefaultStubEdtCommodityTaxFormat {}
  implicit lazy val StubEdtExciseConditionFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EdtExciseCondition] = new DefaultStubEdtExciseConditionFormat {}
  implicit lazy val StubEdtRequestTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EdtRequestType] = new DefaultStubEdtRequestTypeFormat {}
  implicit lazy val StubEdtTaxDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EdtTaxDetail] = new DefaultStubEdtTaxDetailFormat {}
  implicit lazy val StubEdtTaxTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EdtTaxType] = new DefaultStubEdtTaxTypeFormat {}
  implicit lazy val StubEmailOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EmailOptionType] = new DefaultStubEmailOptionTypeFormat {}
  implicit lazy val StubEmailOptionsRequestedFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EmailOptionsRequested] = new DefaultStubEmailOptionsRequestedFormat {}
  implicit lazy val StubEtdDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.EtdDetail] = new DefaultStubEtdDetailFormat {}
  implicit lazy val StubExportDeclarationDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ExportDeclarationDetail] = new DefaultStubExportDeclarationDetailFormat {}
  implicit lazy val StubExportDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ExportDetail] = new DefaultStubExportDetailFormat {}
  implicit lazy val StubExpressFreightDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ExpressFreightDetail] = new DefaultStubExpressFreightDetailFormat {}
  implicit lazy val StubFedExLocationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FedExLocationType] = new DefaultStubFedExLocationTypeFormat {}
  implicit lazy val StubFreightAddressLabelDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightAddressLabelDetail] = new DefaultStubFreightAddressLabelDetailFormat {}
  implicit lazy val StubFreightBaseChargeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightBaseCharge] = new DefaultStubFreightBaseChargeFormat {}
  implicit lazy val StubFreightBaseChargeCalculationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightBaseChargeCalculationType] = new DefaultStubFreightBaseChargeCalculationTypeFormat {}
  implicit lazy val StubFreightChargeBasisTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightChargeBasisType] = new DefaultStubFreightChargeBasisTypeFormat {}
  implicit lazy val StubFreightClassTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightClassType] = new DefaultStubFreightClassTypeFormat {}
  implicit lazy val StubFreightCollectTermsTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightCollectTermsType] = new DefaultStubFreightCollectTermsTypeFormat {}
  implicit lazy val StubFreightGuaranteeDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightGuaranteeDetail] = new DefaultStubFreightGuaranteeDetailFormat {}
  implicit lazy val StubFreightGuaranteeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightGuaranteeType] = new DefaultStubFreightGuaranteeTypeFormat {}
  implicit lazy val StubFreightOnValueTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightOnValueType] = new DefaultStubFreightOnValueTypeFormat {}
  implicit lazy val StubFreightRateDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightRateDetail] = new DefaultStubFreightRateDetailFormat {}
  implicit lazy val StubFreightRateNotationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightRateNotation] = new DefaultStubFreightRateNotationFormat {}
  implicit lazy val StubFreightRateQuoteTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightRateQuoteType] = new DefaultStubFreightRateQuoteTypeFormat {}
  implicit lazy val StubFreightShipmentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightShipmentDetail] = new DefaultStubFreightShipmentDetailFormat {}
  implicit lazy val StubFreightShipmentLineItemFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightShipmentLineItem] = new DefaultStubFreightShipmentLineItemFormat {}
  implicit lazy val StubFreightShipmentRoleTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightShipmentRoleType] = new DefaultStubFreightShipmentRoleTypeFormat {}
  implicit lazy val StubFreightSpecialServicePaymentFormat: scalaxb.XMLFormat[com.fedex.ship.stub.FreightSpecialServicePayment] = new DefaultStubFreightSpecialServicePaymentFormat {}
  implicit lazy val StubGeneralAgencyAgreementDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.GeneralAgencyAgreementDetail] = new DefaultStubGeneralAgencyAgreementDetailFormat {}
  implicit lazy val StubGroundDeliveryEligibilityTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.GroundDeliveryEligibilityType] = new DefaultStubGroundDeliveryEligibilityTypeFormat {}
  implicit lazy val StubHazardousCommodityAttributeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityAttributeType] = new DefaultStubHazardousCommodityAttributeTypeFormat {}
  implicit lazy val StubHazardousCommodityContentFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityContent] = new DefaultStubHazardousCommodityContentFormat {}
  implicit lazy val StubHazardousCommodityDescriptionFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityDescription] = new DefaultStubHazardousCommodityDescriptionFormat {}
  implicit lazy val StubHazardousCommodityDescriptionProcessingOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType] = new DefaultStubHazardousCommodityDescriptionProcessingOptionTypeFormat {}
  implicit lazy val StubHazardousCommodityInnerReceptacleDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail] = new DefaultStubHazardousCommodityInnerReceptacleDetailFormat {}
  implicit lazy val StubHazardousCommodityLabelTextOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityLabelTextOptionType] = new DefaultStubHazardousCommodityLabelTextOptionTypeFormat {}
  implicit lazy val StubHazardousCommodityOptionDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityOptionDetail] = new DefaultStubHazardousCommodityOptionDetailFormat {}
  implicit lazy val StubHazardousCommodityOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityOptionType] = new DefaultStubHazardousCommodityOptionTypeFormat {}
  implicit lazy val StubHazardousCommodityPackagingDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityPackagingDetail] = new DefaultStubHazardousCommodityPackagingDetailFormat {}
  implicit lazy val StubHazardousCommodityPackingDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityPackingDetail] = new DefaultStubHazardousCommodityPackingDetailFormat {}
  implicit lazy val StubHazardousCommodityPackingGroupTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityPackingGroupType] = new DefaultStubHazardousCommodityPackingGroupTypeFormat {}
  implicit lazy val StubHazardousCommodityQuantityDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityQuantityDetail] = new DefaultStubHazardousCommodityQuantityDetailFormat {}
  implicit lazy val StubHazardousCommodityQuantityTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityQuantityType] = new DefaultStubHazardousCommodityQuantityTypeFormat {}
  implicit lazy val StubHazardousCommodityRegulationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityRegulationType] = new DefaultStubHazardousCommodityRegulationTypeFormat {}
  implicit lazy val StubHazardousContainerPackingTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HazardousContainerPackingType] = new DefaultStubHazardousContainerPackingTypeFormat {}
  implicit lazy val StubHoldAtLocationDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HoldAtLocationDetail] = new DefaultStubHoldAtLocationDetailFormat {}
  implicit lazy val StubHomeDeliveryPremiumDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HomeDeliveryPremiumDetail] = new DefaultStubHomeDeliveryPremiumDetailFormat {}
  implicit lazy val StubHomeDeliveryPremiumTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.HomeDeliveryPremiumType] = new DefaultStubHomeDeliveryPremiumTypeFormat {}
  implicit lazy val StubImageIdFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ImageId] = new DefaultStubImageIdFormat {}
  implicit lazy val StubInternationalControlledExportDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.InternationalControlledExportDetail] = new DefaultStubInternationalControlledExportDetailFormat {}
  implicit lazy val StubInternationalControlledExportTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.InternationalControlledExportType] = new DefaultStubInternationalControlledExportTypeFormat {}
  implicit lazy val StubInternationalDocumentContentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.InternationalDocumentContentType] = new DefaultStubInternationalDocumentContentTypeFormat {}
  implicit lazy val StubInternationalTrafficInArmsRegulationsDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail] = new DefaultStubInternationalTrafficInArmsRegulationsDetailFormat {}
  implicit lazy val StubLabelFormatTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LabelFormatType] = new DefaultStubLabelFormatTypeFormat {}
  implicit lazy val StubLabelMaskableDataTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LabelMaskableDataType] = new DefaultStubLabelMaskableDataTypeFormat {}
  implicit lazy val StubLabelOrderTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LabelOrderType] = new DefaultStubLabelOrderTypeFormat {}
  implicit lazy val StubLabelPrintingOrientationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LabelPrintingOrientationType] = new DefaultStubLabelPrintingOrientationTypeFormat {}
  implicit lazy val StubLabelRotationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LabelRotationType] = new DefaultStubLabelRotationTypeFormat {}
  implicit lazy val StubLabelSpecificationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LabelSpecification] = new DefaultStubLabelSpecificationFormat {}
  implicit lazy val StubLabelStockTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LabelStockType] = new DefaultStubLabelStockTypeFormat {}
  implicit lazy val StubLiabilityCoverageDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LiabilityCoverageDetail] = new DefaultStubLiabilityCoverageDetailFormat {}
  implicit lazy val StubLiabilityCoverageTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LiabilityCoverageType] = new DefaultStubLiabilityCoverageTypeFormat {}
  implicit lazy val StubLicenseOrPermitDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LicenseOrPermitDetail] = new DefaultStubLicenseOrPermitDetailFormat {}
  implicit lazy val StubLinearMeasureFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LinearMeasure] = new DefaultStubLinearMeasureFormat {}
  implicit lazy val StubLinearUnitsFormat: scalaxb.XMLFormat[com.fedex.ship.stub.LinearUnits] = new DefaultStubLinearUnitsFormat {}
  implicit lazy val StubLocalizationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Localization] = new DefaultStubLocalizationFormat {}
  implicit lazy val StubMeasureFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Measure] = new DefaultStubMeasureFormat {}
  implicit lazy val StubMinimumChargeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.MinimumChargeType] = new DefaultStubMinimumChargeTypeFormat {}
  implicit lazy val StubMoneyFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Money] = new DefaultStubMoneyFormat {}
  implicit lazy val StubNaftaCertificateOfOriginDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaCertificateOfOriginDetail] = new DefaultStubNaftaCertificateOfOriginDetailFormat {}
  implicit lazy val StubNaftaCommodityDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaCommodityDetail] = new DefaultStubNaftaCommodityDetailFormat {}
  implicit lazy val StubNaftaImporterSpecificationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaImporterSpecificationType] = new DefaultStubNaftaImporterSpecificationTypeFormat {}
  implicit lazy val StubNaftaLowValueStatementDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaLowValueStatementDetail] = new DefaultStubNaftaLowValueStatementDetailFormat {}
  implicit lazy val StubNaftaNetCostMethodCodeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaNetCostMethodCode] = new DefaultStubNaftaNetCostMethodCodeFormat {}
  implicit lazy val StubNaftaPreferenceCriterionCodeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaPreferenceCriterionCode] = new DefaultStubNaftaPreferenceCriterionCodeFormat {}
  implicit lazy val StubNaftaProducerFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaProducer] = new DefaultStubNaftaProducerFormat {}
  implicit lazy val StubNaftaProducerDeterminationCodeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaProducerDeterminationCode] = new DefaultStubNaftaProducerDeterminationCodeFormat {}
  implicit lazy val StubNaftaProducerSpecificationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NaftaProducerSpecificationType] = new DefaultStubNaftaProducerSpecificationTypeFormat {}
  implicit lazy val StubNetExplosiveClassificationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NetExplosiveClassificationType] = new DefaultStubNetExplosiveClassificationTypeFormat {}
  implicit lazy val StubNetExplosiveDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NetExplosiveDetail] = new DefaultStubNetExplosiveDetailFormat {}
  implicit lazy val StubNotificationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Notification] = new DefaultStubNotificationFormat {}
  implicit lazy val StubNotificationParameterFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NotificationParameter] = new DefaultStubNotificationParameterFormat {}
  implicit lazy val StubNotificationSeverityTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.NotificationSeverityType] = new DefaultStubNotificationSeverityTypeFormat {}
  implicit lazy val StubOp900DetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Op900Detail] = new DefaultStubOp900DetailFormat {}
  implicit lazy val StubOperationalInstructionFormat: scalaxb.XMLFormat[com.fedex.ship.stub.OperationalInstruction] = new DefaultStubOperationalInstructionFormat {}
  implicit lazy val StubOversizeClassTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.OversizeClassType] = new DefaultStubOversizeClassTypeFormat {}
  implicit lazy val StubPackageBarcodesFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PackageBarcodes] = new DefaultStubPackageBarcodesFormat {}
  implicit lazy val StubPackageOperationalDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PackageOperationalDetail] = new DefaultStubPackageOperationalDetailFormat {}
  implicit lazy val StubPackageRateDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PackageRateDetail] = new DefaultStubPackageRateDetailFormat {}
  implicit lazy val StubPackageRatingFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PackageRating] = new DefaultStubPackageRatingFormat {}
  implicit lazy val StubPackageSpecialServiceTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PackageSpecialServiceType] = new DefaultStubPackageSpecialServiceTypeFormat {}
  implicit lazy val StubPackageSpecialServicesRequestedFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PackageSpecialServicesRequested] = new DefaultStubPackageSpecialServicesRequestedFormat {}
  implicit lazy val StubPackagingTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PackagingType] = new DefaultStubPackagingTypeFormat {}
  implicit lazy val StubPageQuadrantTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PageQuadrantType] = new DefaultStubPageQuadrantTypeFormat {}
  implicit lazy val StubPartyFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Party] = new DefaultStubPartyFormat {}
  implicit lazy val StubPaymentFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Payment] = new DefaultStubPaymentFormat {}
  implicit lazy val StubPaymentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PaymentType] = new DefaultStubPaymentTypeFormat {}
  implicit lazy val StubPayorFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Payor] = new DefaultStubPayorFormat {}
  implicit lazy val StubPendingShipmentAccessDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentAccessDetail] = new DefaultStubPendingShipmentAccessDetailFormat {}
  implicit lazy val StubPendingShipmentAccessorDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentAccessorDetail] = new DefaultStubPendingShipmentAccessorDetailFormat {}
  implicit lazy val StubPendingShipmentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentDetail] = new DefaultStubPendingShipmentDetailFormat {}
  implicit lazy val StubPendingShipmentProcessingOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentProcessingOptionType] = new DefaultStubPendingShipmentProcessingOptionTypeFormat {}
  implicit lazy val StubPendingShipmentProcessingOptionsRequestedFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested] = new DefaultStubPendingShipmentProcessingOptionsRequestedFormat {}
  implicit lazy val StubPendingShipmentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentType] = new DefaultStubPendingShipmentTypeFormat {}
  implicit lazy val StubPhysicalFormTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PhysicalFormType] = new DefaultStubPhysicalFormTypeFormat {}
  implicit lazy val StubPhysicalPackagingTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PhysicalPackagingType] = new DefaultStubPhysicalPackagingTypeFormat {}
  implicit lazy val StubPickupDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PickupDetail] = new DefaultStubPickupDetailFormat {}
  implicit lazy val StubPickupRequestSourceTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PickupRequestSourceType] = new DefaultStubPickupRequestSourceTypeFormat {}
  implicit lazy val StubPickupRequestTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PickupRequestType] = new DefaultStubPickupRequestTypeFormat {}
  implicit lazy val StubPricingCodeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PricingCodeType] = new DefaultStubPricingCodeTypeFormat {}
  implicit lazy val StubPrintedReferenceFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PrintedReference] = new DefaultStubPrintedReferenceFormat {}
  implicit lazy val StubPrintedReferenceTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PrintedReferenceType] = new DefaultStubPrintedReferenceTypeFormat {}
  implicit lazy val StubPriorityAlertDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PriorityAlertDetail] = new DefaultStubPriorityAlertDetailFormat {}
  implicit lazy val StubPriorityAlertEnhancementTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PriorityAlertEnhancementType] = new DefaultStubPriorityAlertEnhancementTypeFormat {}
  implicit lazy val StubProcessShipmentReplyFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ProcessShipmentReply] = new DefaultStubProcessShipmentReplyFormat {}
  implicit lazy val StubProcessShipmentRequestFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ProcessShipmentRequest] = new DefaultStubProcessShipmentRequestFormat {}
  implicit lazy val StubProcessTagReplyFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ProcessTagReply] = new DefaultStubProcessTagReplyFormat {}
  implicit lazy val StubProcessTagRequestFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ProcessTagRequest] = new DefaultStubProcessTagRequestFormat {}
  implicit lazy val StubPurposeOfShipmentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.PurposeOfShipmentType] = new DefaultStubPurposeOfShipmentTypeFormat {}
  implicit lazy val StubRadioactiveContainerClassTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RadioactiveContainerClassType] = new DefaultStubRadioactiveContainerClassTypeFormat {}
  implicit lazy val StubRadioactiveLabelTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RadioactiveLabelType] = new DefaultStubRadioactiveLabelTypeFormat {}
  implicit lazy val StubRadioactivityDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RadioactivityDetail] = new DefaultStubRadioactivityDetailFormat {}
  implicit lazy val StubRadioactivityUnitOfMeasureFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RadioactivityUnitOfMeasure] = new DefaultStubRadioactivityUnitOfMeasureFormat {}
  implicit lazy val StubRadionuclideActivityFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RadionuclideActivity] = new DefaultStubRadionuclideActivityFormat {}
  implicit lazy val StubRadionuclideDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RadionuclideDetail] = new DefaultStubRadionuclideDetailFormat {}
  implicit lazy val StubRateDimensionalDivisorTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RateDimensionalDivisorType] = new DefaultStubRateDimensionalDivisorTypeFormat {}
  implicit lazy val StubRateDiscountFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RateDiscount] = new DefaultStubRateDiscountFormat {}
  implicit lazy val StubRateDiscountTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RateDiscountType] = new DefaultStubRateDiscountTypeFormat {}
  implicit lazy val StubRateElementBasisTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RateElementBasisType] = new DefaultStubRateElementBasisTypeFormat {}
  implicit lazy val StubRateRequestTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RateRequestType] = new DefaultStubRateRequestTypeFormat {}
  implicit lazy val StubRateTypeBasisTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RateTypeBasisType] = new DefaultStubRateTypeBasisTypeFormat {}
  implicit lazy val StubRatedWeightMethodFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RatedWeightMethod] = new DefaultStubRatedWeightMethodFormat {}
  implicit lazy val StubRebateFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Rebate] = new DefaultStubRebateFormat {}
  implicit lazy val StubRebateTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RebateType] = new DefaultStubRebateTypeFormat {}
  implicit lazy val StubRecipientCustomsIdFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RecipientCustomsId] = new DefaultStubRecipientCustomsIdFormat {}
  implicit lazy val StubRecipientCustomsIdTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RecipientCustomsIdType] = new DefaultStubRecipientCustomsIdTypeFormat {}
  implicit lazy val StubRecommendedDocumentSpecificationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RecommendedDocumentSpecification] = new DefaultStubRecommendedDocumentSpecificationFormat {}
  implicit lazy val StubRecommendedDocumentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RecommendedDocumentType] = new DefaultStubRecommendedDocumentTypeFormat {}
  implicit lazy val StubRegulatoryControlTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RegulatoryControlType] = new DefaultStubRegulatoryControlTypeFormat {}
  implicit lazy val StubRegulatoryLabelContentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RegulatoryLabelContentDetail] = new DefaultStubRegulatoryLabelContentDetailFormat {}
  implicit lazy val StubRegulatoryLabelTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RegulatoryLabelType] = new DefaultStubRegulatoryLabelTypeFormat {}
  implicit lazy val StubRelativeVerticalPositionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RelativeVerticalPositionType] = new DefaultStubRelativeVerticalPositionTypeFormat {}
  implicit lazy val StubRequestedPackageLineItemFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RequestedPackageLineItem] = new DefaultStubRequestedPackageLineItemFormat {}
  implicit lazy val StubRequestedShipmentFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RequestedShipment] = new DefaultStubRequestedShipmentFormat {}
  implicit lazy val StubRequestedShippingDocumentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RequestedShippingDocumentType] = new DefaultStubRequestedShippingDocumentTypeFormat {}
  implicit lazy val StubReturnAssociationDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnAssociationDetail] = new DefaultStubReturnAssociationDetailFormat {}
  implicit lazy val StubReturnEMailAllowedSpecialServiceTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType] = new DefaultStubReturnEMailAllowedSpecialServiceTypeFormat {}
  implicit lazy val StubReturnEMailDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnEMailDetail] = new DefaultStubReturnEMailDetailFormat {}
  implicit lazy val StubReturnInstructionsDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnInstructionsDetail] = new DefaultStubReturnInstructionsDetailFormat {}
  implicit lazy val StubReturnShipmentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnShipmentDetail] = new DefaultStubReturnShipmentDetailFormat {}
  implicit lazy val StubReturnTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnType] = new DefaultStubReturnTypeFormat {}
  implicit lazy val StubReturnedRateTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnedRateType] = new DefaultStubReturnedRateTypeFormat {}
  implicit lazy val StubReturnedShippingDocumentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ReturnedShippingDocumentType] = new DefaultStubReturnedShippingDocumentTypeFormat {}
  implicit lazy val StubRmaFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Rma] = new DefaultStubRmaFormat {}
  implicit lazy val StubRotationTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.RotationType] = new DefaultStubRotationTypeFormat {}
  implicit lazy val StubSecondaryBarcodeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SecondaryBarcodeType] = new DefaultStubSecondaryBarcodeTypeFormat {}
  implicit lazy val StubServiceTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ServiceType] = new DefaultStubServiceTypeFormat {}
  implicit lazy val StubShipmentConfigurationDataFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentConfigurationData] = new DefaultStubShipmentConfigurationDataFormat {}
  implicit lazy val StubShipmentDryIceDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentDryIceDetail] = new DefaultStubShipmentDryIceDetailFormat {}
  implicit lazy val StubShipmentLegRateDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentLegRateDetail] = new DefaultStubShipmentLegRateDetailFormat {}
  implicit lazy val StubShipmentManifestDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentManifestDetail] = new DefaultStubShipmentManifestDetailFormat {}
  implicit lazy val StubShipmentOperationalDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentOperationalDetail] = new DefaultStubShipmentOperationalDetailFormat {}
  implicit lazy val StubShipmentRateDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentRateDetail] = new DefaultStubShipmentRateDetailFormat {}
  implicit lazy val StubShipmentRatingFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentRating] = new DefaultStubShipmentRatingFormat {}
  implicit lazy val StubShipmentReplyFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentReply] = new DefaultStubShipmentReplyFormat {}
  implicit lazy val StubShipmentSpecialServiceTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentSpecialServiceType] = new DefaultStubShipmentSpecialServiceTypeFormat {}
  implicit lazy val StubShipmentSpecialServicesRequestedFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentSpecialServicesRequested] = new DefaultStubShipmentSpecialServicesRequestedFormat {}
  implicit lazy val StubShippingDocumentFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocument] = new DefaultStubShippingDocumentFormat {}
  implicit lazy val StubShippingDocumentDispositionDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentDispositionDetail] = new DefaultStubShippingDocumentDispositionDetailFormat {}
  implicit lazy val StubShippingDocumentDispositionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentDispositionType] = new DefaultStubShippingDocumentDispositionTypeFormat {}
  implicit lazy val StubShippingDocumentEMailDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentEMailDetail] = new DefaultStubShippingDocumentEMailDetailFormat {}
  implicit lazy val StubShippingDocumentEMailGroupingTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentEMailGroupingType] = new DefaultStubShippingDocumentEMailGroupingTypeFormat {}
  implicit lazy val StubShippingDocumentEMailRecipientFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentEMailRecipient] = new DefaultStubShippingDocumentEMailRecipientFormat {}
  implicit lazy val StubShippingDocumentFormatFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentFormat] = new DefaultStubShippingDocumentFormatFormat {}
  implicit lazy val StubShippingDocumentGroupingTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentGroupingType] = new DefaultStubShippingDocumentGroupingTypeFormat {}
  implicit lazy val StubShippingDocumentImageTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentImageType] = new DefaultStubShippingDocumentImageTypeFormat {}
  implicit lazy val StubShippingDocumentPartFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentPart] = new DefaultStubShippingDocumentPartFormat {}
  implicit lazy val StubShippingDocumentPrintDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentPrintDetail] = new DefaultStubShippingDocumentPrintDetailFormat {}
  implicit lazy val StubShippingDocumentSpecificationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentSpecification] = new DefaultStubShippingDocumentSpecificationFormat {}
  implicit lazy val StubShippingDocumentStockTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentStockType] = new DefaultStubShippingDocumentStockTypeFormat {}
  implicit lazy val StubSignatureOptionDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SignatureOptionDetail] = new DefaultStubSignatureOptionDetailFormat {}
  implicit lazy val StubSignatureOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SignatureOptionType] = new DefaultStubSignatureOptionTypeFormat {}
  implicit lazy val StubSmartPostAncillaryEndorsementTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostAncillaryEndorsementType] = new DefaultStubSmartPostAncillaryEndorsementTypeFormat {}
  implicit lazy val StubSmartPostIndiciaTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostIndiciaType] = new DefaultStubSmartPostIndiciaTypeFormat {}
  implicit lazy val StubSmartPostShipmentDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostShipmentDetail] = new DefaultStubSmartPostShipmentDetailFormat {}
  implicit lazy val StubSmartPostShipmentProcessingOptionTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostShipmentProcessingOptionType] = new DefaultStubSmartPostShipmentProcessingOptionTypeFormat {}
  implicit lazy val StubSmartPostShipmentProcessingOptionsRequestedFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested] = new DefaultStubSmartPostShipmentProcessingOptionsRequestedFormat {}
  implicit lazy val StubSpecialRatingAppliedTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SpecialRatingAppliedType] = new DefaultStubSpecialRatingAppliedTypeFormat {}
  implicit lazy val StubStringBarcodeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.StringBarcode] = new DefaultStubStringBarcodeFormat {}
  implicit lazy val StubStringBarcodeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.StringBarcodeType] = new DefaultStubStringBarcodeTypeFormat {}
  implicit lazy val StubSurchargeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Surcharge] = new DefaultStubSurchargeFormat {}
  implicit lazy val StubSurchargeLevelTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SurchargeLevelType] = new DefaultStubSurchargeLevelTypeFormat {}
  implicit lazy val StubSurchargeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.SurchargeType] = new DefaultStubSurchargeTypeFormat {}
  implicit lazy val StubTaxFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Tax] = new DefaultStubTaxFormat {}
  implicit lazy val StubTaxTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TaxType] = new DefaultStubTaxTypeFormat {}
  implicit lazy val StubTaxesOrMiscellaneousChargeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TaxesOrMiscellaneousChargeType] = new DefaultStubTaxesOrMiscellaneousChargeTypeFormat {}
  implicit lazy val StubTaxpayerIdentificationFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TaxpayerIdentification] = new DefaultStubTaxpayerIdentificationFormat {}
  implicit lazy val StubTinTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TinType] = new DefaultStubTinTypeFormat {}
  implicit lazy val StubTrackingIdFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TrackingId] = new DefaultStubTrackingIdFormat {}
  implicit lazy val StubTrackingIdTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TrackingIdType] = new DefaultStubTrackingIdTypeFormat {}
  implicit lazy val StubTransactionDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TransactionDetail] = new DefaultStubTransactionDetailFormat {}
  implicit lazy val StubTransitTimeTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.TransitTimeType] = new DefaultStubTransitTimeTypeFormat {}
  implicit lazy val StubUploadDocumentIdProducerFormat: scalaxb.XMLFormat[com.fedex.ship.stub.UploadDocumentIdProducer] = new DefaultStubUploadDocumentIdProducerFormat {}
  implicit lazy val StubUploadDocumentProducerTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.UploadDocumentProducerType] = new DefaultStubUploadDocumentProducerTypeFormat {}
  implicit lazy val StubUploadDocumentReferenceDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.UploadDocumentReferenceDetail] = new DefaultStubUploadDocumentReferenceDetailFormat {}
  implicit lazy val StubUploadDocumentTypeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.UploadDocumentType] = new DefaultStubUploadDocumentTypeFormat {}
  implicit lazy val StubValidateShipmentRequestFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ValidateShipmentRequest] = new DefaultStubValidateShipmentRequestFormat {}
  implicit lazy val StubValidatedHazardousCommodityContentFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ValidatedHazardousCommodityContent] = new DefaultStubValidatedHazardousCommodityContentFormat {}
  implicit lazy val StubValidatedHazardousCommodityDescriptionFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ValidatedHazardousCommodityDescription] = new DefaultStubValidatedHazardousCommodityDescriptionFormat {}
  implicit lazy val StubValidatedHazardousContainerFormat: scalaxb.XMLFormat[com.fedex.ship.stub.ValidatedHazardousContainer] = new DefaultStubValidatedHazardousContainerFormat {}
  implicit lazy val StubVariableHandlingChargeDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.VariableHandlingChargeDetail] = new DefaultStubVariableHandlingChargeDetailFormat {}
  implicit lazy val StubVariableHandlingChargesFormat: scalaxb.XMLFormat[com.fedex.ship.stub.VariableHandlingCharges] = new DefaultStubVariableHandlingChargesFormat {}
  implicit lazy val StubVolumeFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Volume] = new DefaultStubVolumeFormat {}
  implicit lazy val StubVolumeUnitsFormat: scalaxb.XMLFormat[com.fedex.ship.stub.VolumeUnits] = new DefaultStubVolumeUnitsFormat {}
  implicit lazy val StubWeightFormat: scalaxb.XMLFormat[com.fedex.ship.stub.Weight] = new DefaultStubWeightFormat {}
  implicit lazy val StubWeightUnitsFormat: scalaxb.XMLFormat[com.fedex.ship.stub.WeightUnits] = new DefaultStubWeightUnitsFormat {}
  implicit lazy val StubWebAuthenticationDetailFormat: scalaxb.XMLFormat[com.fedex.ship.stub.WebAuthenticationDetail] = new DefaultStubWebAuthenticationDetailFormat {}
  implicit lazy val StubWebAuthenticationCredentialFormat: scalaxb.XMLFormat[com.fedex.ship.stub.WebAuthenticationCredential] = new DefaultStubWebAuthenticationCredentialFormat {}
  implicit lazy val StubVersionIdFormat: scalaxb.XMLFormat[com.fedex.ship.stub.VersionId] = new DefaultStubVersionIdFormat {}

  def buildStubAccessorRoleTypeFormat = new DefaultStubAccessorRoleTypeFormat {}
  trait DefaultStubAccessorRoleTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.AccessorRoleType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.AccessorRoleType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.AccessorRoleType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.AccessorRoleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.AccessorRoleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubAdditionalLabelsDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.AdditionalLabelsDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("AdditionalLabelsDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.AdditionalLabelsDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Count")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.AdditionalLabelsDetail(scalaxb.fromXML[com.fedex.ship.stub.AdditionalLabelsType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.AdditionalLabelsDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.AdditionalLabelsType](__obj.Type, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Count, Some("http://fedex.com/ws/ship/v17"), Some("Count"), __scope, false))

  }

  def buildStubAdditionalLabelsTypeFormat = new DefaultStubAdditionalLabelsTypeFormat {}
  trait DefaultStubAdditionalLabelsTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.AdditionalLabelsType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.AdditionalLabelsType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.AdditionalLabelsType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.AdditionalLabelsType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.AdditionalLabelsType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubAddressFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Address] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Address")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Address] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "StreetLines")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "City")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "StateOrProvinceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PostalCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UrbanizationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CountryCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CountryName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Residential")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.fedex.ship.stub.Address(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Address, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.StreetLines flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("StreetLines"), __scope, false) },
        __obj.City map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("City"), __scope, false) } getOrElse {Nil},
        __obj.StateOrProvinceCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("StateOrProvinceCode"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        __obj.UrbanizationCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("UrbanizationCode"), __scope, false) } getOrElse {Nil},
        __obj.CountryCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CountryCode"), __scope, false) } getOrElse {Nil},
        __obj.CountryName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CountryName"), __scope, false) } getOrElse {Nil},
        __obj.Residential map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("Residential"), __scope, false) } getOrElse {Nil})

  }
  
  
  

  trait DefaultStubAdrLicenseDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.AdrLicenseDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("AdrLicenseDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.AdrLicenseDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LicenseOrPermitDetail")) ^^
      { case p1 =>
      com.fedex.ship.stub.AdrLicenseDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LicenseOrPermitDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.AdrLicenseDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LicenseOrPermitDetail map { scalaxb.toXML[com.fedex.ship.stub.LicenseOrPermitDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("LicenseOrPermitDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubAlcoholDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.AlcoholDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("AlcoholDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.AlcoholDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RecipientType")) ^^
      { case p1 =>
      com.fedex.ship.stub.AlcoholDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.AlcoholRecipientType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.AlcoholDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.RecipientType map { scalaxb.toXML[com.fedex.ship.stub.AlcoholRecipientType](_, Some("http://fedex.com/ws/ship/v17"), Some("RecipientType"), __scope, false) } getOrElse {Nil})

  }

  def buildStubAlcoholRecipientTypeFormat = new DefaultStubAlcoholRecipientTypeFormat {}
  trait DefaultStubAlcoholRecipientTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.AlcoholRecipientType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.AlcoholRecipientType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.AlcoholRecipientType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.AlcoholRecipientType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.AlcoholRecipientType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubAssociatedShipmentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.AssociatedShipmentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("AssociatedShipmentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.AssociatedShipmentDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Sender")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Recipient")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ServiceType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackagingType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TrackingId")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerReferences")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipmentOperationalDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackageOperationalDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Label")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.fedex.ship.stub.AssociatedShipmentDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.AssociatedShipmentType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ServiceType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PackagingType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TrackingId](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerReference](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentOperationalDetail](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PackageOperationalDetail](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocument](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.AssociatedShipmentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.AssociatedShipmentType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Sender map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("Sender"), __scope, false) } getOrElse {Nil},
        __obj.Recipient map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("Recipient"), __scope, false) } getOrElse {Nil},
        __obj.ServiceType map { scalaxb.toXML[com.fedex.ship.stub.ServiceType](_, Some("http://fedex.com/ws/ship/v17"), Some("ServiceType"), __scope, false) } getOrElse {Nil},
        __obj.PackagingType map { scalaxb.toXML[com.fedex.ship.stub.PackagingType](_, Some("http://fedex.com/ws/ship/v17"), Some("PackagingType"), __scope, false) } getOrElse {Nil},
        __obj.TrackingId map { scalaxb.toXML[com.fedex.ship.stub.TrackingId](_, Some("http://fedex.com/ws/ship/v17"), Some("TrackingId"), __scope, false) } getOrElse {Nil},
        __obj.CustomerReferences flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerReference](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerReferences"), __scope, false) },
        __obj.ShipmentOperationalDetail map { scalaxb.toXML[com.fedex.ship.stub.ShipmentOperationalDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipmentOperationalDetail"), __scope, false) } getOrElse {Nil},
        __obj.PackageOperationalDetail map { scalaxb.toXML[com.fedex.ship.stub.PackageOperationalDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("PackageOperationalDetail"), __scope, false) } getOrElse {Nil},
        __obj.Label map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocument](_, Some("http://fedex.com/ws/ship/v17"), Some("Label"), __scope, false) } getOrElse {Nil})

  }

  def buildStubAssociatedShipmentTypeFormat = new DefaultStubAssociatedShipmentTypeFormat {}
  trait DefaultStubAssociatedShipmentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.AssociatedShipmentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.AssociatedShipmentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.AssociatedShipmentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.AssociatedShipmentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.AssociatedShipmentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubB13AFilingOptionTypeFormat = new DefaultStubB13AFilingOptionTypeFormat {}
  trait DefaultStubB13AFilingOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.B13AFilingOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.B13AFilingOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.B13AFilingOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.B13AFilingOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.B13AFilingOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubBarcodeSymbologyTypeFormat = new DefaultStubBarcodeSymbologyTypeFormat {}
  trait DefaultStubBarcodeSymbologyTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.BarcodeSymbologyType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.BarcodeSymbologyType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.BarcodeSymbologyType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.BarcodeSymbologyType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.BarcodeSymbologyType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubBinaryBarcodeFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.BinaryBarcode] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("BinaryBarcode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.BinaryBarcode] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.BinaryBarcode(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.BinaryBarcodeType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.BinaryBarcode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.BinaryBarcodeType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  def buildStubBinaryBarcodeTypeFormat = new DefaultStubBinaryBarcodeTypeFormat {}
  trait DefaultStubBinaryBarcodeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.BinaryBarcodeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.BinaryBarcodeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.BinaryBarcodeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.BinaryBarcodeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.BinaryBarcodeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubBrokerDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.BrokerDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("BrokerDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.BrokerDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Broker")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.BrokerDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.BrokerType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.BrokerDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.BrokerType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Broker map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("Broker"), __scope, false) } getOrElse {Nil})

  }

  def buildStubBrokerTypeFormat = new DefaultStubBrokerTypeFormat {}
  trait DefaultStubBrokerTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.BrokerType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.BrokerType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.BrokerType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.BrokerType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.BrokerType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubCarrierCodeTypeFormat = new DefaultStubCarrierCodeTypeFormat {}
  trait DefaultStubCarrierCodeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CarrierCodeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CarrierCodeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CarrierCodeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CarrierCodeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CarrierCodeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCertificateOfOriginDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CertificateOfOriginDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CertificateOfOriginDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CertificateOfOriginDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentFormat")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerImageUsages")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CertificateOfOriginDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerImageUsage](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CertificateOfOriginDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DocumentFormat map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentFormat"), __scope, false) } getOrElse {Nil},
        __obj.CustomerImageUsages flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerImageUsage](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerImageUsages"), __scope, false) })

  }

  def buildStubChargeBasisLevelTypeFormat = new DefaultStubChargeBasisLevelTypeFormat {}
  trait DefaultStubChargeBasisLevelTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ChargeBasisLevelType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ChargeBasisLevelType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ChargeBasisLevelType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ChargeBasisLevelType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ChargeBasisLevelType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubClearanceBrokerageTypeFormat = new DefaultStubClearanceBrokerageTypeFormat {}
  trait DefaultStubClearanceBrokerageTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ClearanceBrokerageType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ClearanceBrokerageType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ClearanceBrokerageType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ClearanceBrokerageType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ClearanceBrokerageType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubClientDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ClientDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ClientDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ClientDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AccountNumber")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MeterNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "IntegratorId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Localization")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.ClientDetail(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Localization](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ClientDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.AccountNumber, Some("http://fedex.com/ws/ship/v17"), Some("AccountNumber"), __scope, false),
        scalaxb.toXML[String](__obj.MeterNumber, Some("http://fedex.com/ws/ship/v17"), Some("MeterNumber"), __scope, false),
        __obj.IntegratorId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("IntegratorId"), __scope, false) } getOrElse {Nil},
        __obj.Localization map { scalaxb.toXML[com.fedex.ship.stub.Localization](_, Some("http://fedex.com/ws/ship/v17"), Some("Localization"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCodAddTransportationChargeBasisTypeFormat = new DefaultStubCodAddTransportationChargeBasisTypeFormat {}
  trait DefaultStubCodAddTransportationChargeBasisTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CodAddTransportationChargeBasisType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CodAddTransportationChargeBasisType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CodAddTransportationChargeBasisType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CodAddTransportationChargeBasisType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CodAddTransportationChargeBasisType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCodAddTransportationChargesDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CodAddTransportationChargesDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CodAddTransportationChargesDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CodAddTransportationChargesDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateTypeBasis")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ChargeBasis")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ChargeBasisLevel")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.CodAddTransportationChargesDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RateTypeBasisType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodAddTransportationChargeBasisType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ChargeBasisLevelType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CodAddTransportationChargesDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RateTypeBasis map { scalaxb.toXML[com.fedex.ship.stub.RateTypeBasisType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateTypeBasis"), __scope, false) } getOrElse {Nil},
        __obj.ChargeBasis map { scalaxb.toXML[com.fedex.ship.stub.CodAddTransportationChargeBasisType](_, Some("http://fedex.com/ws/ship/v17"), Some("ChargeBasis"), __scope, false) } getOrElse {Nil},
        __obj.ChargeBasisLevel map { scalaxb.toXML[com.fedex.ship.stub.ChargeBasisLevelType](_, Some("http://fedex.com/ws/ship/v17"), Some("ChargeBasisLevel"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCodAdjustmentTypeFormat = new DefaultStubCodAdjustmentTypeFormat {}
  trait DefaultStubCodAdjustmentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CodAdjustmentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CodAdjustmentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CodAdjustmentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CodAdjustmentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CodAdjustmentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubCodCollectionTypeFormat = new DefaultStubCodCollectionTypeFormat {}
  trait DefaultStubCodCollectionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CodCollectionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CodCollectionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CodCollectionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CodCollectionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CodCollectionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCodDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CodDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CodDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CodDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CodCollectionAmount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AddTransportationChargesDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CollectionType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CodRecipient")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FinancialInstitutionContactAndAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RemitToName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReferenceIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReturnTrackingId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.fedex.ship.stub.CodDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodAddTransportationChargesDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.CodCollectionType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ContactAndAddress](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodReturnReferenceIndicatorType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TrackingId](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CodDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CodCollectionAmount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("CodCollectionAmount"), __scope, false) } getOrElse {Nil},
        __obj.AddTransportationChargesDetail map { scalaxb.toXML[com.fedex.ship.stub.CodAddTransportationChargesDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("AddTransportationChargesDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.CodCollectionType](__obj.CollectionType, Some("http://fedex.com/ws/ship/v17"), Some("CollectionType"), __scope, false),
        __obj.CodRecipient map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("CodRecipient"), __scope, false) } getOrElse {Nil},
        __obj.FinancialInstitutionContactAndAddress map { scalaxb.toXML[com.fedex.ship.stub.ContactAndAddress](_, Some("http://fedex.com/ws/ship/v17"), Some("FinancialInstitutionContactAndAddress"), __scope, false) } getOrElse {Nil},
        __obj.RemitToName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("RemitToName"), __scope, false) } getOrElse {Nil},
        __obj.ReferenceIndicator map { scalaxb.toXML[com.fedex.ship.stub.CodReturnReferenceIndicatorType](_, Some("http://fedex.com/ws/ship/v17"), Some("ReferenceIndicator"), __scope, false) } getOrElse {Nil},
        __obj.ReturnTrackingId map { scalaxb.toXML[com.fedex.ship.stub.TrackingId](_, Some("http://fedex.com/ws/ship/v17"), Some("ReturnTrackingId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCodReturnPackageDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CodReturnPackageDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CodReturnPackageDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CodReturnPackageDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CollectionAmount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AdjustmentType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Electronic")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Barcodes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Label")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.CodReturnPackageDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodAdjustmentType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PackageBarcodes](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocument](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CodReturnPackageDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CollectionAmount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("CollectionAmount"), __scope, false) } getOrElse {Nil},
        __obj.AdjustmentType map { scalaxb.toXML[com.fedex.ship.stub.CodAdjustmentType](_, Some("http://fedex.com/ws/ship/v17"), Some("AdjustmentType"), __scope, false) } getOrElse {Nil},
        __obj.Electronic map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("Electronic"), __scope, false) } getOrElse {Nil},
        __obj.Barcodes map { scalaxb.toXML[com.fedex.ship.stub.PackageBarcodes](_, Some("http://fedex.com/ws/ship/v17"), Some("Barcodes"), __scope, false) } getOrElse {Nil},
        __obj.Label map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocument](_, Some("http://fedex.com/ws/ship/v17"), Some("Label"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCodReturnReferenceIndicatorTypeFormat = new DefaultStubCodReturnReferenceIndicatorTypeFormat {}
  trait DefaultStubCodReturnReferenceIndicatorTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CodReturnReferenceIndicatorType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CodReturnReferenceIndicatorType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CodReturnReferenceIndicatorType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CodReturnReferenceIndicatorType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CodReturnReferenceIndicatorType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCommercialInvoiceFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CommercialInvoice] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CommercialInvoice")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CommercialInvoice] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Comments")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TaxesOrMiscellaneousCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TaxesOrMiscellaneousChargeType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingCosts")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HandlingCosts")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeclarationStatement")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PaymentTerms")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Purpose")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerReferences")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OriginatorName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TermsOfSale")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      com.fedex.ship.stub.CommercialInvoice(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TaxesOrMiscellaneousChargeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PurposeOfShipmentType](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerReference](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CommercialInvoice, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Comments flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Comments"), __scope, false) },
        __obj.FreightCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightCharge"), __scope, false) } getOrElse {Nil},
        __obj.TaxesOrMiscellaneousCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TaxesOrMiscellaneousCharge"), __scope, false) } getOrElse {Nil},
        __obj.TaxesOrMiscellaneousChargeType map { scalaxb.toXML[com.fedex.ship.stub.TaxesOrMiscellaneousChargeType](_, Some("http://fedex.com/ws/ship/v17"), Some("TaxesOrMiscellaneousChargeType"), __scope, false) } getOrElse {Nil},
        __obj.PackingCosts map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingCosts"), __scope, false) } getOrElse {Nil},
        __obj.HandlingCosts map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("HandlingCosts"), __scope, false) } getOrElse {Nil},
        __obj.SpecialInstructions map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialInstructions"), __scope, false) } getOrElse {Nil},
        __obj.DeclarationStatement map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DeclarationStatement"), __scope, false) } getOrElse {Nil},
        __obj.PaymentTerms map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PaymentTerms"), __scope, false) } getOrElse {Nil},
        __obj.Purpose map { scalaxb.toXML[com.fedex.ship.stub.PurposeOfShipmentType](_, Some("http://fedex.com/ws/ship/v17"), Some("Purpose"), __scope, false) } getOrElse {Nil},
        __obj.CustomerReferences flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerReference](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerReferences"), __scope, false) },
        __obj.OriginatorName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("OriginatorName"), __scope, false) } getOrElse {Nil},
        __obj.TermsOfSale map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("TermsOfSale"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCommercialInvoiceDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CommercialInvoiceDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CommercialInvoiceDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CommercialInvoiceDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerImageUsages")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CommercialInvoiceDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerImageUsage](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CommercialInvoiceDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Format map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.CustomerImageUsages flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerImageUsage](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerImageUsages"), __scope, false) })

  }

  trait DefaultStubCommodityFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Commodity] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Commodity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Commodity] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NumberOfPieces")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CountryOfManufacture")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HarmonizedCode")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Weight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "QuantityUnits")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AdditionalMeasures")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UnitPrice")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomsValue")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExciseConditions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExportLicenseNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExportLicenseExpirationDate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CIMarksAndNumbers")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PartNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NaftaDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      com.fedex.ship.stub.Commodity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.Weight](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Measure](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EdtExciseCondition](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaCommodityDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Commodity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.NumberOfPieces, Some("http://fedex.com/ws/ship/v17"), Some("NumberOfPieces"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CountryOfManufacture, Some("http://fedex.com/ws/ship/v17"), Some("CountryOfManufacture"), __scope, false),
        __obj.HarmonizedCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("HarmonizedCode"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.Weight](__obj.Weight, Some("http://fedex.com/ws/ship/v17"), Some("Weight"), __scope, false),
        __obj.Quantity map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Quantity"), __scope, false) } getOrElse {Nil},
        __obj.QuantityUnits map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("QuantityUnits"), __scope, false) } getOrElse {Nil},
        __obj.AdditionalMeasures flatMap { scalaxb.toXML[com.fedex.ship.stub.Measure](_, Some("http://fedex.com/ws/ship/v17"), Some("AdditionalMeasures"), __scope, false) },
        __obj.UnitPrice map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("UnitPrice"), __scope, false) } getOrElse {Nil},
        __obj.CustomsValue map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomsValue"), __scope, false) } getOrElse {Nil},
        __obj.ExciseConditions flatMap { scalaxb.toXML[com.fedex.ship.stub.EdtExciseCondition](_, Some("http://fedex.com/ws/ship/v17"), Some("ExciseConditions"), __scope, false) },
        __obj.ExportLicenseNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ExportLicenseNumber"), __scope, false) } getOrElse {Nil},
        __obj.ExportLicenseExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("ExportLicenseExpirationDate"), __scope, false) } getOrElse {Nil},
        __obj.CIMarksAndNumbers map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CIMarksAndNumbers"), __scope, false) } getOrElse {Nil},
        __obj.PartNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PartNumber"), __scope, false) } getOrElse {Nil},
        __obj.NaftaDetail map { scalaxb.toXML[com.fedex.ship.stub.NaftaCommodityDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("NaftaDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCompletedCodDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedCodDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedCodDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedCodDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CollectionAmount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AdjustmentType")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CompletedCodDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodAdjustmentType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedCodDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CollectionAmount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("CollectionAmount"), __scope, false) } getOrElse {Nil},
        __obj.AdjustmentType map { scalaxb.toXML[com.fedex.ship.stub.CodAdjustmentType](_, Some("http://fedex.com/ws/ship/v17"), Some("AdjustmentType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCompletedEtdDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedEtdDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedEtdDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedEtdDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FolderId")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UploadDocumentReferenceDetails")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CompletedEtdDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.UploadDocumentReferenceDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedEtdDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.FolderId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FolderId"), __scope, false) } getOrElse {Nil},
        __obj.UploadDocumentReferenceDetails flatMap { scalaxb.toXML[com.fedex.ship.stub.UploadDocumentReferenceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("UploadDocumentReferenceDetails"), __scope, false) })

  }

  trait DefaultStubCompletedHazardousPackageDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedHazardousPackageDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedHazardousPackageDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedHazardousPackageDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReferenceId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Accessibility")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CargoAircraftOnly")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Regulation")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RadioactiveTransportIndex")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Containers")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.CompletedHazardousPackageDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsAccessibilityType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityRegulationType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RadioactiveLabelType](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ValidatedHazardousContainer](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedHazardousPackageDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ReferenceId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ReferenceId"), __scope, false) } getOrElse {Nil},
        __obj.Accessibility map { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsAccessibilityType](_, Some("http://fedex.com/ws/ship/v17"), Some("Accessibility"), __scope, false) } getOrElse {Nil},
        __obj.CargoAircraftOnly map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("CargoAircraftOnly"), __scope, false) } getOrElse {Nil},
        __obj.Regulation map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityRegulationType](_, Some("http://fedex.com/ws/ship/v17"), Some("Regulation"), __scope, false) } getOrElse {Nil},
        __obj.RadioactiveTransportIndex map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("RadioactiveTransportIndex"), __scope, false) } getOrElse {Nil},
        __obj.LabelType map { scalaxb.toXML[com.fedex.ship.stub.RadioactiveLabelType](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelType"), __scope, false) } getOrElse {Nil},
        __obj.Containers flatMap { scalaxb.toXML[com.fedex.ship.stub.ValidatedHazardousContainer](_, Some("http://fedex.com/ws/ship/v17"), Some("Containers"), __scope, false) })

  }

  trait DefaultStubCompletedHazardousShipmentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedHazardousShipmentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedHazardousShipmentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedHazardousShipmentDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousSummaryDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DryIceDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AdrLicense")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.CompletedHazardousShipmentDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedHazardousSummaryDetail](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentDryIceDetail](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.AdrLicenseDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedHazardousShipmentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.HazardousSummaryDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedHazardousSummaryDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousSummaryDetail"), __scope, false) } getOrElse {Nil},
        __obj.DryIceDetail map { scalaxb.toXML[com.fedex.ship.stub.ShipmentDryIceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DryIceDetail"), __scope, false) } getOrElse {Nil},
        __obj.AdrLicense map { scalaxb.toXML[com.fedex.ship.stub.AdrLicenseDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("AdrLicense"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCompletedHazardousSummaryDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedHazardousSummaryDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedHazardousSummaryDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedHazardousSummaryDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SmallQuantityExceptionPackageCount")) ^^
      { case p1 =>
      com.fedex.ship.stub.CompletedHazardousSummaryDetail(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedHazardousSummaryDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.SmallQuantityExceptionPackageCount map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("SmallQuantityExceptionPackageCount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCompletedHoldAtLocationDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedHoldAtLocationDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedHoldAtLocationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedHoldAtLocationDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HoldingLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HoldingLocationType")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CompletedHoldAtLocationDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ContactAndAddress](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FedExLocationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedHoldAtLocationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.HoldingLocation map { scalaxb.toXML[com.fedex.ship.stub.ContactAndAddress](_, Some("http://fedex.com/ws/ship/v17"), Some("HoldingLocation"), __scope, false) } getOrElse {Nil},
        __obj.HoldingLocationType map { scalaxb.toXML[com.fedex.ship.stub.FedExLocationType](_, Some("http://fedex.com/ws/ship/v17"), Some("HoldingLocationType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCompletedPackageDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedPackageDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedPackageDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedPackageDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SequenceNumber")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TrackingIds")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "GroupNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OversizeClass")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackageRating")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OperationalDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Label")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackageDocuments")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CodReturnDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SignatureOption")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DryIceWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousPackageDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      com.fedex.ship.stub.CompletedPackageDetail(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.TrackingId](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.OversizeClassType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PackageRating](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PackageOperationalDetail](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocument](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocument](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodReturnPackageDetail](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SignatureOptionType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedHazardousPackageDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedPackageDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SequenceNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("SequenceNumber"), __scope, false) } getOrElse {Nil},
        __obj.TrackingIds flatMap { scalaxb.toXML[com.fedex.ship.stub.TrackingId](_, Some("http://fedex.com/ws/ship/v17"), Some("TrackingIds"), __scope, false) },
        __obj.GroupNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("GroupNumber"), __scope, false) } getOrElse {Nil},
        __obj.OversizeClass map { scalaxb.toXML[com.fedex.ship.stub.OversizeClassType](_, Some("http://fedex.com/ws/ship/v17"), Some("OversizeClass"), __scope, false) } getOrElse {Nil},
        __obj.PackageRating map { scalaxb.toXML[com.fedex.ship.stub.PackageRating](_, Some("http://fedex.com/ws/ship/v17"), Some("PackageRating"), __scope, false) } getOrElse {Nil},
        __obj.OperationalDetail map { scalaxb.toXML[com.fedex.ship.stub.PackageOperationalDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("OperationalDetail"), __scope, false) } getOrElse {Nil},
        __obj.Label map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocument](_, Some("http://fedex.com/ws/ship/v17"), Some("Label"), __scope, false) } getOrElse {Nil},
        __obj.PackageDocuments flatMap { scalaxb.toXML[com.fedex.ship.stub.ShippingDocument](_, Some("http://fedex.com/ws/ship/v17"), Some("PackageDocuments"), __scope, false) },
        __obj.CodReturnDetail map { scalaxb.toXML[com.fedex.ship.stub.CodReturnPackageDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CodReturnDetail"), __scope, false) } getOrElse {Nil},
        __obj.SignatureOption map { scalaxb.toXML[com.fedex.ship.stub.SignatureOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("SignatureOption"), __scope, false) } getOrElse {Nil},
        __obj.DryIceWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("DryIceWeight"), __scope, false) } getOrElse {Nil},
        __obj.HazardousPackageDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedHazardousPackageDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousPackageDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCompletedShipmentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedShipmentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedShipmentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedShipmentDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UsDomestic")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CarrierCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MasterTrackingId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ServiceTypeDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackagingDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OperationalDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AccessDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TagDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SmartPostDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousShipmentDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipmentRating")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CompletedHoldAtLocationDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExportComplianceStatement")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CompletedEtdDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipmentDocuments")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AssociatedShipments")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CompletedCodDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CompletedPackageDetails")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      com.fedex.ship.stub.CompletedShipmentDetail(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CarrierCodeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TrackingId](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentOperationalDetail](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PendingShipmentAccessDetail](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedTagDetail](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedSmartPostDetail](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedHazardousShipmentDetail](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentRating](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedHoldAtLocationDetail](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedEtdDetail](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocument](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.AssociatedShipmentDetail](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedCodDetail](_, scalaxb.ElemName(node) :: stack) },
        p18.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CompletedPackageDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedShipmentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.UsDomestic map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("UsDomestic"), __scope, false) } getOrElse {Nil},
        __obj.CarrierCode map { scalaxb.toXML[com.fedex.ship.stub.CarrierCodeType](_, Some("http://fedex.com/ws/ship/v17"), Some("CarrierCode"), __scope, false) } getOrElse {Nil},
        __obj.MasterTrackingId map { scalaxb.toXML[com.fedex.ship.stub.TrackingId](_, Some("http://fedex.com/ws/ship/v17"), Some("MasterTrackingId"), __scope, false) } getOrElse {Nil},
        __obj.ServiceTypeDescription map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ServiceTypeDescription"), __scope, false) } getOrElse {Nil},
        __obj.PackagingDescription map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PackagingDescription"), __scope, false) } getOrElse {Nil},
        __obj.OperationalDetail map { scalaxb.toXML[com.fedex.ship.stub.ShipmentOperationalDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("OperationalDetail"), __scope, false) } getOrElse {Nil},
        __obj.AccessDetail map { scalaxb.toXML[com.fedex.ship.stub.PendingShipmentAccessDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("AccessDetail"), __scope, false) } getOrElse {Nil},
        __obj.TagDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedTagDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TagDetail"), __scope, false) } getOrElse {Nil},
        __obj.SmartPostDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedSmartPostDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("SmartPostDetail"), __scope, false) } getOrElse {Nil},
        __obj.HazardousShipmentDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedHazardousShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousShipmentDetail"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentRating map { scalaxb.toXML[com.fedex.ship.stub.ShipmentRating](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipmentRating"), __scope, false) } getOrElse {Nil},
        __obj.CompletedHoldAtLocationDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedHoldAtLocationDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CompletedHoldAtLocationDetail"), __scope, false) } getOrElse {Nil},
        __obj.ExportComplianceStatement map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ExportComplianceStatement"), __scope, false) } getOrElse {Nil},
        __obj.CompletedEtdDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedEtdDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CompletedEtdDetail"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentDocuments flatMap { scalaxb.toXML[com.fedex.ship.stub.ShippingDocument](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipmentDocuments"), __scope, false) },
        __obj.AssociatedShipments flatMap { scalaxb.toXML[com.fedex.ship.stub.AssociatedShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("AssociatedShipments"), __scope, false) },
        __obj.CompletedCodDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedCodDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CompletedCodDetail"), __scope, false) } getOrElse {Nil},
        __obj.CompletedPackageDetails flatMap { scalaxb.toXML[com.fedex.ship.stub.CompletedPackageDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CompletedPackageDetails"), __scope, false) })

  }

  trait DefaultStubCompletedSmartPostDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedSmartPostDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedSmartPostDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedSmartPostDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PickUpCarrier")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Machinable")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CompletedSmartPostDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CarrierCodeType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedSmartPostDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PickUpCarrier map { scalaxb.toXML[com.fedex.ship.stub.CarrierCodeType](_, Some("http://fedex.com/ws/ship/v17"), Some("PickUpCarrier"), __scope, false) } getOrElse {Nil},
        __obj.Machinable map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("Machinable"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCompletedTagDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CompletedTagDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CompletedTagDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CompletedTagDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ConfirmationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AccessTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CutoffTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Location")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeliveryCommitment")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DispatchDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.fedex.ship.stub.CompletedTagDetail(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.Duration](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CompletedTagDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ConfirmationNumber, Some("http://fedex.com/ws/ship/v17"), Some("ConfirmationNumber"), __scope, false),
        __obj.AccessTime map { scalaxb.toXML[javax.xml.datatype.Duration](_, Some("http://fedex.com/ws/ship/v17"), Some("AccessTime"), __scope, false) } getOrElse {Nil},
        __obj.CutoffTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("CutoffTime"), __scope, false) } getOrElse {Nil},
        __obj.Location map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Location"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryCommitment map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("DeliveryCommitment"), __scope, false) } getOrElse {Nil},
        __obj.DispatchDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("DispatchDate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubConfigurableLabelReferenceEntryFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ConfigurableLabelReferenceEntry] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ConfigurableLabelReferenceEntry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ConfigurableLabelReferenceEntry] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ZoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Header")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DataField")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LiteralValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.ConfigurableLabelReferenceEntry(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ConfigurableLabelReferenceEntry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.ZoneNumber, Some("http://fedex.com/ws/ship/v17"), Some("ZoneNumber"), __scope, false),
        __obj.Header map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Header"), __scope, false) } getOrElse {Nil},
        __obj.DataField map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DataField"), __scope, false) } getOrElse {Nil},
        __obj.LiteralValue map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LiteralValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubContactFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Contact] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Contact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Contact] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ContactId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PersonName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Title")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CompanyName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PhoneExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TollFreePhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PagerNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FaxNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EMailAddress")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.fedex.ship.stub.Contact(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Contact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ContactId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ContactId"), __scope, false) } getOrElse {Nil},
        __obj.PersonName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PersonName"), __scope, false) } getOrElse {Nil},
        __obj.Title map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Title"), __scope, false) } getOrElse {Nil},
        __obj.CompanyName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CompanyName"), __scope, false) } getOrElse {Nil},
        __obj.PhoneNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PhoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.PhoneExtension map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PhoneExtension"), __scope, false) } getOrElse {Nil},
        __obj.TollFreePhoneNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("TollFreePhoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.PagerNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PagerNumber"), __scope, false) } getOrElse {Nil},
        __obj.FaxNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FaxNumber"), __scope, false) } getOrElse {Nil},
        __obj.EMailAddress map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("EMailAddress"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubContactAndAddressFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ContactAndAddress] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ContactAndAddress")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ContactAndAddress] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Contact")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Address")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ContactAndAddress(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Contact](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Address](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ContactAndAddress, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Contact map { scalaxb.toXML[com.fedex.ship.stub.Contact](_, Some("http://fedex.com/ws/ship/v17"), Some("Contact"), __scope, false) } getOrElse {Nil},
        __obj.Address map { scalaxb.toXML[com.fedex.ship.stub.Address](_, Some("http://fedex.com/ws/ship/v17"), Some("Address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubContentRecordFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ContentRecord] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ContentRecord")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ContentRecord] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PartNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ItemNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReceivedQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.ContentRecord(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ContentRecord, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PartNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PartNumber"), __scope, false) } getOrElse {Nil},
        __obj.ItemNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ItemNumber"), __scope, false) } getOrElse {Nil},
        __obj.ReceivedQuantity map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("ReceivedQuantity"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCurrencyExchangeRateFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CurrencyExchangeRate] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CurrencyExchangeRate")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CurrencyExchangeRate] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FromCurrency")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "IntoCurrency")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Rate")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.CurrencyExchangeRate(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CurrencyExchangeRate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.FromCurrency map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FromCurrency"), __scope, false) } getOrElse {Nil},
        __obj.IntoCurrency map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("IntoCurrency"), __scope, false) } getOrElse {Nil},
        __obj.Rate map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Rate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCustomDeliveryWindowDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomDeliveryWindowDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomDeliveryWindowDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomDeliveryWindowDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestRange")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.CustomDeliveryWindowDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomDeliveryWindowType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DateRange](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomDeliveryWindowDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.CustomDeliveryWindowType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.RequestTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("RequestTime"), __scope, false) } getOrElse {Nil},
        __obj.RequestRange map { scalaxb.toXML[com.fedex.ship.stub.DateRange](_, Some("http://fedex.com/ws/ship/v17"), Some("RequestRange"), __scope, false) } getOrElse {Nil},
        __obj.RequestDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("RequestDate"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCustomDeliveryWindowTypeFormat = new DefaultStubCustomDeliveryWindowTypeFormat {}
  trait DefaultStubCustomDeliveryWindowTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomDeliveryWindowType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomDeliveryWindowType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomDeliveryWindowType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomDeliveryWindowType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomDeliveryWindowType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCustomDocumentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomDocumentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomDocumentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomDocumentDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelPrintingOrientation")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelRotation")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecificationId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomDocumentIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocTabContent")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomContent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.CustomDocumentDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LabelPrintingOrientationType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LabelRotationType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DocTabContent](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomDocumentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Format map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.LabelPrintingOrientation map { scalaxb.toXML[com.fedex.ship.stub.LabelPrintingOrientationType](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelPrintingOrientation"), __scope, false) } getOrElse {Nil},
        __obj.LabelRotation map { scalaxb.toXML[com.fedex.ship.stub.LabelRotationType](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelRotation"), __scope, false) } getOrElse {Nil},
        __obj.SpecificationId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecificationId"), __scope, false) } getOrElse {Nil},
        __obj.CustomDocumentIdentifier map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomDocumentIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.DocTabContent map { scalaxb.toXML[com.fedex.ship.stub.DocTabContent](_, Some("http://fedex.com/ws/ship/v17"), Some("DocTabContent"), __scope, false) } getOrElse {Nil},
        __obj.CustomContent map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomContent"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCustomLabelBarcodeEntryFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomLabelBarcodeEntry] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomLabelBarcodeEntry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomLabelBarcodeEntry] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Position")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DataFields")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BarHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ThinBarWidth")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BarcodeSymbology")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.fedex.ship.stub.CustomLabelBarcodeEntry(scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.BarcodeSymbologyType](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomLabelBarcodeEntry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](__obj.Position, Some("http://fedex.com/ws/ship/v17"), Some("Position"), __scope, false),
        __obj.Format map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.DataFields flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DataFields"), __scope, false) },
        __obj.BarHeight map { scalaxb.toXML[Int](_, Some("http://fedex.com/ws/ship/v17"), Some("BarHeight"), __scope, false) } getOrElse {Nil},
        __obj.ThinBarWidth map { scalaxb.toXML[Int](_, Some("http://fedex.com/ws/ship/v17"), Some("ThinBarWidth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.BarcodeSymbologyType](__obj.BarcodeSymbology, Some("http://fedex.com/ws/ship/v17"), Some("BarcodeSymbology"), __scope, false))

  }

  trait DefaultStubCustomLabelBoxEntryFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomLabelBoxEntry] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomLabelBoxEntry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomLabelBoxEntry] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TopLeftCorner")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BottomRightCorner")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CustomLabelBoxEntry(scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomLabelBoxEntry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](__obj.TopLeftCorner, Some("http://fedex.com/ws/ship/v17"), Some("TopLeftCorner"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](__obj.BottomRightCorner, Some("http://fedex.com/ws/ship/v17"), Some("BottomRightCorner"), __scope, false))

  }

  def buildStubCustomLabelCoordinateUnitsFormat = new DefaultStubCustomLabelCoordinateUnitsFormat {}
  trait DefaultStubCustomLabelCoordinateUnitsFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomLabelCoordinateUnits] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomLabelCoordinateUnits] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomLabelCoordinateUnits.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomLabelCoordinateUnits.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomLabelCoordinateUnits, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCustomLabelDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomLabelDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomLabelDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomLabelDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CoordinateUnits")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TextEntries")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "GraphicEntries")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BoxEntries")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TextBoxEntries")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BarcodeEntries")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.fedex.ship.stub.CustomLabelDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelCoordinateUnits](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelTextEntry](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelGraphicEntry](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelBoxEntry](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelTextBoxEntry](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelBarcodeEntry](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomLabelDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CoordinateUnits map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelCoordinateUnits](_, Some("http://fedex.com/ws/ship/v17"), Some("CoordinateUnits"), __scope, false) } getOrElse {Nil},
        __obj.TextEntries flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomLabelTextEntry](_, Some("http://fedex.com/ws/ship/v17"), Some("TextEntries"), __scope, false) },
        __obj.GraphicEntries flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomLabelGraphicEntry](_, Some("http://fedex.com/ws/ship/v17"), Some("GraphicEntries"), __scope, false) },
        __obj.BoxEntries flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomLabelBoxEntry](_, Some("http://fedex.com/ws/ship/v17"), Some("BoxEntries"), __scope, false) },
        __obj.TextBoxEntries flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomLabelTextBoxEntry](_, Some("http://fedex.com/ws/ship/v17"), Some("TextBoxEntries"), __scope, false) },
        __obj.BarcodeEntries flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomLabelBarcodeEntry](_, Some("http://fedex.com/ws/ship/v17"), Some("BarcodeEntries"), __scope, false) })

  }

  trait DefaultStubCustomLabelGraphicEntryFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomLabelGraphicEntry] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomLabelGraphicEntry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomLabelGraphicEntry] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Position")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PrinterGraphicId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FileGraphicFullName")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.CustomLabelGraphicEntry(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomLabelGraphicEntry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Position map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](_, Some("http://fedex.com/ws/ship/v17"), Some("Position"), __scope, false) } getOrElse {Nil},
        __obj.PrinterGraphicId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PrinterGraphicId"), __scope, false) } getOrElse {Nil},
        __obj.FileGraphicFullName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FileGraphicFullName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCustomLabelPositionFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomLabelPosition] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomLabelPosition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomLabelPosition] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "X")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Y")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CustomLabelPosition(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomLabelPosition, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.X, Some("http://fedex.com/ws/ship/v17"), Some("X"), __scope, false),
        scalaxb.toXML[Int](__obj.Y, Some("http://fedex.com/ws/ship/v17"), Some("Y"), __scope, false))

  }

  trait DefaultStubCustomLabelTextBoxEntryFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomLabelTextBoxEntry] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomLabelTextBoxEntry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomLabelTextBoxEntry] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TopLeftCorner")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BottomRightCorner")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Position")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DataFields")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ThermalFontId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FontName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FontSize")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Rotation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.fedex.ship.stub.CustomLabelTextBoxEntry(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomLabelTextBoxEntry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TopLeftCorner map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](_, Some("http://fedex.com/ws/ship/v17"), Some("TopLeftCorner"), __scope, false) } getOrElse {Nil},
        __obj.BottomRightCorner map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](_, Some("http://fedex.com/ws/ship/v17"), Some("BottomRightCorner"), __scope, false) } getOrElse {Nil},
        __obj.Position map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](_, Some("http://fedex.com/ws/ship/v17"), Some("Position"), __scope, false) } getOrElse {Nil},
        __obj.Format map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.DataFields flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DataFields"), __scope, false) },
        __obj.ThermalFontId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ThermalFontId"), __scope, false) } getOrElse {Nil},
        __obj.FontName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FontName"), __scope, false) } getOrElse {Nil},
        __obj.FontSize map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("FontSize"), __scope, false) } getOrElse {Nil},
        __obj.Rotation map { scalaxb.toXML[com.fedex.ship.stub.RotationType](_, Some("http://fedex.com/ws/ship/v17"), Some("Rotation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCustomLabelTextEntryFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomLabelTextEntry] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomLabelTextEntry")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomLabelTextEntry] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Position")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DataFields")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ThermalFontId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FontName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FontSize")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Rotation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.CustomLabelTextEntry(scalaxb.fromXML[com.fedex.ship.stub.CustomLabelPosition](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RotationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomLabelTextEntry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.CustomLabelPosition](__obj.Position, Some("http://fedex.com/ws/ship/v17"), Some("Position"), __scope, false),
        __obj.Format map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.DataFields flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DataFields"), __scope, false) },
        __obj.ThermalFontId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ThermalFontId"), __scope, false) } getOrElse {Nil},
        __obj.FontName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FontName"), __scope, false) } getOrElse {Nil},
        __obj.FontSize map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("FontSize"), __scope, false) } getOrElse {Nil},
        __obj.Rotation map { scalaxb.toXML[com.fedex.ship.stub.RotationType](_, Some("http://fedex.com/ws/ship/v17"), Some("Rotation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCustomerImageUsageFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomerImageUsage] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomerImageUsage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomerImageUsage] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Id")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CustomerImageUsage(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomerImageUsageType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ImageId](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomerImageUsage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.CustomerImageUsageType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Id map { scalaxb.toXML[com.fedex.ship.stub.ImageId](_, Some("http://fedex.com/ws/ship/v17"), Some("Id"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCustomerImageUsageTypeFormat = new DefaultStubCustomerImageUsageTypeFormat {}
  trait DefaultStubCustomerImageUsageTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomerImageUsageType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomerImageUsageType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomerImageUsageType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomerImageUsageType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomerImageUsageType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCustomerReferenceFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomerReference] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomerReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomerReference] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerReferenceType")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CustomerReference(scalaxb.fromXML[com.fedex.ship.stub.CustomerReferenceType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomerReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.CustomerReferenceType](__obj.CustomerReferenceType, Some("http://fedex.com/ws/ship/v17"), Some("CustomerReferenceType"), __scope, false),
        scalaxb.toXML[String](__obj.Value, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false))

  }

  def buildStubCustomerReferenceTypeFormat = new DefaultStubCustomerReferenceTypeFormat {}
  trait DefaultStubCustomerReferenceTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomerReferenceType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomerReferenceType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomerReferenceType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomerReferenceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomerReferenceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCustomerSpecifiedLabelDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomerSpecifiedLabelDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomerSpecifiedLabelDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomerSpecifiedLabelDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocTabContent")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomContentPosition")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomContent")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ConfigurableReferenceEntries")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MaskedData")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SecondaryBarcode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TermsAndConditionsLocalization")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RegulatoryLabels")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AdditionalLabels")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AirWaybillSuppressionCount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      com.fedex.ship.stub.CustomerSpecifiedLabelDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DocTabContent](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RelativeVerticalPositionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ConfigurableLabelReferenceEntry](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.LabelMaskableDataType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SecondaryBarcodeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Localization](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RegulatoryLabelContentDetail](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.AdditionalLabelsDetail](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomerSpecifiedLabelDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DocTabContent map { scalaxb.toXML[com.fedex.ship.stub.DocTabContent](_, Some("http://fedex.com/ws/ship/v17"), Some("DocTabContent"), __scope, false) } getOrElse {Nil},
        __obj.CustomContentPosition map { scalaxb.toXML[com.fedex.ship.stub.RelativeVerticalPositionType](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomContentPosition"), __scope, false) } getOrElse {Nil},
        __obj.CustomContent map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomContent"), __scope, false) } getOrElse {Nil},
        __obj.ConfigurableReferenceEntries flatMap { scalaxb.toXML[com.fedex.ship.stub.ConfigurableLabelReferenceEntry](_, Some("http://fedex.com/ws/ship/v17"), Some("ConfigurableReferenceEntries"), __scope, false) },
        __obj.MaskedData flatMap { scalaxb.toXML[com.fedex.ship.stub.LabelMaskableDataType](_, Some("http://fedex.com/ws/ship/v17"), Some("MaskedData"), __scope, false) },
        __obj.SecondaryBarcode map { scalaxb.toXML[com.fedex.ship.stub.SecondaryBarcodeType](_, Some("http://fedex.com/ws/ship/v17"), Some("SecondaryBarcode"), __scope, false) } getOrElse {Nil},
        __obj.TermsAndConditionsLocalization map { scalaxb.toXML[com.fedex.ship.stub.Localization](_, Some("http://fedex.com/ws/ship/v17"), Some("TermsAndConditionsLocalization"), __scope, false) } getOrElse {Nil},
        __obj.RegulatoryLabels flatMap { scalaxb.toXML[com.fedex.ship.stub.RegulatoryLabelContentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("RegulatoryLabels"), __scope, false) },
        __obj.AdditionalLabels flatMap { scalaxb.toXML[com.fedex.ship.stub.AdditionalLabelsDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("AdditionalLabels"), __scope, false) },
        __obj.AirWaybillSuppressionCount map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("AirWaybillSuppressionCount"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCustomerSpecifiedLabelGenerationOptionTypeFormat = new DefaultStubCustomerSpecifiedLabelGenerationOptionTypeFormat {}
  trait DefaultStubCustomerSpecifiedLabelGenerationOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCustomsClearanceDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomsClearanceDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomsClearanceDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomsClearanceDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Brokers")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClearanceBrokerage")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomsOptions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ImporterOfRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RecipientCustomsId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DutiesPayment")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentContent")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomsValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightOnValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "InsuranceCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PartiesToTransactionAreRelated")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CommercialInvoice")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Commodities")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExportDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RegulatoryControls")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeclarationStatementDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      com.fedex.ship.stub.CustomsClearanceDetail(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.BrokerDetail](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ClearanceBrokerageType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomsOptionDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RecipientCustomsId](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Payment](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.InternationalDocumentContentType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightOnValueType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CommercialInvoice](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Commodity](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ExportDetail](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RegulatoryControlType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomsDeclarationStatementDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomsClearanceDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Brokers flatMap { scalaxb.toXML[com.fedex.ship.stub.BrokerDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Brokers"), __scope, false) },
        __obj.ClearanceBrokerage map { scalaxb.toXML[com.fedex.ship.stub.ClearanceBrokerageType](_, Some("http://fedex.com/ws/ship/v17"), Some("ClearanceBrokerage"), __scope, false) } getOrElse {Nil},
        __obj.CustomsOptions map { scalaxb.toXML[com.fedex.ship.stub.CustomsOptionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomsOptions"), __scope, false) } getOrElse {Nil},
        __obj.ImporterOfRecord map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("ImporterOfRecord"), __scope, false) } getOrElse {Nil},
        __obj.RecipientCustomsId map { scalaxb.toXML[com.fedex.ship.stub.RecipientCustomsId](_, Some("http://fedex.com/ws/ship/v17"), Some("RecipientCustomsId"), __scope, false) } getOrElse {Nil},
        __obj.DutiesPayment map { scalaxb.toXML[com.fedex.ship.stub.Payment](_, Some("http://fedex.com/ws/ship/v17"), Some("DutiesPayment"), __scope, false) } getOrElse {Nil},
        __obj.DocumentContent map { scalaxb.toXML[com.fedex.ship.stub.InternationalDocumentContentType](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentContent"), __scope, false) } getOrElse {Nil},
        __obj.CustomsValue map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomsValue"), __scope, false) } getOrElse {Nil},
        __obj.FreightOnValue map { scalaxb.toXML[com.fedex.ship.stub.FreightOnValueType](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightOnValue"), __scope, false) } getOrElse {Nil},
        __obj.InsuranceCharges map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("InsuranceCharges"), __scope, false) } getOrElse {Nil},
        __obj.PartiesToTransactionAreRelated map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("PartiesToTransactionAreRelated"), __scope, false) } getOrElse {Nil},
        __obj.CommercialInvoice map { scalaxb.toXML[com.fedex.ship.stub.CommercialInvoice](_, Some("http://fedex.com/ws/ship/v17"), Some("CommercialInvoice"), __scope, false) } getOrElse {Nil},
        __obj.Commodities flatMap { scalaxb.toXML[com.fedex.ship.stub.Commodity](_, Some("http://fedex.com/ws/ship/v17"), Some("Commodities"), __scope, false) },
        __obj.ExportDetail map { scalaxb.toXML[com.fedex.ship.stub.ExportDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ExportDetail"), __scope, false) } getOrElse {Nil},
        __obj.RegulatoryControls flatMap { scalaxb.toXML[com.fedex.ship.stub.RegulatoryControlType](_, Some("http://fedex.com/ws/ship/v17"), Some("RegulatoryControls"), __scope, false) },
        __obj.DeclarationStatementDetail map { scalaxb.toXML[com.fedex.ship.stub.CustomsDeclarationStatementDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DeclarationStatementDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubCustomsDeclarationStatementDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomsDeclarationStatementDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomsDeclarationStatementDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomsDeclarationStatementDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Types")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NaftaLowValueStatementDetail")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CustomsDeclarationStatementDetail(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomsDeclarationStatementType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaLowValueStatementDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomsDeclarationStatementDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Types flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomsDeclarationStatementType](_, Some("http://fedex.com/ws/ship/v17"), Some("Types"), __scope, false) },
        __obj.NaftaLowValueStatementDetail map { scalaxb.toXML[com.fedex.ship.stub.NaftaLowValueStatementDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("NaftaLowValueStatementDetail"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCustomsDeclarationStatementTypeFormat = new DefaultStubCustomsDeclarationStatementTypeFormat {}
  trait DefaultStubCustomsDeclarationStatementTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomsDeclarationStatementType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomsDeclarationStatementType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomsDeclarationStatementType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomsDeclarationStatementType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomsDeclarationStatementType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubCustomsOptionDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.CustomsOptionDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("CustomsOptionDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.CustomsOptionDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.CustomsOptionDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomsOptionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.CustomsOptionDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.CustomsOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  def buildStubCustomsOptionTypeFormat = new DefaultStubCustomsOptionTypeFormat {}
  trait DefaultStubCustomsOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomsOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomsOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomsOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomsOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomsOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubCustomsRoleTypeFormat = new DefaultStubCustomsRoleTypeFormat {}
  trait DefaultStubCustomsRoleTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.CustomsRoleType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.CustomsRoleType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.CustomsRoleType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.CustomsRoleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.CustomsRoleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubDangerousGoodsAccessibilityTypeFormat = new DefaultStubDangerousGoodsAccessibilityTypeFormat {}
  trait DefaultStubDangerousGoodsAccessibilityTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsAccessibilityType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DangerousGoodsAccessibilityType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DangerousGoodsAccessibilityType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DangerousGoodsAccessibilityType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DangerousGoodsAccessibilityType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDangerousGoodsContainerFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DangerousGoodsContainer] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DangerousGoodsContainer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DangerousGoodsContainer] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ContainerType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RadioactiveContainerClass")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NumberOfContainers")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousCommodities")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.DangerousGoodsContainer(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousContainerPackingType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RadioactiveContainerClassType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityContent](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DangerousGoodsContainer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PackingType map { scalaxb.toXML[com.fedex.ship.stub.HazardousContainerPackingType](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingType"), __scope, false) } getOrElse {Nil},
        __obj.ContainerType map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ContainerType"), __scope, false) } getOrElse {Nil},
        __obj.RadioactiveContainerClass map { scalaxb.toXML[com.fedex.ship.stub.RadioactiveContainerClassType](_, Some("http://fedex.com/ws/ship/v17"), Some("RadioactiveContainerClass"), __scope, false) } getOrElse {Nil},
        __obj.NumberOfContainers map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("NumberOfContainers"), __scope, false) } getOrElse {Nil},
        __obj.HazardousCommodities flatMap { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityContent](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousCommodities"), __scope, false) })

  }

  trait DefaultStubDangerousGoodsDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DangerousGoodsDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DangerousGoodsDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DangerousGoodsDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Regulation")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Accessibility")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CargoAircraftOnly")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Options")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingOption")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReferenceId")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Containers")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Packaging")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Signatory")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EmergencyContactNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Offeror")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "InfectiousSubstanceResponsibleContact")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AdditionalHandling")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RadioactivityDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      com.fedex.ship.stub.DangerousGoodsDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityRegulationType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsAccessibilityType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityOptionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsPackingOptionType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsContainer](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityPackagingDetail](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsSignatory](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Contact](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RadioactivityDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DangerousGoodsDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Regulation map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityRegulationType](_, Some("http://fedex.com/ws/ship/v17"), Some("Regulation"), __scope, false) } getOrElse {Nil},
        __obj.Accessibility map { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsAccessibilityType](_, Some("http://fedex.com/ws/ship/v17"), Some("Accessibility"), __scope, false) } getOrElse {Nil},
        __obj.CargoAircraftOnly map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("CargoAircraftOnly"), __scope, false) } getOrElse {Nil},
        __obj.Options flatMap { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("Options"), __scope, false) },
        __obj.PackingOption map { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsPackingOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingOption"), __scope, false) } getOrElse {Nil},
        __obj.ReferenceId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ReferenceId"), __scope, false) } getOrElse {Nil},
        __obj.Containers flatMap { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsContainer](_, Some("http://fedex.com/ws/ship/v17"), Some("Containers"), __scope, false) },
        __obj.Packaging map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityPackagingDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Packaging"), __scope, false) } getOrElse {Nil},
        __obj.Signatory map { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsSignatory](_, Some("http://fedex.com/ws/ship/v17"), Some("Signatory"), __scope, false) } getOrElse {Nil},
        __obj.EmergencyContactNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("EmergencyContactNumber"), __scope, false) } getOrElse {Nil},
        __obj.Offeror map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Offeror"), __scope, false) } getOrElse {Nil},
        __obj.InfectiousSubstanceResponsibleContact map { scalaxb.toXML[com.fedex.ship.stub.Contact](_, Some("http://fedex.com/ws/ship/v17"), Some("InfectiousSubstanceResponsibleContact"), __scope, false) } getOrElse {Nil},
        __obj.AdditionalHandling map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("AdditionalHandling"), __scope, false) } getOrElse {Nil},
        __obj.RadioactivityDetail map { scalaxb.toXML[com.fedex.ship.stub.RadioactivityDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("RadioactivityDetail"), __scope, false) } getOrElse {Nil})

  }

  def buildStubDangerousGoodsPackingOptionTypeFormat = new DefaultStubDangerousGoodsPackingOptionTypeFormat {}
  trait DefaultStubDangerousGoodsPackingOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DangerousGoodsPackingOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DangerousGoodsPackingOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DangerousGoodsPackingOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DangerousGoodsPackingOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DangerousGoodsPackingOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDangerousGoodsShippersDeclarationDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DangerousGoodsShippersDeclarationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerImageUsages")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerImageUsage](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Format map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.CustomerImageUsages flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerImageUsage](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerImageUsages"), __scope, false) })

  }

  trait DefaultStubDangerousGoodsSignatoryFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DangerousGoodsSignatory] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DangerousGoodsSignatory")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DangerousGoodsSignatory] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ContactName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Title")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Place")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.DangerousGoodsSignatory(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DangerousGoodsSignatory, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ContactName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ContactName"), __scope, false) } getOrElse {Nil},
        __obj.Title map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Title"), __scope, false) } getOrElse {Nil},
        __obj.Place map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Place"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubDateRangeFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DateRange] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DateRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DateRange] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Begins")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Ends")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.DateRange(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DateRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Begins map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("Begins"), __scope, false) } getOrElse {Nil},
        __obj.Ends map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("Ends"), __scope, false) } getOrElse {Nil})

  }

  def buildStubDayOfWeekTypeFormat = new DefaultStubDayOfWeekTypeFormat {}
  trait DefaultStubDayOfWeekTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DayOfWeekType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DayOfWeekType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DayOfWeekType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DayOfWeekType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DayOfWeekType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDeleteShipmentRequestFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DeleteShipmentRequest] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DeleteShipmentRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DeleteShipmentRequest] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "WebAuthenticationDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClientDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipTimestamp")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TrackingId")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeletionControl")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.DeleteShipmentRequest(scalaxb.fromXML[com.fedex.ship.stub.WebAuthenticationDetail](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.ClientDetail](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TrackingId](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.DeletionControlType](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DeleteShipmentRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.WebAuthenticationDetail](__obj.WebAuthenticationDetail, Some("http://fedex.com/ws/ship/v17"), Some("WebAuthenticationDetail"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.ClientDetail](__obj.ClientDetail, Some("http://fedex.com/ws/ship/v17"), Some("ClientDetail"), __scope, false),
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false),
        __obj.ShipTimestamp map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipTimestamp"), __scope, false) } getOrElse {Nil},
        __obj.TrackingId map { scalaxb.toXML[com.fedex.ship.stub.TrackingId](_, Some("http://fedex.com/ws/ship/v17"), Some("TrackingId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.DeletionControlType](__obj.DeletionControl, Some("http://fedex.com/ws/ship/v17"), Some("DeletionControl"), __scope, false))

  }

  trait DefaultStubDeleteTagRequestFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DeleteTagRequest] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DeleteTagRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DeleteTagRequest] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "WebAuthenticationDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClientDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DispatchLocationId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DispatchDate")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Payment")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ConfirmationNumber")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.fedex.ship.stub.DeleteTagRequest(scalaxb.fromXML[com.fedex.ship.stub.WebAuthenticationDetail](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.ClientDetail](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.Payment](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DeleteTagRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.WebAuthenticationDetail](__obj.WebAuthenticationDetail, Some("http://fedex.com/ws/ship/v17"), Some("WebAuthenticationDetail"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.ClientDetail](__obj.ClientDetail, Some("http://fedex.com/ws/ship/v17"), Some("ClientDetail"), __scope, false),
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false),
        __obj.DispatchLocationId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DispatchLocationId"), __scope, false) } getOrElse {Nil},
        __obj.DispatchDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("DispatchDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.Payment](__obj.Payment, Some("http://fedex.com/ws/ship/v17"), Some("Payment"), __scope, false),
        scalaxb.toXML[String](__obj.ConfirmationNumber, Some("http://fedex.com/ws/ship/v17"), Some("ConfirmationNumber"), __scope, false))

  }

  def buildStubDeletionControlTypeFormat = new DefaultStubDeletionControlTypeFormat {}
  trait DefaultStubDeletionControlTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DeletionControlType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DeletionControlType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DeletionControlType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DeletionControlType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DeletionControlType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDeliveryOnInvoiceAcceptanceDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DeliveryOnInvoiceAcceptanceDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Recipient")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TrackingId")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TrackingId](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Recipient map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("Recipient"), __scope, false) } getOrElse {Nil},
        __obj.TrackingId map { scalaxb.toXML[com.fedex.ship.stub.TrackingId](_, Some("http://fedex.com/ws/ship/v17"), Some("TrackingId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubDestinationControlDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DestinationControlDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DestinationControlDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DestinationControlDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "StatementTypes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DestinationCountries")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EndUser")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.DestinationControlDetail(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.DestinationControlStatementType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DestinationControlDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.StatementTypes flatMap { scalaxb.toXML[com.fedex.ship.stub.DestinationControlStatementType](_, Some("http://fedex.com/ws/ship/v17"), Some("StatementTypes"), __scope, false) },
        __obj.DestinationCountries map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DestinationCountries"), __scope, false) } getOrElse {Nil},
        __obj.EndUser map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("EndUser"), __scope, false) } getOrElse {Nil})

  }

  def buildStubDestinationControlStatementTypeFormat = new DefaultStubDestinationControlStatementTypeFormat {}
  trait DefaultStubDestinationControlStatementTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DestinationControlStatementType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DestinationControlStatementType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DestinationControlStatementType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DestinationControlStatementType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DestinationControlStatementType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDimensionsFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Dimensions] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Dimensions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Dimensions] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Length")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Width")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Height")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.Dimensions(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.LinearUnits](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Dimensions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.Length, Some("http://fedex.com/ws/ship/v17"), Some("Length"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Width, Some("http://fedex.com/ws/ship/v17"), Some("Width"), __scope, false),
        scalaxb.toXML[BigInt](__obj.Height, Some("http://fedex.com/ws/ship/v17"), Some("Height"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.LinearUnits](__obj.Units, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false))

  }

  trait DefaultStubDocTabContentFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DocTabContent] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DocTabContent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DocTabContent] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocTabContentType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Zone001")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Barcoded")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.DocTabContent(scalaxb.fromXML[com.fedex.ship.stub.DocTabContentType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DocTabContentZone001](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DocTabContentBarcoded](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DocTabContent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.DocTabContentType](__obj.DocTabContentType, Some("http://fedex.com/ws/ship/v17"), Some("DocTabContentType"), __scope, false),
        __obj.Zone001 map { scalaxb.toXML[com.fedex.ship.stub.DocTabContentZone001](_, Some("http://fedex.com/ws/ship/v17"), Some("Zone001"), __scope, false) } getOrElse {Nil},
        __obj.Barcoded map { scalaxb.toXML[com.fedex.ship.stub.DocTabContentBarcoded](_, Some("http://fedex.com/ws/ship/v17"), Some("Barcoded"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubDocTabContentBarcodedFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DocTabContentBarcoded] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DocTabContentBarcoded")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DocTabContentBarcoded] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Symbology")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Specification")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.DocTabContentBarcoded(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.BarcodeSymbologyType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.DocTabZoneSpecification](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DocTabContentBarcoded, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Symbology map { scalaxb.toXML[com.fedex.ship.stub.BarcodeSymbologyType](_, Some("http://fedex.com/ws/ship/v17"), Some("Symbology"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.DocTabZoneSpecification](__obj.Specification, Some("http://fedex.com/ws/ship/v17"), Some("Specification"), __scope, false))

  }

  def buildStubDocTabContentTypeFormat = new DefaultStubDocTabContentTypeFormat {}
  trait DefaultStubDocTabContentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DocTabContentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DocTabContentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DocTabContentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DocTabContentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DocTabContentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDocTabContentZone001Format extends scalaxb.ElemNameParser[com.fedex.ship.stub.DocTabContentZone001] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DocTabContentZone001")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DocTabContentZone001] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocTabZoneSpecifications")) ^^
      { case p1 =>
      com.fedex.ship.stub.DocTabContentZone001(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.DocTabZoneSpecification](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DocTabContentZone001, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DocTabZoneSpecifications flatMap { scalaxb.toXML[com.fedex.ship.stub.DocTabZoneSpecification](_, Some("http://fedex.com/ws/ship/v17"), Some("DocTabZoneSpecifications"), __scope, false) })

  }

  def buildStubDocTabZoneJustificationTypeFormat = new DefaultStubDocTabZoneJustificationTypeFormat {}
  trait DefaultStubDocTabZoneJustificationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DocTabZoneJustificationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DocTabZoneJustificationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DocTabZoneJustificationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DocTabZoneJustificationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DocTabZoneJustificationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDocTabZoneSpecificationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DocTabZoneSpecification] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DocTabZoneSpecification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DocTabZoneSpecification] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ZoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Header")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DataField")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LiteralValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Justification")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.DocTabZoneSpecification(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DocTabZoneJustificationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DocTabZoneSpecification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.ZoneNumber, Some("http://fedex.com/ws/ship/v17"), Some("ZoneNumber"), __scope, false),
        __obj.Header map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Header"), __scope, false) } getOrElse {Nil},
        __obj.DataField map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DataField"), __scope, false) } getOrElse {Nil},
        __obj.LiteralValue map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LiteralValue"), __scope, false) } getOrElse {Nil},
        __obj.Justification map { scalaxb.toXML[com.fedex.ship.stub.DocTabZoneJustificationType](_, Some("http://fedex.com/ws/ship/v17"), Some("Justification"), __scope, false) } getOrElse {Nil})

  }

  def buildStubDocumentFormatOptionTypeFormat = new DefaultStubDocumentFormatOptionTypeFormat {}
  trait DefaultStubDocumentFormatOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DocumentFormatOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DocumentFormatOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DocumentFormatOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DocumentFormatOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DocumentFormatOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubDocumentFormatOptionsRequestedFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.DocumentFormatOptionsRequested] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("DocumentFormatOptionsRequested")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.DocumentFormatOptionsRequested] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Options")) ^^
      { case p1 =>
      com.fedex.ship.stub.DocumentFormatOptionsRequested(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.DocumentFormatOptionType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.DocumentFormatOptionsRequested, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Options flatMap { scalaxb.toXML[com.fedex.ship.stub.DocumentFormatOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("Options"), __scope, false) })

  }

  def buildStubDropoffTypeFormat = new DefaultStubDropoffTypeFormat {}
  trait DefaultStubDropoffTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.DropoffType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.DropoffType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.DropoffType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.DropoffType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.DropoffType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubEMailLabelDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EMailLabelDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EMailLabelDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EMailLabelDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Message")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Recipients")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.EMailLabelDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EMailRecipient](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EMailLabelDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Message map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Message"), __scope, false) } getOrElse {Nil},
        __obj.Recipients flatMap { scalaxb.toXML[com.fedex.ship.stub.EMailRecipient](_, Some("http://fedex.com/ws/ship/v17"), Some("Recipients"), __scope, false) })

  }

  def buildStubEMailNotificationAggregationTypeFormat = new DefaultStubEMailNotificationAggregationTypeFormat {}
  trait DefaultStubEMailNotificationAggregationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationAggregationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.EMailNotificationAggregationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.EMailNotificationAggregationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.EMailNotificationAggregationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.EMailNotificationAggregationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubEMailNotificationDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EMailNotificationDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EMailNotificationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EMailNotificationDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AggregationType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PersonalMessage")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Recipients")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.EMailNotificationDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EMailNotificationAggregationType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EMailNotificationRecipient](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EMailNotificationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AggregationType map { scalaxb.toXML[com.fedex.ship.stub.EMailNotificationAggregationType](_, Some("http://fedex.com/ws/ship/v17"), Some("AggregationType"), __scope, false) } getOrElse {Nil},
        __obj.PersonalMessage map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PersonalMessage"), __scope, false) } getOrElse {Nil},
        __obj.Recipients flatMap { scalaxb.toXML[com.fedex.ship.stub.EMailNotificationRecipient](_, Some("http://fedex.com/ws/ship/v17"), Some("Recipients"), __scope, false) })

  }

  def buildStubEMailNotificationEventTypeFormat = new DefaultStubEMailNotificationEventTypeFormat {}
  trait DefaultStubEMailNotificationEventTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationEventType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.EMailNotificationEventType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.EMailNotificationEventType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.EMailNotificationEventType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.EMailNotificationEventType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubEMailNotificationFormatTypeFormat = new DefaultStubEMailNotificationFormatTypeFormat {}
  trait DefaultStubEMailNotificationFormatTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationFormatType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.EMailNotificationFormatType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.EMailNotificationFormatType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.EMailNotificationFormatType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.EMailNotificationFormatType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubEMailNotificationRecipientFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EMailNotificationRecipient] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EMailNotificationRecipient")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EMailNotificationRecipient] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EMailNotificationRecipientType")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EMailAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NotificationEventsRequested")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Localization")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.EMailNotificationRecipient(scalaxb.fromXML[com.fedex.ship.stub.EMailNotificationRecipientType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EMailNotificationEventType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.EMailNotificationFormatType](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.Localization](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EMailNotificationRecipient, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.EMailNotificationRecipientType](__obj.EMailNotificationRecipientType, Some("http://fedex.com/ws/ship/v17"), Some("EMailNotificationRecipientType"), __scope, false),
        scalaxb.toXML[String](__obj.EMailAddress, Some("http://fedex.com/ws/ship/v17"), Some("EMailAddress"), __scope, false),
        __obj.NotificationEventsRequested flatMap { scalaxb.toXML[com.fedex.ship.stub.EMailNotificationEventType](_, Some("http://fedex.com/ws/ship/v17"), Some("NotificationEventsRequested"), __scope, false) },
        scalaxb.toXML[com.fedex.ship.stub.EMailNotificationFormatType](__obj.Format, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.Localization](__obj.Localization, Some("http://fedex.com/ws/ship/v17"), Some("Localization"), __scope, false))

  }

  def buildStubEMailNotificationRecipientTypeFormat = new DefaultStubEMailNotificationRecipientTypeFormat {}
  trait DefaultStubEMailNotificationRecipientTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.EMailNotificationRecipientType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.EMailNotificationRecipientType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.EMailNotificationRecipientType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.EMailNotificationRecipientType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.EMailNotificationRecipientType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubEMailRecipientFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EMailRecipient] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EMailRecipient")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EMailRecipient] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EmailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Role")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OptionsRequested")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Localization")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.EMailRecipient(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.AccessorRoleType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EmailOptionsRequested](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Localization](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EMailRecipient, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EmailAddress map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("EmailAddress"), __scope, false) } getOrElse {Nil},
        __obj.Role map { scalaxb.toXML[com.fedex.ship.stub.AccessorRoleType](_, Some("http://fedex.com/ws/ship/v17"), Some("Role"), __scope, false) } getOrElse {Nil},
        __obj.OptionsRequested map { scalaxb.toXML[com.fedex.ship.stub.EmailOptionsRequested](_, Some("http://fedex.com/ws/ship/v17"), Some("OptionsRequested"), __scope, false) } getOrElse {Nil},
        __obj.Localization map { scalaxb.toXML[com.fedex.ship.stub.Localization](_, Some("http://fedex.com/ws/ship/v17"), Some("Localization"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubEdtCommodityTaxFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EdtCommodityTax] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EdtCommodityTax")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EdtCommodityTax] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HarmonizedCode")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Taxes")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.EdtCommodityTax(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EdtTaxDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EdtCommodityTax, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.HarmonizedCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("HarmonizedCode"), __scope, false) } getOrElse {Nil},
        __obj.Taxes flatMap { scalaxb.toXML[com.fedex.ship.stub.EdtTaxDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Taxes"), __scope, false) })

  }

  trait DefaultStubEdtExciseConditionFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EdtExciseCondition] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EdtExciseCondition")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EdtExciseCondition] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Category")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.EdtExciseCondition(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EdtExciseCondition, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Category map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Category"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  def buildStubEdtRequestTypeFormat = new DefaultStubEdtRequestTypeFormat {}
  trait DefaultStubEdtRequestTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.EdtRequestType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.EdtRequestType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.EdtRequestType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.EdtRequestType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.EdtRequestType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubEdtTaxDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EdtTaxDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EdtTaxDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EdtTaxDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TaxType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EffectiveDate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TaxableValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Formula")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.EdtTaxDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EdtTaxType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EdtTaxDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TaxType map { scalaxb.toXML[com.fedex.ship.stub.EdtTaxType](_, Some("http://fedex.com/ws/ship/v17"), Some("TaxType"), __scope, false) } getOrElse {Nil},
        __obj.EffectiveDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("EffectiveDate"), __scope, false) } getOrElse {Nil},
        __obj.Name map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.TaxableValue map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TaxableValue"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Formula map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Formula"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  def buildStubEdtTaxTypeFormat = new DefaultStubEdtTaxTypeFormat {}
  trait DefaultStubEdtTaxTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.EdtTaxType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.EdtTaxType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.EdtTaxType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.EdtTaxType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.EdtTaxType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubEmailOptionTypeFormat = new DefaultStubEmailOptionTypeFormat {}
  trait DefaultStubEmailOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.EmailOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.EmailOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.EmailOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.EmailOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.EmailOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubEmailOptionsRequestedFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EmailOptionsRequested] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EmailOptionsRequested")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EmailOptionsRequested] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Options")) ^^
      { case p1 =>
      com.fedex.ship.stub.EmailOptionsRequested(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EmailOptionType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EmailOptionsRequested, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Options flatMap { scalaxb.toXML[com.fedex.ship.stub.EmailOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("Options"), __scope, false) })

  }

  trait DefaultStubEtdDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.EtdDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("EtdDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.EtdDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestedDocumentCopies")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentReferences")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.EtdDetail(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RequestedShippingDocumentType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.UploadDocumentReferenceDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.EtdDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RequestedDocumentCopies flatMap { scalaxb.toXML[com.fedex.ship.stub.RequestedShippingDocumentType](_, Some("http://fedex.com/ws/ship/v17"), Some("RequestedDocumentCopies"), __scope, false) },
        __obj.DocumentReferences flatMap { scalaxb.toXML[com.fedex.ship.stub.UploadDocumentReferenceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentReferences"), __scope, false) })

  }

  trait DefaultStubExportDeclarationDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ExportDeclarationDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ExportDeclarationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ExportDeclarationDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentFormat")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerImageUsages")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ExportDeclarationDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerImageUsage](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ExportDeclarationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DocumentFormat map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentFormat"), __scope, false) } getOrElse {Nil},
        __obj.CustomerImageUsages flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerImageUsage](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerImageUsages"), __scope, false) })

  }

  trait DefaultStubExportDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ExportDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ExportDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ExportDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "B13AFilingOption")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExportComplianceStatement")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PermitNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DestinationControlDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.ExportDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.B13AFilingOptionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DestinationControlDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ExportDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.B13AFilingOption map { scalaxb.toXML[com.fedex.ship.stub.B13AFilingOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("B13AFilingOption"), __scope, false) } getOrElse {Nil},
        __obj.ExportComplianceStatement map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ExportComplianceStatement"), __scope, false) } getOrElse {Nil},
        __obj.PermitNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PermitNumber"), __scope, false) } getOrElse {Nil},
        __obj.DestinationControlDetail map { scalaxb.toXML[com.fedex.ship.stub.DestinationControlDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DestinationControlDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubExpressFreightDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ExpressFreightDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ExpressFreightDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ExpressFreightDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingListEnclosed")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShippersLoadAndCount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BookingConfirmationNumber")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.ExpressFreightDetail(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ExpressFreightDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PackingListEnclosed map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingListEnclosed"), __scope, false) } getOrElse {Nil},
        __obj.ShippersLoadAndCount map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("ShippersLoadAndCount"), __scope, false) } getOrElse {Nil},
        __obj.BookingConfirmationNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("BookingConfirmationNumber"), __scope, false) } getOrElse {Nil})

  }

  def buildStubFedExLocationTypeFormat = new DefaultStubFedExLocationTypeFormat {}
  trait DefaultStubFedExLocationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FedExLocationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FedExLocationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FedExLocationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FedExLocationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FedExLocationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubFreightAddressLabelDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightAddressLabelDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightAddressLabelDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightAddressLabelDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Copies")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "StartingPosition")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocTabContent")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomContentPosition")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomContent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.fedex.ship.stub.FreightAddressLabelDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PageQuadrantType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DocTabContent](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RelativeVerticalPositionType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomLabelDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightAddressLabelDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Format map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.Copies map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("Copies"), __scope, false) } getOrElse {Nil},
        __obj.StartingPosition map { scalaxb.toXML[com.fedex.ship.stub.PageQuadrantType](_, Some("http://fedex.com/ws/ship/v17"), Some("StartingPosition"), __scope, false) } getOrElse {Nil},
        __obj.DocTabContent map { scalaxb.toXML[com.fedex.ship.stub.DocTabContent](_, Some("http://fedex.com/ws/ship/v17"), Some("DocTabContent"), __scope, false) } getOrElse {Nil},
        __obj.CustomContentPosition map { scalaxb.toXML[com.fedex.ship.stub.RelativeVerticalPositionType](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomContentPosition"), __scope, false) } getOrElse {Nil},
        __obj.CustomContent map { scalaxb.toXML[com.fedex.ship.stub.CustomLabelDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomContent"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubFreightBaseChargeFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightBaseCharge] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightBaseCharge")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightBaseCharge] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightClass")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RatedAsClass")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NmfcCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Weight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ChargeRate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ChargeBasis")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExtendedAmount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.fedex.ship.stub.FreightBaseCharge(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightClassType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightClassType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightChargeBasisType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightBaseCharge, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.FreightClass map { scalaxb.toXML[com.fedex.ship.stub.FreightClassType](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightClass"), __scope, false) } getOrElse {Nil},
        __obj.RatedAsClass map { scalaxb.toXML[com.fedex.ship.stub.FreightClassType](_, Some("http://fedex.com/ws/ship/v17"), Some("RatedAsClass"), __scope, false) } getOrElse {Nil},
        __obj.NmfcCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("NmfcCode"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Weight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("Weight"), __scope, false) } getOrElse {Nil},
        __obj.ChargeRate map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("ChargeRate"), __scope, false) } getOrElse {Nil},
        __obj.ChargeBasis map { scalaxb.toXML[com.fedex.ship.stub.FreightChargeBasisType](_, Some("http://fedex.com/ws/ship/v17"), Some("ChargeBasis"), __scope, false) } getOrElse {Nil},
        __obj.ExtendedAmount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("ExtendedAmount"), __scope, false) } getOrElse {Nil})

  }

  def buildStubFreightBaseChargeCalculationTypeFormat = new DefaultStubFreightBaseChargeCalculationTypeFormat {}
  trait DefaultStubFreightBaseChargeCalculationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightBaseChargeCalculationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightBaseChargeCalculationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightBaseChargeCalculationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightBaseChargeCalculationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightBaseChargeCalculationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubFreightChargeBasisTypeFormat = new DefaultStubFreightChargeBasisTypeFormat {}
  trait DefaultStubFreightChargeBasisTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightChargeBasisType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightChargeBasisType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightChargeBasisType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightChargeBasisType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightChargeBasisType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubFreightClassTypeFormat = new DefaultStubFreightClassTypeFormat {}
  trait DefaultStubFreightClassTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightClassType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightClassType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightClassType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightClassType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightClassType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubFreightCollectTermsTypeFormat = new DefaultStubFreightCollectTermsTypeFormat {}
  trait DefaultStubFreightCollectTermsTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightCollectTermsType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightCollectTermsType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightCollectTermsType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightCollectTermsType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightCollectTermsType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubFreightGuaranteeDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightGuaranteeDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightGuaranteeDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightGuaranteeDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Date")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.FreightGuaranteeDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightGuaranteeType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightGuaranteeDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.FreightGuaranteeType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("Date"), __scope, false) } getOrElse {Nil})

  }

  def buildStubFreightGuaranteeTypeFormat = new DefaultStubFreightGuaranteeTypeFormat {}
  trait DefaultStubFreightGuaranteeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightGuaranteeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightGuaranteeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightGuaranteeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightGuaranteeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightGuaranteeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubFreightOnValueTypeFormat = new DefaultStubFreightOnValueTypeFormat {}
  trait DefaultStubFreightOnValueTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightOnValueType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightOnValueType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightOnValueType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightOnValueType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightOnValueType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubFreightRateDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightRateDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightRateDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightRateDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "QuoteNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "QuoteType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BaseChargeCalculation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BaseCharges")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Notations")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.FreightRateDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightRateQuoteType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightBaseChargeCalculationType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.FreightBaseCharge](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.FreightRateNotation](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightRateDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.QuoteNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("QuoteNumber"), __scope, false) } getOrElse {Nil},
        __obj.QuoteType map { scalaxb.toXML[com.fedex.ship.stub.FreightRateQuoteType](_, Some("http://fedex.com/ws/ship/v17"), Some("QuoteType"), __scope, false) } getOrElse {Nil},
        __obj.BaseChargeCalculation map { scalaxb.toXML[com.fedex.ship.stub.FreightBaseChargeCalculationType](_, Some("http://fedex.com/ws/ship/v17"), Some("BaseChargeCalculation"), __scope, false) } getOrElse {Nil},
        __obj.BaseCharges flatMap { scalaxb.toXML[com.fedex.ship.stub.FreightBaseCharge](_, Some("http://fedex.com/ws/ship/v17"), Some("BaseCharges"), __scope, false) },
        __obj.Notations flatMap { scalaxb.toXML[com.fedex.ship.stub.FreightRateNotation](_, Some("http://fedex.com/ws/ship/v17"), Some("Notations"), __scope, false) })

  }

  trait DefaultStubFreightRateNotationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightRateNotation] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightRateNotation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightRateNotation] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.FreightRateNotation(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightRateNotation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Code map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Code"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  def buildStubFreightRateQuoteTypeFormat = new DefaultStubFreightRateQuoteTypeFormat {}
  trait DefaultStubFreightRateQuoteTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightRateQuoteType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightRateQuoteType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightRateQuoteType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightRateQuoteType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightRateQuoteType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubFreightShipmentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightShipmentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightShipmentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightShipmentDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FedExFreightAccountNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FedExFreightBillingContactAndAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AlternateBilling")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PrintedReferences")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Role")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CollectTermsType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeclaredValuePerUnit")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeclaredValueUnits")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LiabilityCoverageDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Coupons")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalHandlingUnits")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClientDiscountPercent")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PalletWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipmentDimensions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Comment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialServicePayments")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousMaterialsEmergencyContactNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousMaterialsOfferor")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LineItems")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      com.fedex.ship.stub.FreightShipmentDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ContactAndAddress](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.PrintedReference](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightShipmentRoleType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightCollectTermsType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LiabilityCoverageDetail](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Dimensions](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.FreightSpecialServicePayment](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.FreightShipmentLineItem](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightShipmentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.FedExFreightAccountNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FedExFreightAccountNumber"), __scope, false) } getOrElse {Nil},
        __obj.FedExFreightBillingContactAndAddress map { scalaxb.toXML[com.fedex.ship.stub.ContactAndAddress](_, Some("http://fedex.com/ws/ship/v17"), Some("FedExFreightBillingContactAndAddress"), __scope, false) } getOrElse {Nil},
        __obj.AlternateBilling map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("AlternateBilling"), __scope, false) } getOrElse {Nil},
        __obj.PrintedReferences flatMap { scalaxb.toXML[com.fedex.ship.stub.PrintedReference](_, Some("http://fedex.com/ws/ship/v17"), Some("PrintedReferences"), __scope, false) },
        __obj.Role map { scalaxb.toXML[com.fedex.ship.stub.FreightShipmentRoleType](_, Some("http://fedex.com/ws/ship/v17"), Some("Role"), __scope, false) } getOrElse {Nil},
        __obj.CollectTermsType map { scalaxb.toXML[com.fedex.ship.stub.FreightCollectTermsType](_, Some("http://fedex.com/ws/ship/v17"), Some("CollectTermsType"), __scope, false) } getOrElse {Nil},
        __obj.DeclaredValuePerUnit map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("DeclaredValuePerUnit"), __scope, false) } getOrElse {Nil},
        __obj.DeclaredValueUnits map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DeclaredValueUnits"), __scope, false) } getOrElse {Nil},
        __obj.LiabilityCoverageDetail map { scalaxb.toXML[com.fedex.ship.stub.LiabilityCoverageDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("LiabilityCoverageDetail"), __scope, false) } getOrElse {Nil},
        __obj.Coupons flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Coupons"), __scope, false) },
        __obj.TotalHandlingUnits map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalHandlingUnits"), __scope, false) } getOrElse {Nil},
        __obj.ClientDiscountPercent map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("ClientDiscountPercent"), __scope, false) } getOrElse {Nil},
        __obj.PalletWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("PalletWeight"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentDimensions map { scalaxb.toXML[com.fedex.ship.stub.Dimensions](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipmentDimensions"), __scope, false) } getOrElse {Nil},
        __obj.Comment map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Comment"), __scope, false) } getOrElse {Nil},
        __obj.SpecialServicePayments flatMap { scalaxb.toXML[com.fedex.ship.stub.FreightSpecialServicePayment](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialServicePayments"), __scope, false) },
        __obj.HazardousMaterialsEmergencyContactNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousMaterialsEmergencyContactNumber"), __scope, false) } getOrElse {Nil},
        __obj.HazardousMaterialsOfferor map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousMaterialsOfferor"), __scope, false) } getOrElse {Nil},
        __obj.LineItems flatMap { scalaxb.toXML[com.fedex.ship.stub.FreightShipmentLineItem](_, Some("http://fedex.com/ws/ship/v17"), Some("LineItems"), __scope, false) })

  }

  trait DefaultStubFreightShipmentLineItemFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightShipmentLineItem] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightShipmentLineItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightShipmentLineItem] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightClass")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClassProvidedByCustomer")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HandlingUnits")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Packaging")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Pieces")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NmfcCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousMaterials")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PurchaseOrderNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Weight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Dimensions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Volume")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      com.fedex.ship.stub.FreightShipmentLineItem(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightClassType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PhysicalPackagingType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityOptionType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Dimensions](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Volume](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightShipmentLineItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.FreightClass map { scalaxb.toXML[com.fedex.ship.stub.FreightClassType](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightClass"), __scope, false) } getOrElse {Nil},
        __obj.ClassProvidedByCustomer map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("ClassProvidedByCustomer"), __scope, false) } getOrElse {Nil},
        __obj.HandlingUnits map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("HandlingUnits"), __scope, false) } getOrElse {Nil},
        __obj.Packaging map { scalaxb.toXML[com.fedex.ship.stub.PhysicalPackagingType](_, Some("http://fedex.com/ws/ship/v17"), Some("Packaging"), __scope, false) } getOrElse {Nil},
        __obj.Pieces map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("Pieces"), __scope, false) } getOrElse {Nil},
        __obj.NmfcCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("NmfcCode"), __scope, false) } getOrElse {Nil},
        __obj.HazardousMaterials map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousMaterials"), __scope, false) } getOrElse {Nil},
        __obj.PurchaseOrderNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PurchaseOrderNumber"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Weight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("Weight"), __scope, false) } getOrElse {Nil},
        __obj.Dimensions map { scalaxb.toXML[com.fedex.ship.stub.Dimensions](_, Some("http://fedex.com/ws/ship/v17"), Some("Dimensions"), __scope, false) } getOrElse {Nil},
        __obj.Volume map { scalaxb.toXML[com.fedex.ship.stub.Volume](_, Some("http://fedex.com/ws/ship/v17"), Some("Volume"), __scope, false) } getOrElse {Nil})

  }

  def buildStubFreightShipmentRoleTypeFormat = new DefaultStubFreightShipmentRoleTypeFormat {}
  trait DefaultStubFreightShipmentRoleTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.FreightShipmentRoleType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.FreightShipmentRoleType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.FreightShipmentRoleType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.FreightShipmentRoleType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.FreightShipmentRoleType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubFreightSpecialServicePaymentFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.FreightSpecialServicePayment] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("FreightSpecialServicePayment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.FreightSpecialServicePayment] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialService")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PaymentType")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.FreightSpecialServicePayment(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentSpecialServiceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightShipmentRoleType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.FreightSpecialServicePayment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SpecialService map { scalaxb.toXML[com.fedex.ship.stub.ShipmentSpecialServiceType](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialService"), __scope, false) } getOrElse {Nil},
        __obj.PaymentType map { scalaxb.toXML[com.fedex.ship.stub.FreightShipmentRoleType](_, Some("http://fedex.com/ws/ship/v17"), Some("PaymentType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubGeneralAgencyAgreementDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.GeneralAgencyAgreementDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("GeneralAgencyAgreementDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.GeneralAgencyAgreementDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ^^
      { case p1 =>
      com.fedex.ship.stub.GeneralAgencyAgreementDetail(scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.GeneralAgencyAgreementDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](__obj.Format, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false))

  }

  def buildStubGroundDeliveryEligibilityTypeFormat = new DefaultStubGroundDeliveryEligibilityTypeFormat {}
  trait DefaultStubGroundDeliveryEligibilityTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.GroundDeliveryEligibilityType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.GroundDeliveryEligibilityType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.GroundDeliveryEligibilityType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.GroundDeliveryEligibilityType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.GroundDeliveryEligibilityType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubHazardousCommodityAttributeTypeFormat = new DefaultStubHazardousCommodityAttributeTypeFormat {}
  trait DefaultStubHazardousCommodityAttributeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityAttributeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousCommodityAttributeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousCommodityAttributeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousCommodityAttributeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousCommodityAttributeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubHazardousCommodityContentFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HazardousCommodityContent] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HazardousCommodityContent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HazardousCommodityContent] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Quantity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "InnerReceptacles")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Options")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RadionuclideDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NetExplosiveDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.fedex.ship.stub.HazardousCommodityContent(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityDescription](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityQuantityDetail](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityOptionDetail](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RadionuclideDetail](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NetExplosiveDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HazardousCommodityContent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Description map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityDescription](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Quantity map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityQuantityDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Quantity"), __scope, false) } getOrElse {Nil},
        __obj.InnerReceptacles flatMap { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("InnerReceptacles"), __scope, false) },
        __obj.Options map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityOptionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Options"), __scope, false) } getOrElse {Nil},
        __obj.RadionuclideDetail map { scalaxb.toXML[com.fedex.ship.stub.RadionuclideDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("RadionuclideDetail"), __scope, false) } getOrElse {Nil},
        __obj.NetExplosiveDetail map { scalaxb.toXML[com.fedex.ship.stub.NetExplosiveDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("NetExplosiveDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubHazardousCommodityDescriptionFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HazardousCommodityDescription] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HazardousCommodityDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HazardousCommodityDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SequenceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingDetails")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReportableQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProperShippingName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TechnicalName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Percentage")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardClass")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SubsidiaryClasses")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelText")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProcessingOptions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Authorization")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      com.fedex.ship.stub.HazardousCommodityDescription(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityPackingGroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityPackingDetail](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HazardousCommodityDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Id map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Id"), __scope, false) } getOrElse {Nil},
        __obj.SequenceNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("SequenceNumber"), __scope, false) } getOrElse {Nil},
        __obj.PackingGroup map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityPackingGroupType](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingGroup"), __scope, false) } getOrElse {Nil},
        __obj.PackingDetails map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityPackingDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingDetails"), __scope, false) } getOrElse {Nil},
        __obj.ReportableQuantity map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("ReportableQuantity"), __scope, false) } getOrElse {Nil},
        __obj.ProperShippingName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ProperShippingName"), __scope, false) } getOrElse {Nil},
        __obj.TechnicalName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("TechnicalName"), __scope, false) } getOrElse {Nil},
        __obj.Percentage map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Percentage"), __scope, false) } getOrElse {Nil},
        __obj.HazardClass map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardClass"), __scope, false) } getOrElse {Nil},
        __obj.SubsidiaryClasses flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("SubsidiaryClasses"), __scope, false) },
        __obj.LabelText map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelText"), __scope, false) } getOrElse {Nil},
        __obj.ProcessingOptions flatMap { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("ProcessingOptions"), __scope, false) },
        __obj.Authorization map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Authorization"), __scope, false) } getOrElse {Nil})

  }

  def buildStubHazardousCommodityDescriptionProcessingOptionTypeFormat = new DefaultStubHazardousCommodityDescriptionProcessingOptionTypeFormat {}
  trait DefaultStubHazardousCommodityDescriptionProcessingOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousCommodityDescriptionProcessingOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubHazardousCommodityInnerReceptacleDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HazardousCommodityInnerReceptacleDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Quantity")) ^^
      { case p1 =>
      com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityQuantityDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HazardousCommodityInnerReceptacleDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Quantity map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityQuantityDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Quantity"), __scope, false) } getOrElse {Nil})

  }

  def buildStubHazardousCommodityLabelTextOptionTypeFormat = new DefaultStubHazardousCommodityLabelTextOptionTypeFormat {}
  trait DefaultStubHazardousCommodityLabelTextOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityLabelTextOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousCommodityLabelTextOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousCommodityLabelTextOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousCommodityLabelTextOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousCommodityLabelTextOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubHazardousCommodityOptionDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HazardousCommodityOptionDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HazardousCommodityOptionDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HazardousCommodityOptionDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelTextOption")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerSuppliedLabelText")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.HazardousCommodityOptionDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityLabelTextOptionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HazardousCommodityOptionDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.LabelTextOption map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityLabelTextOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelTextOption"), __scope, false) } getOrElse {Nil},
        __obj.CustomerSuppliedLabelText map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerSuppliedLabelText"), __scope, false) } getOrElse {Nil})

  }

  def buildStubHazardousCommodityOptionTypeFormat = new DefaultStubHazardousCommodityOptionTypeFormat {}
  trait DefaultStubHazardousCommodityOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousCommodityOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousCommodityOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousCommodityOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousCommodityOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubHazardousCommodityPackagingDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HazardousCommodityPackagingDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HazardousCommodityPackagingDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HazardousCommodityPackagingDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Count")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.HazardousCommodityPackagingDetail(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HazardousCommodityPackagingDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Count map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("Count"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubHazardousCommodityPackingDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HazardousCommodityPackingDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HazardousCommodityPackingDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HazardousCommodityPackingDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CargoAircraftOnly")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingInstructions")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.HazardousCommodityPackingDetail(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HazardousCommodityPackingDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CargoAircraftOnly map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("CargoAircraftOnly"), __scope, false) } getOrElse {Nil},
        __obj.PackingInstructions map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingInstructions"), __scope, false) } getOrElse {Nil})

  }

  def buildStubHazardousCommodityPackingGroupTypeFormat = new DefaultStubHazardousCommodityPackingGroupTypeFormat {}
  trait DefaultStubHazardousCommodityPackingGroupTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityPackingGroupType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousCommodityPackingGroupType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousCommodityPackingGroupType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousCommodityPackingGroupType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousCommodityPackingGroupType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubHazardousCommodityQuantityDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HazardousCommodityQuantityDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HazardousCommodityQuantityDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HazardousCommodityQuantityDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "QuantityType")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.HazardousCommodityQuantityDetail(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityQuantityType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HazardousCommodityQuantityDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.QuantityType map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityQuantityType](_, Some("http://fedex.com/ws/ship/v17"), Some("QuantityType"), __scope, false) } getOrElse {Nil})

  }

  def buildStubHazardousCommodityQuantityTypeFormat = new DefaultStubHazardousCommodityQuantityTypeFormat {}
  trait DefaultStubHazardousCommodityQuantityTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityQuantityType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousCommodityQuantityType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousCommodityQuantityType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousCommodityQuantityType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousCommodityQuantityType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubHazardousCommodityRegulationTypeFormat = new DefaultStubHazardousCommodityRegulationTypeFormat {}
  trait DefaultStubHazardousCommodityRegulationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousCommodityRegulationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousCommodityRegulationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousCommodityRegulationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousCommodityRegulationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousCommodityRegulationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubHazardousContainerPackingTypeFormat = new DefaultStubHazardousContainerPackingTypeFormat {}
  trait DefaultStubHazardousContainerPackingTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HazardousContainerPackingType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HazardousContainerPackingType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HazardousContainerPackingType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HazardousContainerPackingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HazardousContainerPackingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubHoldAtLocationDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HoldAtLocationDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HoldAtLocationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HoldAtLocationDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LocationContactAndAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LocationType")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.HoldAtLocationDetail(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ContactAndAddress](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FedExLocationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HoldAtLocationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.PhoneNumber, Some("http://fedex.com/ws/ship/v17"), Some("PhoneNumber"), __scope, false),
        __obj.LocationContactAndAddress map { scalaxb.toXML[com.fedex.ship.stub.ContactAndAddress](_, Some("http://fedex.com/ws/ship/v17"), Some("LocationContactAndAddress"), __scope, false) } getOrElse {Nil},
        __obj.LocationType map { scalaxb.toXML[com.fedex.ship.stub.FedExLocationType](_, Some("http://fedex.com/ws/ship/v17"), Some("LocationType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubHomeDeliveryPremiumDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.HomeDeliveryPremiumDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("HomeDeliveryPremiumDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.HomeDeliveryPremiumDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HomeDeliveryPremiumType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Date")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PhoneNumber")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.HomeDeliveryPremiumDetail(scalaxb.fromXML[com.fedex.ship.stub.HomeDeliveryPremiumType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.HomeDeliveryPremiumDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.HomeDeliveryPremiumType](__obj.HomeDeliveryPremiumType, Some("http://fedex.com/ws/ship/v17"), Some("HomeDeliveryPremiumType"), __scope, false),
        __obj.Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("Date"), __scope, false) } getOrElse {Nil},
        __obj.PhoneNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PhoneNumber"), __scope, false) } getOrElse {Nil})

  }

  def buildStubHomeDeliveryPremiumTypeFormat = new DefaultStubHomeDeliveryPremiumTypeFormat {}
  trait DefaultStubHomeDeliveryPremiumTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.HomeDeliveryPremiumType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.HomeDeliveryPremiumType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.HomeDeliveryPremiumType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.HomeDeliveryPremiumType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.HomeDeliveryPremiumType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubImageIdFormat = new DefaultStubImageIdFormat {}
  trait DefaultStubImageIdFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ImageId] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ImageId] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ImageId.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ImageId.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ImageId, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubInternationalControlledExportDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.InternationalControlledExportDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("InternationalControlledExportDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.InternationalControlledExportDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ForeignTradeZoneCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EntryNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LicenseOrPermitNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LicenseOrPermitExpirationDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.InternationalControlledExportDetail(scalaxb.fromXML[com.fedex.ship.stub.InternationalControlledExportType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.InternationalControlledExportDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.InternationalControlledExportType](__obj.Type, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false),
        __obj.ForeignTradeZoneCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ForeignTradeZoneCode"), __scope, false) } getOrElse {Nil},
        __obj.EntryNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("EntryNumber"), __scope, false) } getOrElse {Nil},
        __obj.LicenseOrPermitNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LicenseOrPermitNumber"), __scope, false) } getOrElse {Nil},
        __obj.LicenseOrPermitExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("LicenseOrPermitExpirationDate"), __scope, false) } getOrElse {Nil})

  }

  def buildStubInternationalControlledExportTypeFormat = new DefaultStubInternationalControlledExportTypeFormat {}
  trait DefaultStubInternationalControlledExportTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.InternationalControlledExportType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.InternationalControlledExportType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.InternationalControlledExportType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.InternationalControlledExportType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.InternationalControlledExportType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubInternationalDocumentContentTypeFormat = new DefaultStubInternationalDocumentContentTypeFormat {}
  trait DefaultStubInternationalDocumentContentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.InternationalDocumentContentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.InternationalDocumentContentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.InternationalDocumentContentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.InternationalDocumentContentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.InternationalDocumentContentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubInternationalTrafficInArmsRegulationsDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("InternationalTrafficInArmsRegulationsDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LicenseOrExemptionNumber")) ^^
      { case p1 =>
      com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LicenseOrExemptionNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LicenseOrExemptionNumber"), __scope, false) } getOrElse {Nil})

  }

  def buildStubLabelFormatTypeFormat = new DefaultStubLabelFormatTypeFormat {}
  trait DefaultStubLabelFormatTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LabelFormatType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LabelFormatType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LabelFormatType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LabelFormatType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LabelFormatType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubLabelMaskableDataTypeFormat = new DefaultStubLabelMaskableDataTypeFormat {}
  trait DefaultStubLabelMaskableDataTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LabelMaskableDataType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LabelMaskableDataType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LabelMaskableDataType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LabelMaskableDataType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LabelMaskableDataType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubLabelOrderTypeFormat = new DefaultStubLabelOrderTypeFormat {}
  trait DefaultStubLabelOrderTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LabelOrderType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LabelOrderType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LabelOrderType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LabelOrderType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LabelOrderType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubLabelPrintingOrientationTypeFormat = new DefaultStubLabelPrintingOrientationTypeFormat {}
  trait DefaultStubLabelPrintingOrientationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LabelPrintingOrientationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LabelPrintingOrientationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LabelPrintingOrientationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LabelPrintingOrientationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LabelPrintingOrientationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubLabelRotationTypeFormat = new DefaultStubLabelRotationTypeFormat {}
  trait DefaultStubLabelRotationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LabelRotationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LabelRotationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LabelRotationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LabelRotationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LabelRotationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubLabelSpecificationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.LabelSpecification] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("LabelSpecification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.LabelSpecification] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Dispositions")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelFormatType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ImageType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelStockType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelPrintingOrientation")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelOrder")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PrintedLabelOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerSpecifiedDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.fedex.ship.stub.LabelSpecification(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentDispositionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.LabelFormatType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentImageType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LabelStockType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LabelPrintingOrientationType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LabelOrderType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ContactAndAddress](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomerSpecifiedLabelDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.LabelSpecification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Dispositions flatMap { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentDispositionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Dispositions"), __scope, false) },
        scalaxb.toXML[com.fedex.ship.stub.LabelFormatType](__obj.LabelFormatType, Some("http://fedex.com/ws/ship/v17"), Some("LabelFormatType"), __scope, false),
        __obj.ImageType map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentImageType](_, Some("http://fedex.com/ws/ship/v17"), Some("ImageType"), __scope, false) } getOrElse {Nil},
        __obj.LabelStockType map { scalaxb.toXML[com.fedex.ship.stub.LabelStockType](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelStockType"), __scope, false) } getOrElse {Nil},
        __obj.LabelPrintingOrientation map { scalaxb.toXML[com.fedex.ship.stub.LabelPrintingOrientationType](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelPrintingOrientation"), __scope, false) } getOrElse {Nil},
        __obj.LabelOrder map { scalaxb.toXML[com.fedex.ship.stub.LabelOrderType](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelOrder"), __scope, false) } getOrElse {Nil},
        __obj.PrintedLabelOrigin map { scalaxb.toXML[com.fedex.ship.stub.ContactAndAddress](_, Some("http://fedex.com/ws/ship/v17"), Some("PrintedLabelOrigin"), __scope, false) } getOrElse {Nil},
        __obj.CustomerSpecifiedDetail map { scalaxb.toXML[com.fedex.ship.stub.CustomerSpecifiedLabelDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerSpecifiedDetail"), __scope, false) } getOrElse {Nil})

  }

  def buildStubLabelStockTypeFormat = new DefaultStubLabelStockTypeFormat {}
  trait DefaultStubLabelStockTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LabelStockType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LabelStockType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LabelStockType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LabelStockType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LabelStockType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubLiabilityCoverageDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.LiabilityCoverageDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("LiabilityCoverageDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.LiabilityCoverageDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CoverageType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CoverageAmount")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.LiabilityCoverageDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LiabilityCoverageType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.LiabilityCoverageDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CoverageType map { scalaxb.toXML[com.fedex.ship.stub.LiabilityCoverageType](_, Some("http://fedex.com/ws/ship/v17"), Some("CoverageType"), __scope, false) } getOrElse {Nil},
        __obj.CoverageAmount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("CoverageAmount"), __scope, false) } getOrElse {Nil})

  }

  def buildStubLiabilityCoverageTypeFormat = new DefaultStubLiabilityCoverageTypeFormat {}
  trait DefaultStubLiabilityCoverageTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LiabilityCoverageType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LiabilityCoverageType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LiabilityCoverageType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LiabilityCoverageType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LiabilityCoverageType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubLicenseOrPermitDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.LicenseOrPermitDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("LicenseOrPermitDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.LicenseOrPermitDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Number")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EffectiveDate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExpirationDate")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.LicenseOrPermitDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.LicenseOrPermitDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Number map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Number"), __scope, false) } getOrElse {Nil},
        __obj.EffectiveDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("EffectiveDate"), __scope, false) } getOrElse {Nil},
        __obj.ExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("ExpirationDate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubLinearMeasureFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.LinearMeasure] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("LinearMeasure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.LinearMeasure] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.LinearMeasure(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LinearUnits](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.LinearMeasure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Value map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[com.fedex.ship.stub.LinearUnits](_, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false) } getOrElse {Nil})

  }

  def buildStubLinearUnitsFormat = new DefaultStubLinearUnitsFormat {}
  trait DefaultStubLinearUnitsFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.LinearUnits] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.LinearUnits] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.LinearUnits.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.LinearUnits.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.LinearUnits, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubLocalizationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Localization] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Localization")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Localization] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LanguageCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LocaleCode")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.Localization(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Localization, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.LanguageCode, Some("http://fedex.com/ws/ship/v17"), Some("LanguageCode"), __scope, false),
        __obj.LocaleCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LocaleCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubMeasureFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Measure] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Measure")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Measure] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.Measure(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Measure, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Quantity map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Quantity"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false) } getOrElse {Nil})

  }

  def buildStubMinimumChargeTypeFormat = new DefaultStubMinimumChargeTypeFormat {}
  trait DefaultStubMinimumChargeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.MinimumChargeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.MinimumChargeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.MinimumChargeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.MinimumChargeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.MinimumChargeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubMoneyFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Money] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Money")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Money] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Currency")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.Money(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Money, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Currency, Some("http://fedex.com/ws/ship/v17"), Some("Currency"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.Amount, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false))

  }

  trait DefaultStubNaftaCertificateOfOriginDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.NaftaCertificateOfOriginDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("NaftaCertificateOfOriginDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.NaftaCertificateOfOriginDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BlanketPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ImporterSpecification")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SignatureContact")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProducerSpecification")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Producers")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerImageUsages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.NaftaCertificateOfOriginDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DateRange](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaImporterSpecificationType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Contact](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaProducerSpecificationType](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.NaftaProducer](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerImageUsage](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.NaftaCertificateOfOriginDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Format map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.BlanketPeriod map { scalaxb.toXML[com.fedex.ship.stub.DateRange](_, Some("http://fedex.com/ws/ship/v17"), Some("BlanketPeriod"), __scope, false) } getOrElse {Nil},
        __obj.ImporterSpecification map { scalaxb.toXML[com.fedex.ship.stub.NaftaImporterSpecificationType](_, Some("http://fedex.com/ws/ship/v17"), Some("ImporterSpecification"), __scope, false) } getOrElse {Nil},
        __obj.SignatureContact map { scalaxb.toXML[com.fedex.ship.stub.Contact](_, Some("http://fedex.com/ws/ship/v17"), Some("SignatureContact"), __scope, false) } getOrElse {Nil},
        __obj.ProducerSpecification map { scalaxb.toXML[com.fedex.ship.stub.NaftaProducerSpecificationType](_, Some("http://fedex.com/ws/ship/v17"), Some("ProducerSpecification"), __scope, false) } getOrElse {Nil},
        __obj.Producers flatMap { scalaxb.toXML[com.fedex.ship.stub.NaftaProducer](_, Some("http://fedex.com/ws/ship/v17"), Some("Producers"), __scope, false) },
        __obj.CustomerImageUsages flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerImageUsage](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerImageUsages"), __scope, false) })

  }

  trait DefaultStubNaftaCommodityDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.NaftaCommodityDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("NaftaCommodityDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.NaftaCommodityDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PreferenceCriterion")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProducerDetermination")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProducerId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NetCostMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NetCostDateRange")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.NaftaCommodityDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaPreferenceCriterionCode](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaProducerDeterminationCode](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaNetCostMethodCode](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DateRange](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.NaftaCommodityDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PreferenceCriterion map { scalaxb.toXML[com.fedex.ship.stub.NaftaPreferenceCriterionCode](_, Some("http://fedex.com/ws/ship/v17"), Some("PreferenceCriterion"), __scope, false) } getOrElse {Nil},
        __obj.ProducerDetermination map { scalaxb.toXML[com.fedex.ship.stub.NaftaProducerDeterminationCode](_, Some("http://fedex.com/ws/ship/v17"), Some("ProducerDetermination"), __scope, false) } getOrElse {Nil},
        __obj.ProducerId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ProducerId"), __scope, false) } getOrElse {Nil},
        __obj.NetCostMethod map { scalaxb.toXML[com.fedex.ship.stub.NaftaNetCostMethodCode](_, Some("http://fedex.com/ws/ship/v17"), Some("NetCostMethod"), __scope, false) } getOrElse {Nil},
        __obj.NetCostDateRange map { scalaxb.toXML[com.fedex.ship.stub.DateRange](_, Some("http://fedex.com/ws/ship/v17"), Some("NetCostDateRange"), __scope, false) } getOrElse {Nil})

  }

  def buildStubNaftaImporterSpecificationTypeFormat = new DefaultStubNaftaImporterSpecificationTypeFormat {}
  trait DefaultStubNaftaImporterSpecificationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.NaftaImporterSpecificationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.NaftaImporterSpecificationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.NaftaImporterSpecificationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.NaftaImporterSpecificationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.NaftaImporterSpecificationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubNaftaLowValueStatementDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.NaftaLowValueStatementDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("NaftaLowValueStatementDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.NaftaLowValueStatementDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Role")) ^^
      { case p1 =>
      com.fedex.ship.stub.NaftaLowValueStatementDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomsRoleType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.NaftaLowValueStatementDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Role map { scalaxb.toXML[com.fedex.ship.stub.CustomsRoleType](_, Some("http://fedex.com/ws/ship/v17"), Some("Role"), __scope, false) } getOrElse {Nil})

  }

  def buildStubNaftaNetCostMethodCodeFormat = new DefaultStubNaftaNetCostMethodCodeFormat {}
  trait DefaultStubNaftaNetCostMethodCodeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.NaftaNetCostMethodCode] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.NaftaNetCostMethodCode] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.NaftaNetCostMethodCode.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.NaftaNetCostMethodCode.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.NaftaNetCostMethodCode, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubNaftaPreferenceCriterionCodeFormat = new DefaultStubNaftaPreferenceCriterionCodeFormat {}
  trait DefaultStubNaftaPreferenceCriterionCodeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.NaftaPreferenceCriterionCode] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.NaftaPreferenceCriterionCode] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.NaftaPreferenceCriterionCode.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.NaftaPreferenceCriterionCode.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.NaftaPreferenceCriterionCode, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubNaftaProducerFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.NaftaProducer] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("NaftaProducer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.NaftaProducer] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Producer")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.NaftaProducer(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.NaftaProducer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Id map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Id"), __scope, false) } getOrElse {Nil},
        __obj.Producer map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("Producer"), __scope, false) } getOrElse {Nil})

  }

  def buildStubNaftaProducerDeterminationCodeFormat = new DefaultStubNaftaProducerDeterminationCodeFormat {}
  trait DefaultStubNaftaProducerDeterminationCodeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.NaftaProducerDeterminationCode] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.NaftaProducerDeterminationCode] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.NaftaProducerDeterminationCode.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.NaftaProducerDeterminationCode.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.NaftaProducerDeterminationCode, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubNaftaProducerSpecificationTypeFormat = new DefaultStubNaftaProducerSpecificationTypeFormat {}
  trait DefaultStubNaftaProducerSpecificationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.NaftaProducerSpecificationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.NaftaProducerSpecificationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.NaftaProducerSpecificationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.NaftaProducerSpecificationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.NaftaProducerSpecificationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubNetExplosiveClassificationTypeFormat = new DefaultStubNetExplosiveClassificationTypeFormat {}
  trait DefaultStubNetExplosiveClassificationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.NetExplosiveClassificationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.NetExplosiveClassificationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.NetExplosiveClassificationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.NetExplosiveClassificationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.NetExplosiveClassificationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubNetExplosiveDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.NetExplosiveDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("NetExplosiveDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.NetExplosiveDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.NetExplosiveDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NetExplosiveClassificationType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.NetExplosiveDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.NetExplosiveClassificationType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Units map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubNotificationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Notification] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Notification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Notification] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Severity")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Source")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Message")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LocalizedMessage")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MessageParameters")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.fedex.ship.stub.Notification(scalaxb.fromXML[com.fedex.ship.stub.NotificationSeverityType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.NotificationParameter](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Notification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.NotificationSeverityType](__obj.Severity, Some("http://fedex.com/ws/ship/v17"), Some("Severity"), __scope, false),
        scalaxb.toXML[String](__obj.Source, Some("http://fedex.com/ws/ship/v17"), Some("Source"), __scope, false),
        __obj.Code map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Code"), __scope, false) } getOrElse {Nil},
        __obj.Message map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Message"), __scope, false) } getOrElse {Nil},
        __obj.LocalizedMessage map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LocalizedMessage"), __scope, false) } getOrElse {Nil},
        __obj.MessageParameters flatMap { scalaxb.toXML[com.fedex.ship.stub.NotificationParameter](_, Some("http://fedex.com/ws/ship/v17"), Some("MessageParameters"), __scope, false) })

  }

  trait DefaultStubNotificationParameterFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.NotificationParameter] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("NotificationParameter")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.NotificationParameter] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.NotificationParameter(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.NotificationParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Id map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Id"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  def buildStubNotificationSeverityTypeFormat = new DefaultStubNotificationSeverityTypeFormat {}
  trait DefaultStubNotificationSeverityTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.NotificationSeverityType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.NotificationSeverityType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.NotificationSeverityType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.NotificationSeverityType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.NotificationSeverityType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubOp900DetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Op900Detail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Op900Detail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Op900Detail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerImageUsages")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SignatureName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.Op900Detail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomerReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerImageUsage](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Op900Detail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Format map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.Reference map { scalaxb.toXML[com.fedex.ship.stub.CustomerReferenceType](_, Some("http://fedex.com/ws/ship/v17"), Some("Reference"), __scope, false) } getOrElse {Nil},
        __obj.CustomerImageUsages flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerImageUsage](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerImageUsages"), __scope, false) },
        __obj.SignatureName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("SignatureName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubOperationalInstructionFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.OperationalInstruction] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("OperationalInstruction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.OperationalInstruction] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Number")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Content")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.OperationalInstruction(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.OperationalInstruction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Number map { scalaxb.toXML[Int](_, Some("http://fedex.com/ws/ship/v17"), Some("Number"), __scope, false) } getOrElse {Nil},
        __obj.Content map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Content"), __scope, false) } getOrElse {Nil})

  }

  def buildStubOversizeClassTypeFormat = new DefaultStubOversizeClassTypeFormat {}
  trait DefaultStubOversizeClassTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.OversizeClassType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.OversizeClassType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.OversizeClassType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.OversizeClassType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.OversizeClassType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPackageBarcodesFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PackageBarcodes] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PackageBarcodes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PackageBarcodes] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BinaryBarcodes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "StringBarcodes")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.PackageBarcodes(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.BinaryBarcode](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.StringBarcode](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PackageBarcodes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BinaryBarcodes flatMap { scalaxb.toXML[com.fedex.ship.stub.BinaryBarcode](_, Some("http://fedex.com/ws/ship/v17"), Some("BinaryBarcodes"), __scope, false) },
        __obj.StringBarcodes flatMap { scalaxb.toXML[com.fedex.ship.stub.StringBarcode](_, Some("http://fedex.com/ws/ship/v17"), Some("StringBarcodes"), __scope, false) })

  }

  trait DefaultStubPackageOperationalDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PackageOperationalDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PackageOperationalDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PackageOperationalDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AstraHandlingText")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OperationalInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Barcodes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "GroundServiceCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.PackageOperationalDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.OperationalInstruction](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PackageBarcodes](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PackageOperationalDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AstraHandlingText map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("AstraHandlingText"), __scope, false) } getOrElse {Nil},
        __obj.OperationalInstructions flatMap { scalaxb.toXML[com.fedex.ship.stub.OperationalInstruction](_, Some("http://fedex.com/ws/ship/v17"), Some("OperationalInstructions"), __scope, false) },
        __obj.Barcodes map { scalaxb.toXML[com.fedex.ship.stub.PackageBarcodes](_, Some("http://fedex.com/ws/ship/v17"), Some("Barcodes"), __scope, false) } getOrElse {Nil},
        __obj.GroundServiceCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("GroundServiceCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubPackageRateDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PackageRateDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PackageRateDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PackageRateDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RatedWeightMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MinimumChargeType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BillingWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DimWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OversizeWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BaseCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalFreightDiscounts")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NetFreight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalSurcharges")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NetFedExCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NetCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalRebates")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightDiscounts")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Rebates")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Surcharges")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Taxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "VariableHandlingCharges")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      com.fedex.ship.stub.PackageRateDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnedRateType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RatedWeightMethod](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.MinimumChargeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p15.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RateDiscount](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Rebate](_, scalaxb.ElemName(node) :: stack) },
        p17.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Surcharge](_, scalaxb.ElemName(node) :: stack) },
        p18.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Tax](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VariableHandlingCharges](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PackageRateDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RateType map { scalaxb.toXML[com.fedex.ship.stub.ReturnedRateType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateType"), __scope, false) } getOrElse {Nil},
        __obj.RatedWeightMethod map { scalaxb.toXML[com.fedex.ship.stub.RatedWeightMethod](_, Some("http://fedex.com/ws/ship/v17"), Some("RatedWeightMethod"), __scope, false) } getOrElse {Nil},
        __obj.MinimumChargeType map { scalaxb.toXML[com.fedex.ship.stub.MinimumChargeType](_, Some("http://fedex.com/ws/ship/v17"), Some("MinimumChargeType"), __scope, false) } getOrElse {Nil},
        __obj.BillingWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("BillingWeight"), __scope, false) } getOrElse {Nil},
        __obj.DimWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("DimWeight"), __scope, false) } getOrElse {Nil},
        __obj.OversizeWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("OversizeWeight"), __scope, false) } getOrElse {Nil},
        __obj.BaseCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("BaseCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalFreightDiscounts map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalFreightDiscounts"), __scope, false) } getOrElse {Nil},
        __obj.NetFreight map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("NetFreight"), __scope, false) } getOrElse {Nil},
        __obj.TotalSurcharges map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalSurcharges"), __scope, false) } getOrElse {Nil},
        __obj.NetFedExCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("NetFedExCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalTaxes map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalTaxes"), __scope, false) } getOrElse {Nil},
        __obj.NetCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("NetCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalRebates map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalRebates"), __scope, false) } getOrElse {Nil},
        __obj.FreightDiscounts flatMap { scalaxb.toXML[com.fedex.ship.stub.RateDiscount](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightDiscounts"), __scope, false) },
        __obj.Rebates flatMap { scalaxb.toXML[com.fedex.ship.stub.Rebate](_, Some("http://fedex.com/ws/ship/v17"), Some("Rebates"), __scope, false) },
        __obj.Surcharges flatMap { scalaxb.toXML[com.fedex.ship.stub.Surcharge](_, Some("http://fedex.com/ws/ship/v17"), Some("Surcharges"), __scope, false) },
        __obj.Taxes flatMap { scalaxb.toXML[com.fedex.ship.stub.Tax](_, Some("http://fedex.com/ws/ship/v17"), Some("Taxes"), __scope, false) },
        __obj.VariableHandlingCharges map { scalaxb.toXML[com.fedex.ship.stub.VariableHandlingCharges](_, Some("http://fedex.com/ws/ship/v17"), Some("VariableHandlingCharges"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubPackageRatingFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PackageRating] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PackageRating")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PackageRating] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ActualRateType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EffectiveNetDiscount")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackageRateDetails")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.PackageRating(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnedRateType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.PackageRateDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PackageRating, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ActualRateType map { scalaxb.toXML[com.fedex.ship.stub.ReturnedRateType](_, Some("http://fedex.com/ws/ship/v17"), Some("ActualRateType"), __scope, false) } getOrElse {Nil},
        __obj.EffectiveNetDiscount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("EffectiveNetDiscount"), __scope, false) } getOrElse {Nil},
        __obj.PackageRateDetails flatMap { scalaxb.toXML[com.fedex.ship.stub.PackageRateDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("PackageRateDetails"), __scope, false) })

  }

  def buildStubPackageSpecialServiceTypeFormat = new DefaultStubPackageSpecialServiceTypeFormat {}
  trait DefaultStubPackageSpecialServiceTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PackageSpecialServiceType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PackageSpecialServiceType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PackageSpecialServiceType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PackageSpecialServiceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PackageSpecialServiceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPackageSpecialServicesRequestedFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PackageSpecialServicesRequested] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PackageSpecialServicesRequested")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PackageSpecialServicesRequested] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialServiceTypes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CodDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DangerousGoodsDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DryIceWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SignatureOptionDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PriorityAlertDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AlcoholDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.PackageSpecialServicesRequested(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.PackageSpecialServiceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodDetail](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SignatureOptionDetail](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PriorityAlertDetail](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.AlcoholDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PackageSpecialServicesRequested, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SpecialServiceTypes flatMap { scalaxb.toXML[com.fedex.ship.stub.PackageSpecialServiceType](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialServiceTypes"), __scope, false) },
        __obj.CodDetail map { scalaxb.toXML[com.fedex.ship.stub.CodDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CodDetail"), __scope, false) } getOrElse {Nil},
        __obj.DangerousGoodsDetail map { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DangerousGoodsDetail"), __scope, false) } getOrElse {Nil},
        __obj.DryIceWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("DryIceWeight"), __scope, false) } getOrElse {Nil},
        __obj.SignatureOptionDetail map { scalaxb.toXML[com.fedex.ship.stub.SignatureOptionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("SignatureOptionDetail"), __scope, false) } getOrElse {Nil},
        __obj.PriorityAlertDetail map { scalaxb.toXML[com.fedex.ship.stub.PriorityAlertDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("PriorityAlertDetail"), __scope, false) } getOrElse {Nil},
        __obj.AlcoholDetail map { scalaxb.toXML[com.fedex.ship.stub.AlcoholDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("AlcoholDetail"), __scope, false) } getOrElse {Nil})

  }

  def buildStubPackagingTypeFormat = new DefaultStubPackagingTypeFormat {}
  trait DefaultStubPackagingTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PackagingType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PackagingType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PackagingType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PackagingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PackagingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubPageQuadrantTypeFormat = new DefaultStubPageQuadrantTypeFormat {}
  trait DefaultStubPageQuadrantTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PageQuadrantType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PageQuadrantType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PageQuadrantType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PageQuadrantType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PageQuadrantType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPartyFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Party] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Party")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Party] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AccountNumber")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Tins")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Contact")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.Party(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.TaxpayerIdentification](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Contact](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Address](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Party, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AccountNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("AccountNumber"), __scope, false) } getOrElse {Nil},
        __obj.Tins flatMap { scalaxb.toXML[com.fedex.ship.stub.TaxpayerIdentification](_, Some("http://fedex.com/ws/ship/v17"), Some("Tins"), __scope, false) },
        __obj.Contact map { scalaxb.toXML[com.fedex.ship.stub.Contact](_, Some("http://fedex.com/ws/ship/v17"), Some("Contact"), __scope, false) } getOrElse {Nil},
        __obj.Address map { scalaxb.toXML[com.fedex.ship.stub.Address](_, Some("http://fedex.com/ws/ship/v17"), Some("Address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubPaymentFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Payment] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Payment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Payment] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PaymentType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Payor")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.Payment(scalaxb.fromXML[com.fedex.ship.stub.PaymentType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Payor](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Payment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.PaymentType](__obj.PaymentType, Some("http://fedex.com/ws/ship/v17"), Some("PaymentType"), __scope, false),
        __obj.Payor map { scalaxb.toXML[com.fedex.ship.stub.Payor](_, Some("http://fedex.com/ws/ship/v17"), Some("Payor"), __scope, false) } getOrElse {Nil})

  }

  def buildStubPaymentTypeFormat = new DefaultStubPaymentTypeFormat {}
  trait DefaultStubPaymentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PaymentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PaymentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PaymentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PaymentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PaymentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPayorFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Payor] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Payor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Payor] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ResponsibleParty")) ^^
      { case p1 =>
      com.fedex.ship.stub.Payor(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Payor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ResponsibleParty map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("ResponsibleParty"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubPendingShipmentAccessDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PendingShipmentAccessDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PendingShipmentAccessDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PendingShipmentAccessDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AccessorDetails")) ^^
      { case p1 =>
      com.fedex.ship.stub.PendingShipmentAccessDetail(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.PendingShipmentAccessorDetail](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PendingShipmentAccessDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.AccessorDetails flatMap { scalaxb.toXML[com.fedex.ship.stub.PendingShipmentAccessorDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("AccessorDetails"), __scope, false) })

  }

  trait DefaultStubPendingShipmentAccessorDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PendingShipmentAccessorDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PendingShipmentAccessorDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PendingShipmentAccessorDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Role")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UserId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Password")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EmailLabelUrl")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.PendingShipmentAccessorDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.AccessorRoleType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PendingShipmentAccessorDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Role map { scalaxb.toXML[com.fedex.ship.stub.AccessorRoleType](_, Some("http://fedex.com/ws/ship/v17"), Some("Role"), __scope, false) } getOrElse {Nil},
        __obj.UserId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("UserId"), __scope, false) } getOrElse {Nil},
        __obj.Password map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Password"), __scope, false) } getOrElse {Nil},
        __obj.EmailLabelUrl map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("EmailLabelUrl"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubPendingShipmentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PendingShipmentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PendingShipmentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PendingShipmentDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExpirationDate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EmailLabelDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProcessingOptions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RecommendedDocumentSpecification")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentReferences")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.fedex.ship.stub.PendingShipmentDetail(scalaxb.fromXML[com.fedex.ship.stub.PendingShipmentType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EMailLabelDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RecommendedDocumentSpecification](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.UploadDocumentReferenceDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PendingShipmentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.PendingShipmentType](__obj.Type, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false),
        __obj.ExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("ExpirationDate"), __scope, false) } getOrElse {Nil},
        __obj.EmailLabelDetail map { scalaxb.toXML[com.fedex.ship.stub.EMailLabelDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("EmailLabelDetail"), __scope, false) } getOrElse {Nil},
        __obj.ProcessingOptions map { scalaxb.toXML[com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested](_, Some("http://fedex.com/ws/ship/v17"), Some("ProcessingOptions"), __scope, false) } getOrElse {Nil},
        __obj.RecommendedDocumentSpecification map { scalaxb.toXML[com.fedex.ship.stub.RecommendedDocumentSpecification](_, Some("http://fedex.com/ws/ship/v17"), Some("RecommendedDocumentSpecification"), __scope, false) } getOrElse {Nil},
        __obj.DocumentReferences flatMap { scalaxb.toXML[com.fedex.ship.stub.UploadDocumentReferenceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentReferences"), __scope, false) })

  }

  def buildStubPendingShipmentProcessingOptionTypeFormat = new DefaultStubPendingShipmentProcessingOptionTypeFormat {}
  trait DefaultStubPendingShipmentProcessingOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentProcessingOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PendingShipmentProcessingOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PendingShipmentProcessingOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PendingShipmentProcessingOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PendingShipmentProcessingOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPendingShipmentProcessingOptionsRequestedFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PendingShipmentProcessingOptionsRequested")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Options")) ^^
      { case p1 =>
      com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.PendingShipmentProcessingOptionType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PendingShipmentProcessingOptionsRequested, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Options flatMap { scalaxb.toXML[com.fedex.ship.stub.PendingShipmentProcessingOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("Options"), __scope, false) })

  }

  def buildStubPendingShipmentTypeFormat = new DefaultStubPendingShipmentTypeFormat {}
  trait DefaultStubPendingShipmentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PendingShipmentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PendingShipmentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PendingShipmentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PendingShipmentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PendingShipmentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubPhysicalFormTypeFormat = new DefaultStubPhysicalFormTypeFormat {}
  trait DefaultStubPhysicalFormTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PhysicalFormType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PhysicalFormType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PhysicalFormType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PhysicalFormType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PhysicalFormType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubPhysicalPackagingTypeFormat = new DefaultStubPhysicalPackagingTypeFormat {}
  trait DefaultStubPhysicalPackagingTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PhysicalPackagingType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PhysicalPackagingType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PhysicalPackagingType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PhysicalPackagingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PhysicalPackagingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPickupDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PickupDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PickupDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PickupDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReadyDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LatestPickupDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CourierInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestSource")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.PickupDetail(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PickupRequestType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PickupRequestSourceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PickupDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ReadyDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("ReadyDateTime"), __scope, false) } getOrElse {Nil},
        __obj.LatestPickupDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("LatestPickupDateTime"), __scope, false) } getOrElse {Nil},
        __obj.CourierInstructions map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CourierInstructions"), __scope, false) } getOrElse {Nil},
        __obj.RequestType map { scalaxb.toXML[com.fedex.ship.stub.PickupRequestType](_, Some("http://fedex.com/ws/ship/v17"), Some("RequestType"), __scope, false) } getOrElse {Nil},
        __obj.RequestSource map { scalaxb.toXML[com.fedex.ship.stub.PickupRequestSourceType](_, Some("http://fedex.com/ws/ship/v17"), Some("RequestSource"), __scope, false) } getOrElse {Nil})

  }

  def buildStubPickupRequestSourceTypeFormat = new DefaultStubPickupRequestSourceTypeFormat {}
  trait DefaultStubPickupRequestSourceTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PickupRequestSourceType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PickupRequestSourceType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PickupRequestSourceType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PickupRequestSourceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PickupRequestSourceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubPickupRequestTypeFormat = new DefaultStubPickupRequestTypeFormat {}
  trait DefaultStubPickupRequestTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PickupRequestType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PickupRequestType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PickupRequestType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PickupRequestType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PickupRequestType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubPricingCodeTypeFormat = new DefaultStubPricingCodeTypeFormat {}
  trait DefaultStubPricingCodeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PricingCodeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PricingCodeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PricingCodeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PricingCodeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PricingCodeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPrintedReferenceFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PrintedReference] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PrintedReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PrintedReference] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.PrintedReference(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PrintedReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PrintedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.PrintedReferenceType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  def buildStubPrintedReferenceTypeFormat = new DefaultStubPrintedReferenceTypeFormat {}
  trait DefaultStubPrintedReferenceTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PrintedReferenceType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PrintedReferenceType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PrintedReferenceType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PrintedReferenceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PrintedReferenceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubPriorityAlertDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.PriorityAlertDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("PriorityAlertDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.PriorityAlertDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EnhancementTypes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Content")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.PriorityAlertDetail(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.PriorityAlertEnhancementType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.PriorityAlertDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EnhancementTypes flatMap { scalaxb.toXML[com.fedex.ship.stub.PriorityAlertEnhancementType](_, Some("http://fedex.com/ws/ship/v17"), Some("EnhancementTypes"), __scope, false) },
        __obj.Content flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Content"), __scope, false) })

  }

  def buildStubPriorityAlertEnhancementTypeFormat = new DefaultStubPriorityAlertEnhancementTypeFormat {}
  trait DefaultStubPriorityAlertEnhancementTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PriorityAlertEnhancementType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PriorityAlertEnhancementType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PriorityAlertEnhancementType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PriorityAlertEnhancementType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PriorityAlertEnhancementType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubProcessShipmentReplyFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ProcessShipmentReply] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ProcessShipmentReply")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ProcessShipmentReply] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HighestSeverity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Notifications")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "JobId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CompletedShipmentDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ErrorLabels")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.ProcessShipmentReply(scalaxb.fromXML[com.fedex.ship.stub.NotificationSeverityType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Notification](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedShipmentDetail](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocument](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ProcessShipmentReply, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.NotificationSeverityType](__obj.HighestSeverity, Some("http://fedex.com/ws/ship/v17"), Some("HighestSeverity"), __scope, false),
        __obj.Notifications flatMap { scalaxb.toXML[com.fedex.ship.stub.Notification](_, Some("http://fedex.com/ws/ship/v17"), Some("Notifications"), __scope, false) },
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false),
        __obj.JobId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("JobId"), __scope, false) } getOrElse {Nil},
        __obj.CompletedShipmentDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CompletedShipmentDetail"), __scope, false) } getOrElse {Nil},
        __obj.ErrorLabels flatMap { scalaxb.toXML[com.fedex.ship.stub.ShippingDocument](_, Some("http://fedex.com/ws/ship/v17"), Some("ErrorLabels"), __scope, false) })

  }

  trait DefaultStubProcessShipmentRequestFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ProcessShipmentRequest] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ProcessShipmentRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ProcessShipmentRequest] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "WebAuthenticationDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClientDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestedShipment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.ProcessShipmentRequest(scalaxb.fromXML[com.fedex.ship.stub.WebAuthenticationDetail](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.ClientDetail](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.RequestedShipment](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ProcessShipmentRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.WebAuthenticationDetail](__obj.WebAuthenticationDetail, Some("http://fedex.com/ws/ship/v17"), Some("WebAuthenticationDetail"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.ClientDetail](__obj.ClientDetail, Some("http://fedex.com/ws/ship/v17"), Some("ClientDetail"), __scope, false),
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.RequestedShipment](__obj.RequestedShipment, Some("http://fedex.com/ws/ship/v17"), Some("RequestedShipment"), __scope, false))

  }

  trait DefaultStubProcessTagReplyFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ProcessTagReply] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ProcessTagReply")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ProcessTagReply] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HighestSeverity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Notifications")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CompletedShipmentDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.ProcessTagReply(scalaxb.fromXML[com.fedex.ship.stub.NotificationSeverityType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Notification](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CompletedShipmentDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ProcessTagReply, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.NotificationSeverityType](__obj.HighestSeverity, Some("http://fedex.com/ws/ship/v17"), Some("HighestSeverity"), __scope, false),
        __obj.Notifications flatMap { scalaxb.toXML[com.fedex.ship.stub.Notification](_, Some("http://fedex.com/ws/ship/v17"), Some("Notifications"), __scope, false) },
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false),
        __obj.CompletedShipmentDetail map { scalaxb.toXML[com.fedex.ship.stub.CompletedShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CompletedShipmentDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubProcessTagRequestFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ProcessTagRequest] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ProcessTagRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ProcessTagRequest] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "WebAuthenticationDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClientDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestedShipment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.ProcessTagRequest(scalaxb.fromXML[com.fedex.ship.stub.WebAuthenticationDetail](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.ClientDetail](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.RequestedShipment](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ProcessTagRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.WebAuthenticationDetail](__obj.WebAuthenticationDetail, Some("http://fedex.com/ws/ship/v17"), Some("WebAuthenticationDetail"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.ClientDetail](__obj.ClientDetail, Some("http://fedex.com/ws/ship/v17"), Some("ClientDetail"), __scope, false),
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.RequestedShipment](__obj.RequestedShipment, Some("http://fedex.com/ws/ship/v17"), Some("RequestedShipment"), __scope, false))

  }

  def buildStubPurposeOfShipmentTypeFormat = new DefaultStubPurposeOfShipmentTypeFormat {}
  trait DefaultStubPurposeOfShipmentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.PurposeOfShipmentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.PurposeOfShipmentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.PurposeOfShipmentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.PurposeOfShipmentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.PurposeOfShipmentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRadioactiveContainerClassTypeFormat = new DefaultStubRadioactiveContainerClassTypeFormat {}
  trait DefaultStubRadioactiveContainerClassTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RadioactiveContainerClassType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RadioactiveContainerClassType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RadioactiveContainerClassType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RadioactiveContainerClassType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RadioactiveContainerClassType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRadioactiveLabelTypeFormat = new DefaultStubRadioactiveLabelTypeFormat {}
  trait DefaultStubRadioactiveLabelTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RadioactiveLabelType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RadioactiveLabelType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RadioactiveLabelType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RadioactiveLabelType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RadioactiveLabelType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRadioactivityDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RadioactivityDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RadioactivityDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RadioactivityDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransportIndex")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SurfaceReading")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CriticalitySafetyIndex")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Dimensions")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.RadioactivityDetail(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Dimensions](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RadioactivityDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TransportIndex map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("TransportIndex"), __scope, false) } getOrElse {Nil},
        __obj.SurfaceReading map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("SurfaceReading"), __scope, false) } getOrElse {Nil},
        __obj.CriticalitySafetyIndex map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("CriticalitySafetyIndex"), __scope, false) } getOrElse {Nil},
        __obj.Dimensions map { scalaxb.toXML[com.fedex.ship.stub.Dimensions](_, Some("http://fedex.com/ws/ship/v17"), Some("Dimensions"), __scope, false) } getOrElse {Nil})

  }

  def buildStubRadioactivityUnitOfMeasureFormat = new DefaultStubRadioactivityUnitOfMeasureFormat {}
  trait DefaultStubRadioactivityUnitOfMeasureFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RadioactivityUnitOfMeasure] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RadioactivityUnitOfMeasure] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RadioactivityUnitOfMeasure.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RadioactivityUnitOfMeasure.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RadioactivityUnitOfMeasure, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRadionuclideActivityFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RadionuclideActivity] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RadionuclideActivity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RadionuclideActivity] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UnitOfMeasure")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.RadionuclideActivity(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RadioactivityUnitOfMeasure](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RadionuclideActivity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Value map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil},
        __obj.UnitOfMeasure map { scalaxb.toXML[com.fedex.ship.stub.RadioactivityUnitOfMeasure](_, Some("http://fedex.com/ws/ship/v17"), Some("UnitOfMeasure"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubRadionuclideDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RadionuclideDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RadionuclideDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RadionuclideDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Radionuclide")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Activity")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExceptedPackagingIsReportableQuantity")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PhysicalForm")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ChemicalForm")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.RadionuclideDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RadionuclideActivity](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PhysicalFormType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RadionuclideDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Radionuclide map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Radionuclide"), __scope, false) } getOrElse {Nil},
        __obj.Activity map { scalaxb.toXML[com.fedex.ship.stub.RadionuclideActivity](_, Some("http://fedex.com/ws/ship/v17"), Some("Activity"), __scope, false) } getOrElse {Nil},
        __obj.ExceptedPackagingIsReportableQuantity map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("ExceptedPackagingIsReportableQuantity"), __scope, false) } getOrElse {Nil},
        __obj.PhysicalForm map { scalaxb.toXML[com.fedex.ship.stub.PhysicalFormType](_, Some("http://fedex.com/ws/ship/v17"), Some("PhysicalForm"), __scope, false) } getOrElse {Nil},
        __obj.ChemicalForm map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ChemicalForm"), __scope, false) } getOrElse {Nil})

  }

  def buildStubRateDimensionalDivisorTypeFormat = new DefaultStubRateDimensionalDivisorTypeFormat {}
  trait DefaultStubRateDimensionalDivisorTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RateDimensionalDivisorType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RateDimensionalDivisorType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RateDimensionalDivisorType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RateDimensionalDivisorType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RateDimensionalDivisorType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRateDiscountFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RateDiscount] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RateDiscount")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RateDiscount] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateDiscountType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Percent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.RateDiscount(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RateDiscountType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RateDiscount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RateDiscountType map { scalaxb.toXML[com.fedex.ship.stub.RateDiscountType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateDiscountType"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Percent map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Percent"), __scope, false) } getOrElse {Nil})

  }

  def buildStubRateDiscountTypeFormat = new DefaultStubRateDiscountTypeFormat {}
  trait DefaultStubRateDiscountTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RateDiscountType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RateDiscountType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RateDiscountType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RateDiscountType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RateDiscountType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRateElementBasisTypeFormat = new DefaultStubRateElementBasisTypeFormat {}
  trait DefaultStubRateElementBasisTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RateElementBasisType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RateElementBasisType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RateElementBasisType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RateElementBasisType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RateElementBasisType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRateRequestTypeFormat = new DefaultStubRateRequestTypeFormat {}
  trait DefaultStubRateRequestTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RateRequestType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RateRequestType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RateRequestType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RateRequestType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RateRequestType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRateTypeBasisTypeFormat = new DefaultStubRateTypeBasisTypeFormat {}
  trait DefaultStubRateTypeBasisTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RateTypeBasisType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RateTypeBasisType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RateTypeBasisType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RateTypeBasisType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RateTypeBasisType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRatedWeightMethodFormat = new DefaultStubRatedWeightMethodFormat {}
  trait DefaultStubRatedWeightMethodFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RatedWeightMethod] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RatedWeightMethod] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RatedWeightMethod.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RatedWeightMethod.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RatedWeightMethod, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRebateFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Rebate] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Rebate")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Rebate] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RebateType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Percent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.Rebate(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RebateType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Rebate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RebateType map { scalaxb.toXML[com.fedex.ship.stub.RebateType](_, Some("http://fedex.com/ws/ship/v17"), Some("RebateType"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Percent map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Percent"), __scope, false) } getOrElse {Nil})

  }

  def buildStubRebateTypeFormat = new DefaultStubRebateTypeFormat {}
  trait DefaultStubRebateTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RebateType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RebateType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RebateType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RebateType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RebateType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRecipientCustomsIdFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RecipientCustomsId] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RecipientCustomsId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RecipientCustomsId] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.RecipientCustomsId(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RecipientCustomsIdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RecipientCustomsId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.RecipientCustomsIdType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  def buildStubRecipientCustomsIdTypeFormat = new DefaultStubRecipientCustomsIdTypeFormat {}
  trait DefaultStubRecipientCustomsIdTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RecipientCustomsIdType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RecipientCustomsIdType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RecipientCustomsIdType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RecipientCustomsIdType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RecipientCustomsIdType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRecommendedDocumentSpecificationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RecommendedDocumentSpecification] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RecommendedDocumentSpecification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RecommendedDocumentSpecification] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Types")) ^^
      { case p1 =>
      com.fedex.ship.stub.RecommendedDocumentSpecification(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RecommendedDocumentType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RecommendedDocumentSpecification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Types flatMap { scalaxb.toXML[com.fedex.ship.stub.RecommendedDocumentType](_, Some("http://fedex.com/ws/ship/v17"), Some("Types"), __scope, false) })

  }

  def buildStubRecommendedDocumentTypeFormat = new DefaultStubRecommendedDocumentTypeFormat {}
  trait DefaultStubRecommendedDocumentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RecommendedDocumentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RecommendedDocumentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RecommendedDocumentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RecommendedDocumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RecommendedDocumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRegulatoryControlTypeFormat = new DefaultStubRegulatoryControlTypeFormat {}
  trait DefaultStubRegulatoryControlTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RegulatoryControlType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RegulatoryControlType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RegulatoryControlType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RegulatoryControlType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RegulatoryControlType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRegulatoryLabelContentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RegulatoryLabelContentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RegulatoryLabelContentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RegulatoryLabelContentDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "GenerationOptions")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.RegulatoryLabelContentDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RegulatoryLabelType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RegulatoryLabelContentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.RegulatoryLabelType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.GenerationOptions flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerSpecifiedLabelGenerationOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("GenerationOptions"), __scope, false) })

  }

  def buildStubRegulatoryLabelTypeFormat = new DefaultStubRegulatoryLabelTypeFormat {}
  trait DefaultStubRegulatoryLabelTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RegulatoryLabelType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RegulatoryLabelType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RegulatoryLabelType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RegulatoryLabelType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RegulatoryLabelType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubRelativeVerticalPositionTypeFormat = new DefaultStubRelativeVerticalPositionTypeFormat {}
  trait DefaultStubRelativeVerticalPositionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RelativeVerticalPositionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RelativeVerticalPositionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RelativeVerticalPositionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RelativeVerticalPositionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RelativeVerticalPositionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRequestedPackageLineItemFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RequestedPackageLineItem] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RequestedPackageLineItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RequestedPackageLineItem] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SequenceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "GroupNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "GroupPackageCount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "VariableHandlingChargeDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "InsuredValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Weight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Dimensions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PhysicalPackaging")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ItemDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ItemDescriptionForClearance")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerReferences")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialServicesRequested")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ContentRecords")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      com.fedex.ship.stub.RequestedPackageLineItem(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VariableHandlingChargeDetail](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Dimensions](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PhysicalPackagingType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomerReference](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PackageSpecialServicesRequested](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ContentRecord](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RequestedPackageLineItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SequenceNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("SequenceNumber"), __scope, false) } getOrElse {Nil},
        __obj.GroupNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("GroupNumber"), __scope, false) } getOrElse {Nil},
        __obj.GroupPackageCount map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("GroupPackageCount"), __scope, false) } getOrElse {Nil},
        __obj.VariableHandlingChargeDetail map { scalaxb.toXML[com.fedex.ship.stub.VariableHandlingChargeDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("VariableHandlingChargeDetail"), __scope, false) } getOrElse {Nil},
        __obj.InsuredValue map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("InsuredValue"), __scope, false) } getOrElse {Nil},
        __obj.Weight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("Weight"), __scope, false) } getOrElse {Nil},
        __obj.Dimensions map { scalaxb.toXML[com.fedex.ship.stub.Dimensions](_, Some("http://fedex.com/ws/ship/v17"), Some("Dimensions"), __scope, false) } getOrElse {Nil},
        __obj.PhysicalPackaging map { scalaxb.toXML[com.fedex.ship.stub.PhysicalPackagingType](_, Some("http://fedex.com/ws/ship/v17"), Some("PhysicalPackaging"), __scope, false) } getOrElse {Nil},
        __obj.ItemDescription map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ItemDescription"), __scope, false) } getOrElse {Nil},
        __obj.ItemDescriptionForClearance map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ItemDescriptionForClearance"), __scope, false) } getOrElse {Nil},
        __obj.CustomerReferences flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomerReference](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerReferences"), __scope, false) },
        __obj.SpecialServicesRequested map { scalaxb.toXML[com.fedex.ship.stub.PackageSpecialServicesRequested](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialServicesRequested"), __scope, false) } getOrElse {Nil},
        __obj.ContentRecords flatMap { scalaxb.toXML[com.fedex.ship.stub.ContentRecord](_, Some("http://fedex.com/ws/ship/v17"), Some("ContentRecords"), __scope, false) })

  }

  trait DefaultStubRequestedShipmentFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.RequestedShipment] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("RequestedShipment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.RequestedShipment] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipTimestamp")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DropoffType")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ServiceType")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackagingType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ManifestDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalInsuredValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PreferredCurrency")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Shipper")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Recipient")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RecipientLocationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Origin")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SoldTo")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShippingChargesPayment")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialServicesRequested")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExpressFreightDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightShipmentDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeliveryInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "VariableHandlingChargeDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomsClearanceDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PickupDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SmartPostDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "BlockInsightVisibility")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelSpecification")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShippingDocumentSpecification")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateRequestTypes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EdtRequestType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MasterTrackingId")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackageCount")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ConfigurationData")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestedPackageLineItems")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 =>
      com.fedex.ship.stub.RequestedShipment(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.DropoffType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.ServiceType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.PackagingType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentManifestDetail](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.Party](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.Party](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ContactAndAddress](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Party](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Payment](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentSpecialServicesRequested](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ExpressFreightDetail](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightShipmentDetail](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VariableHandlingChargeDetail](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomsClearanceDetail](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PickupDetail](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SmartPostShipmentDetail](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.LabelSpecification](p24, scalaxb.ElemName(node) :: stack),
        p25.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentSpecification](_, scalaxb.ElemName(node) :: stack) },
        p26.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RateRequestType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EdtRequestType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TrackingId](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p29, scalaxb.ElemName(node) :: stack),
        p30.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentConfigurationData](_, scalaxb.ElemName(node) :: stack) },
        p31.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RequestedPackageLineItem](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.RequestedShipment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ShipTimestamp, Some("http://fedex.com/ws/ship/v17"), Some("ShipTimestamp"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.DropoffType](__obj.DropoffType, Some("http://fedex.com/ws/ship/v17"), Some("DropoffType"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.ServiceType](__obj.ServiceType, Some("http://fedex.com/ws/ship/v17"), Some("ServiceType"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.PackagingType](__obj.PackagingType, Some("http://fedex.com/ws/ship/v17"), Some("PackagingType"), __scope, false),
        __obj.ManifestDetail map { scalaxb.toXML[com.fedex.ship.stub.ShipmentManifestDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ManifestDetail"), __scope, false) } getOrElse {Nil},
        __obj.TotalWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalWeight"), __scope, false) } getOrElse {Nil},
        __obj.TotalInsuredValue map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalInsuredValue"), __scope, false) } getOrElse {Nil},
        __obj.PreferredCurrency map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PreferredCurrency"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.Party](__obj.Shipper, Some("http://fedex.com/ws/ship/v17"), Some("Shipper"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.Party](__obj.Recipient, Some("http://fedex.com/ws/ship/v17"), Some("Recipient"), __scope, false),
        __obj.RecipientLocationNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("RecipientLocationNumber"), __scope, false) } getOrElse {Nil},
        __obj.Origin map { scalaxb.toXML[com.fedex.ship.stub.ContactAndAddress](_, Some("http://fedex.com/ws/ship/v17"), Some("Origin"), __scope, false) } getOrElse {Nil},
        __obj.SoldTo map { scalaxb.toXML[com.fedex.ship.stub.Party](_, Some("http://fedex.com/ws/ship/v17"), Some("SoldTo"), __scope, false) } getOrElse {Nil},
        __obj.ShippingChargesPayment map { scalaxb.toXML[com.fedex.ship.stub.Payment](_, Some("http://fedex.com/ws/ship/v17"), Some("ShippingChargesPayment"), __scope, false) } getOrElse {Nil},
        __obj.SpecialServicesRequested map { scalaxb.toXML[com.fedex.ship.stub.ShipmentSpecialServicesRequested](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialServicesRequested"), __scope, false) } getOrElse {Nil},
        __obj.ExpressFreightDetail map { scalaxb.toXML[com.fedex.ship.stub.ExpressFreightDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ExpressFreightDetail"), __scope, false) } getOrElse {Nil},
        __obj.FreightShipmentDetail map { scalaxb.toXML[com.fedex.ship.stub.FreightShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightShipmentDetail"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryInstructions map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DeliveryInstructions"), __scope, false) } getOrElse {Nil},
        __obj.VariableHandlingChargeDetail map { scalaxb.toXML[com.fedex.ship.stub.VariableHandlingChargeDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("VariableHandlingChargeDetail"), __scope, false) } getOrElse {Nil},
        __obj.CustomsClearanceDetail map { scalaxb.toXML[com.fedex.ship.stub.CustomsClearanceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomsClearanceDetail"), __scope, false) } getOrElse {Nil},
        __obj.PickupDetail map { scalaxb.toXML[com.fedex.ship.stub.PickupDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("PickupDetail"), __scope, false) } getOrElse {Nil},
        __obj.SmartPostDetail map { scalaxb.toXML[com.fedex.ship.stub.SmartPostShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("SmartPostDetail"), __scope, false) } getOrElse {Nil},
        __obj.BlockInsightVisibility map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("BlockInsightVisibility"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.LabelSpecification](__obj.LabelSpecification, Some("http://fedex.com/ws/ship/v17"), Some("LabelSpecification"), __scope, false),
        __obj.ShippingDocumentSpecification map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentSpecification](_, Some("http://fedex.com/ws/ship/v17"), Some("ShippingDocumentSpecification"), __scope, false) } getOrElse {Nil},
        __obj.RateRequestTypes flatMap { scalaxb.toXML[com.fedex.ship.stub.RateRequestType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateRequestTypes"), __scope, false) },
        __obj.EdtRequestType map { scalaxb.toXML[com.fedex.ship.stub.EdtRequestType](_, Some("http://fedex.com/ws/ship/v17"), Some("EdtRequestType"), __scope, false) } getOrElse {Nil},
        __obj.MasterTrackingId map { scalaxb.toXML[com.fedex.ship.stub.TrackingId](_, Some("http://fedex.com/ws/ship/v17"), Some("MasterTrackingId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.PackageCount, Some("http://fedex.com/ws/ship/v17"), Some("PackageCount"), __scope, false),
        __obj.ConfigurationData map { scalaxb.toXML[com.fedex.ship.stub.ShipmentConfigurationData](_, Some("http://fedex.com/ws/ship/v17"), Some("ConfigurationData"), __scope, false) } getOrElse {Nil},
        __obj.RequestedPackageLineItems flatMap { scalaxb.toXML[com.fedex.ship.stub.RequestedPackageLineItem](_, Some("http://fedex.com/ws/ship/v17"), Some("RequestedPackageLineItems"), __scope, false) })

  }

  def buildStubRequestedShippingDocumentTypeFormat = new DefaultStubRequestedShippingDocumentTypeFormat {}
  trait DefaultStubRequestedShippingDocumentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RequestedShippingDocumentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RequestedShippingDocumentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RequestedShippingDocumentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RequestedShippingDocumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RequestedShippingDocumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubReturnAssociationDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ReturnAssociationDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ReturnAssociationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ReturnAssociationDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TrackingNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipDate")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ReturnAssociationDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ReturnAssociationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TrackingNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("TrackingNumber"), __scope, false) } getOrElse {Nil},
        __obj.ShipDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipDate"), __scope, false) } getOrElse {Nil})

  }

  def buildStubReturnEMailAllowedSpecialServiceTypeFormat = new DefaultStubReturnEMailAllowedSpecialServiceTypeFormat {}
  trait DefaultStubReturnEMailAllowedSpecialServiceTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubReturnEMailDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ReturnEMailDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ReturnEMailDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ReturnEMailDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MerchantPhoneNumber")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AllowedSpecialServices")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ReturnEMailDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ReturnEMailDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.MerchantPhoneNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("MerchantPhoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.AllowedSpecialServices flatMap { scalaxb.toXML[com.fedex.ship.stub.ReturnEMailAllowedSpecialServiceType](_, Some("http://fedex.com/ws/ship/v17"), Some("AllowedSpecialServices"), __scope, false) })

  }

  trait DefaultStubReturnInstructionsDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ReturnInstructionsDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ReturnInstructionsDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ReturnInstructionsDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Format")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomText")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ReturnInstructionsDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentFormat](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ReturnInstructionsDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Format map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentFormat](_, Some("http://fedex.com/ws/ship/v17"), Some("Format"), __scope, false) } getOrElse {Nil},
        __obj.CustomText map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomText"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubReturnShipmentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ReturnShipmentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ReturnShipmentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ReturnShipmentDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReturnType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Rma")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReturnEMailDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReturnAssociation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.ReturnShipmentDetail(scalaxb.fromXML[com.fedex.ship.stub.ReturnType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Rma](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnEMailDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnAssociationDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ReturnShipmentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.ReturnType](__obj.ReturnType, Some("http://fedex.com/ws/ship/v17"), Some("ReturnType"), __scope, false),
        __obj.Rma map { scalaxb.toXML[com.fedex.ship.stub.Rma](_, Some("http://fedex.com/ws/ship/v17"), Some("Rma"), __scope, false) } getOrElse {Nil},
        __obj.ReturnEMailDetail map { scalaxb.toXML[com.fedex.ship.stub.ReturnEMailDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ReturnEMailDetail"), __scope, false) } getOrElse {Nil},
        __obj.ReturnAssociation map { scalaxb.toXML[com.fedex.ship.stub.ReturnAssociationDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ReturnAssociation"), __scope, false) } getOrElse {Nil})

  }

  def buildStubReturnTypeFormat = new DefaultStubReturnTypeFormat {}
  trait DefaultStubReturnTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ReturnType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ReturnType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ReturnType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ReturnType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ReturnType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubReturnedRateTypeFormat = new DefaultStubReturnedRateTypeFormat {}
  trait DefaultStubReturnedRateTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ReturnedRateType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ReturnedRateType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ReturnedRateType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ReturnedRateType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ReturnedRateType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubReturnedShippingDocumentTypeFormat = new DefaultStubReturnedShippingDocumentTypeFormat {}
  trait DefaultStubReturnedShippingDocumentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ReturnedShippingDocumentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ReturnedShippingDocumentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ReturnedShippingDocumentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ReturnedShippingDocumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ReturnedShippingDocumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubRmaFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Rma] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Rma")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Rma] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Reason")) ^^
      { case p1 =>
      com.fedex.ship.stub.Rma(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Rma, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Reason map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Reason"), __scope, false) } getOrElse {Nil})

  }

  def buildStubRotationTypeFormat = new DefaultStubRotationTypeFormat {}
  trait DefaultStubRotationTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.RotationType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.RotationType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.RotationType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.RotationType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.RotationType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubSecondaryBarcodeTypeFormat = new DefaultStubSecondaryBarcodeTypeFormat {}
  trait DefaultStubSecondaryBarcodeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SecondaryBarcodeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SecondaryBarcodeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SecondaryBarcodeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SecondaryBarcodeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SecondaryBarcodeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubServiceTypeFormat = new DefaultStubServiceTypeFormat {}
  trait DefaultStubServiceTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ServiceType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ServiceType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ServiceType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ServiceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ServiceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubShipmentConfigurationDataFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentConfigurationData] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentConfigurationData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentConfigurationData] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DangerousGoodsPackageConfigurations")) ^^
      { case p1 =>
      com.fedex.ship.stub.ShipmentConfigurationData(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsDetail](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentConfigurationData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DangerousGoodsPackageConfigurations flatMap { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DangerousGoodsPackageConfigurations"), __scope, false) })

  }

  trait DefaultStubShipmentDryIceDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentDryIceDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentDryIceDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentDryIceDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackageCount")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalWeight")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ShipmentDryIceDetail(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.Weight](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentDryIceDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.PackageCount, Some("http://fedex.com/ws/ship/v17"), Some("PackageCount"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.Weight](__obj.TotalWeight, Some("http://fedex.com/ws/ship/v17"), Some("TotalWeight"), __scope, false))

  }

  trait DefaultStubShipmentLegRateDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentLegRateDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentLegRateDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentLegRateDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LegDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LegOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LegOriginLocationId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LegDestination")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LegDestinationLocationId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateScale")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateZone")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PricingCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RatedWeightMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MinimumChargeType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CurrencyExchangeRate")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialRatingApplied")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DimDivisor")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DimDivisorType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FuelSurchargePercent")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalBillingWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalDimWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalBaseCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalFreightDiscounts")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetFreight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalSurcharges")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetFedExCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalRebates")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalDutiesAndTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetChargeWithDutiesAndTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightRateDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightDiscounts")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Rebates")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Surcharges")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Taxes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DutiesAndTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "VariableHandlingCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalVariableHandlingCharges")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 =>
      com.fedex.ship.stub.ShipmentLegRateDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Address](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Address](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnedRateType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PricingCodeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RatedWeightMethod](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.MinimumChargeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CurrencyExchangeRate](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.SpecialRatingAppliedType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RateDimensionalDivisorType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightRateDetail](_, scalaxb.ElemName(node) :: stack) },
        p30.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RateDiscount](_, scalaxb.ElemName(node) :: stack) },
        p31.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Rebate](_, scalaxb.ElemName(node) :: stack) },
        p32.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Surcharge](_, scalaxb.ElemName(node) :: stack) },
        p33.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Tax](_, scalaxb.ElemName(node) :: stack) },
        p34.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EdtCommodityTax](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VariableHandlingCharges](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VariableHandlingCharges](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentLegRateDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.LegDescription map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LegDescription"), __scope, false) } getOrElse {Nil},
        __obj.LegOrigin map { scalaxb.toXML[com.fedex.ship.stub.Address](_, Some("http://fedex.com/ws/ship/v17"), Some("LegOrigin"), __scope, false) } getOrElse {Nil},
        __obj.LegOriginLocationId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LegOriginLocationId"), __scope, false) } getOrElse {Nil},
        __obj.LegDestination map { scalaxb.toXML[com.fedex.ship.stub.Address](_, Some("http://fedex.com/ws/ship/v17"), Some("LegDestination"), __scope, false) } getOrElse {Nil},
        __obj.LegDestinationLocationId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LegDestinationLocationId"), __scope, false) } getOrElse {Nil},
        __obj.RateType map { scalaxb.toXML[com.fedex.ship.stub.ReturnedRateType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateType"), __scope, false) } getOrElse {Nil},
        __obj.RateScale map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("RateScale"), __scope, false) } getOrElse {Nil},
        __obj.RateZone map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("RateZone"), __scope, false) } getOrElse {Nil},
        __obj.PricingCode map { scalaxb.toXML[com.fedex.ship.stub.PricingCodeType](_, Some("http://fedex.com/ws/ship/v17"), Some("PricingCode"), __scope, false) } getOrElse {Nil},
        __obj.RatedWeightMethod map { scalaxb.toXML[com.fedex.ship.stub.RatedWeightMethod](_, Some("http://fedex.com/ws/ship/v17"), Some("RatedWeightMethod"), __scope, false) } getOrElse {Nil},
        __obj.MinimumChargeType map { scalaxb.toXML[com.fedex.ship.stub.MinimumChargeType](_, Some("http://fedex.com/ws/ship/v17"), Some("MinimumChargeType"), __scope, false) } getOrElse {Nil},
        __obj.CurrencyExchangeRate map { scalaxb.toXML[com.fedex.ship.stub.CurrencyExchangeRate](_, Some("http://fedex.com/ws/ship/v17"), Some("CurrencyExchangeRate"), __scope, false) } getOrElse {Nil},
        __obj.SpecialRatingApplied flatMap { scalaxb.toXML[com.fedex.ship.stub.SpecialRatingAppliedType](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialRatingApplied"), __scope, false) },
        __obj.DimDivisor map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("DimDivisor"), __scope, false) } getOrElse {Nil},
        __obj.DimDivisorType map { scalaxb.toXML[com.fedex.ship.stub.RateDimensionalDivisorType](_, Some("http://fedex.com/ws/ship/v17"), Some("DimDivisorType"), __scope, false) } getOrElse {Nil},
        __obj.FuelSurchargePercent map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("FuelSurchargePercent"), __scope, false) } getOrElse {Nil},
        __obj.TotalBillingWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalBillingWeight"), __scope, false) } getOrElse {Nil},
        __obj.TotalDimWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalDimWeight"), __scope, false) } getOrElse {Nil},
        __obj.TotalBaseCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalBaseCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalFreightDiscounts map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalFreightDiscounts"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetFreight map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetFreight"), __scope, false) } getOrElse {Nil},
        __obj.TotalSurcharges map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalSurcharges"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetFedExCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetFedExCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalTaxes map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalTaxes"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalRebates map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalRebates"), __scope, false) } getOrElse {Nil},
        __obj.TotalDutiesAndTaxes map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalDutiesAndTaxes"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetChargeWithDutiesAndTaxes map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetChargeWithDutiesAndTaxes"), __scope, false) } getOrElse {Nil},
        __obj.FreightRateDetail map { scalaxb.toXML[com.fedex.ship.stub.FreightRateDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightRateDetail"), __scope, false) } getOrElse {Nil},
        __obj.FreightDiscounts flatMap { scalaxb.toXML[com.fedex.ship.stub.RateDiscount](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightDiscounts"), __scope, false) },
        __obj.Rebates flatMap { scalaxb.toXML[com.fedex.ship.stub.Rebate](_, Some("http://fedex.com/ws/ship/v17"), Some("Rebates"), __scope, false) },
        __obj.Surcharges flatMap { scalaxb.toXML[com.fedex.ship.stub.Surcharge](_, Some("http://fedex.com/ws/ship/v17"), Some("Surcharges"), __scope, false) },
        __obj.Taxes flatMap { scalaxb.toXML[com.fedex.ship.stub.Tax](_, Some("http://fedex.com/ws/ship/v17"), Some("Taxes"), __scope, false) },
        __obj.DutiesAndTaxes flatMap { scalaxb.toXML[com.fedex.ship.stub.EdtCommodityTax](_, Some("http://fedex.com/ws/ship/v17"), Some("DutiesAndTaxes"), __scope, false) },
        __obj.VariableHandlingCharges map { scalaxb.toXML[com.fedex.ship.stub.VariableHandlingCharges](_, Some("http://fedex.com/ws/ship/v17"), Some("VariableHandlingCharges"), __scope, false) } getOrElse {Nil},
        __obj.TotalVariableHandlingCharges map { scalaxb.toXML[com.fedex.ship.stub.VariableHandlingCharges](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalVariableHandlingCharges"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShipmentManifestDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentManifestDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentManifestDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentManifestDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ManifestReferenceType")) ^^
      { case p1 =>
      com.fedex.ship.stub.ShipmentManifestDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomerReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentManifestDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ManifestReferenceType map { scalaxb.toXML[com.fedex.ship.stub.CustomerReferenceType](_, Some("http://fedex.com/ws/ship/v17"), Some("ManifestReferenceType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShipmentOperationalDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentOperationalDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentOperationalDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentOperationalDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UrsaPrefixCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UrsaSuffixCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OriginLocationId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OriginLocationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OriginServiceArea")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DestinationLocationId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DestinationLocationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DestinationServiceArea")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DestinationLocationStateOrProvinceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeliveryDate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeliveryDay")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PublishedDeliveryTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CommitDate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CommitDay")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransitTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MaximumTransitTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomTransitTime")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "IneligibleForMoneyBackGuarantee")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeliveryEligibilities")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AstraPlannedServiceLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AstraDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PostalCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "StateOrProvinceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CountryCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AirportId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ServiceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackagingCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Scac")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      com.fedex.ship.stub.ShipmentOperationalDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DayOfWeekType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DayOfWeekType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransitTimeType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransitTimeType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransitTimeType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p19.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.GroundDeliveryEligibilityType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentOperationalDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.UrsaPrefixCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("UrsaPrefixCode"), __scope, false) } getOrElse {Nil},
        __obj.UrsaSuffixCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("UrsaSuffixCode"), __scope, false) } getOrElse {Nil},
        __obj.OriginLocationId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("OriginLocationId"), __scope, false) } getOrElse {Nil},
        __obj.OriginLocationNumber map { scalaxb.toXML[Int](_, Some("http://fedex.com/ws/ship/v17"), Some("OriginLocationNumber"), __scope, false) } getOrElse {Nil},
        __obj.OriginServiceArea map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("OriginServiceArea"), __scope, false) } getOrElse {Nil},
        __obj.DestinationLocationId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DestinationLocationId"), __scope, false) } getOrElse {Nil},
        __obj.DestinationLocationNumber map { scalaxb.toXML[Int](_, Some("http://fedex.com/ws/ship/v17"), Some("DestinationLocationNumber"), __scope, false) } getOrElse {Nil},
        __obj.DestinationServiceArea map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DestinationServiceArea"), __scope, false) } getOrElse {Nil},
        __obj.DestinationLocationStateOrProvinceCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DestinationLocationStateOrProvinceCode"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("DeliveryDate"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryDay map { scalaxb.toXML[com.fedex.ship.stub.DayOfWeekType](_, Some("http://fedex.com/ws/ship/v17"), Some("DeliveryDay"), __scope, false) } getOrElse {Nil},
        __obj.PublishedDeliveryTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("PublishedDeliveryTime"), __scope, false) } getOrElse {Nil},
        __obj.CommitDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("CommitDate"), __scope, false) } getOrElse {Nil},
        __obj.CommitDay map { scalaxb.toXML[com.fedex.ship.stub.DayOfWeekType](_, Some("http://fedex.com/ws/ship/v17"), Some("CommitDay"), __scope, false) } getOrElse {Nil},
        __obj.TransitTime map { scalaxb.toXML[com.fedex.ship.stub.TransitTimeType](_, Some("http://fedex.com/ws/ship/v17"), Some("TransitTime"), __scope, false) } getOrElse {Nil},
        __obj.MaximumTransitTime map { scalaxb.toXML[com.fedex.ship.stub.TransitTimeType](_, Some("http://fedex.com/ws/ship/v17"), Some("MaximumTransitTime"), __scope, false) } getOrElse {Nil},
        __obj.CustomTransitTime map { scalaxb.toXML[com.fedex.ship.stub.TransitTimeType](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomTransitTime"), __scope, false) } getOrElse {Nil},
        __obj.IneligibleForMoneyBackGuarantee map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("IneligibleForMoneyBackGuarantee"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryEligibilities flatMap { scalaxb.toXML[com.fedex.ship.stub.GroundDeliveryEligibilityType](_, Some("http://fedex.com/ws/ship/v17"), Some("DeliveryEligibilities"), __scope, false) },
        __obj.AstraPlannedServiceLevel map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("AstraPlannedServiceLevel"), __scope, false) } getOrElse {Nil},
        __obj.AstraDescription map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("AstraDescription"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        __obj.StateOrProvinceCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("StateOrProvinceCode"), __scope, false) } getOrElse {Nil},
        __obj.CountryCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CountryCode"), __scope, false) } getOrElse {Nil},
        __obj.AirportId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("AirportId"), __scope, false) } getOrElse {Nil},
        __obj.ServiceCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ServiceCode"), __scope, false) } getOrElse {Nil},
        __obj.PackagingCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PackagingCode"), __scope, false) } getOrElse {Nil},
        __obj.Scac map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Scac"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShipmentRateDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentRateDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentRateDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentRateDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateScale")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateZone")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PricingCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RatedWeightMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MinimumChargeType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CurrencyExchangeRate")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialRatingApplied")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DimDivisor")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DimDivisorType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FuelSurchargePercent")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalBillingWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalDimWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalBaseCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalFreightDiscounts")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetFreight")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalSurcharges")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetFedExCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalRebates")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalDutiesAndTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalNetChargeWithDutiesAndTaxes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipmentLegRateDetails")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightRateDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightDiscounts")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Rebates")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Surcharges")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Taxes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DutiesAndTaxes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "VariableHandlingCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalVariableHandlingCharges")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      com.fedex.ship.stub.ShipmentRateDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnedRateType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PricingCodeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RatedWeightMethod](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.MinimumChargeType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CurrencyExchangeRate](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.SpecialRatingAppliedType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RateDimensionalDivisorType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Weight](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p24.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentLegRateDetail](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightRateDetail](_, scalaxb.ElemName(node) :: stack) },
        p26.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RateDiscount](_, scalaxb.ElemName(node) :: stack) },
        p27.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Rebate](_, scalaxb.ElemName(node) :: stack) },
        p28.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Surcharge](_, scalaxb.ElemName(node) :: stack) },
        p29.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Tax](_, scalaxb.ElemName(node) :: stack) },
        p30.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.EdtCommodityTax](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VariableHandlingCharges](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VariableHandlingCharges](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentRateDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RateType map { scalaxb.toXML[com.fedex.ship.stub.ReturnedRateType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateType"), __scope, false) } getOrElse {Nil},
        __obj.RateScale map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("RateScale"), __scope, false) } getOrElse {Nil},
        __obj.RateZone map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("RateZone"), __scope, false) } getOrElse {Nil},
        __obj.PricingCode map { scalaxb.toXML[com.fedex.ship.stub.PricingCodeType](_, Some("http://fedex.com/ws/ship/v17"), Some("PricingCode"), __scope, false) } getOrElse {Nil},
        __obj.RatedWeightMethod map { scalaxb.toXML[com.fedex.ship.stub.RatedWeightMethod](_, Some("http://fedex.com/ws/ship/v17"), Some("RatedWeightMethod"), __scope, false) } getOrElse {Nil},
        __obj.MinimumChargeType map { scalaxb.toXML[com.fedex.ship.stub.MinimumChargeType](_, Some("http://fedex.com/ws/ship/v17"), Some("MinimumChargeType"), __scope, false) } getOrElse {Nil},
        __obj.CurrencyExchangeRate map { scalaxb.toXML[com.fedex.ship.stub.CurrencyExchangeRate](_, Some("http://fedex.com/ws/ship/v17"), Some("CurrencyExchangeRate"), __scope, false) } getOrElse {Nil},
        __obj.SpecialRatingApplied flatMap { scalaxb.toXML[com.fedex.ship.stub.SpecialRatingAppliedType](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialRatingApplied"), __scope, false) },
        __obj.DimDivisor map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("DimDivisor"), __scope, false) } getOrElse {Nil},
        __obj.DimDivisorType map { scalaxb.toXML[com.fedex.ship.stub.RateDimensionalDivisorType](_, Some("http://fedex.com/ws/ship/v17"), Some("DimDivisorType"), __scope, false) } getOrElse {Nil},
        __obj.FuelSurchargePercent map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("FuelSurchargePercent"), __scope, false) } getOrElse {Nil},
        __obj.TotalBillingWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalBillingWeight"), __scope, false) } getOrElse {Nil},
        __obj.TotalDimWeight map { scalaxb.toXML[com.fedex.ship.stub.Weight](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalDimWeight"), __scope, false) } getOrElse {Nil},
        __obj.TotalBaseCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalBaseCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalFreightDiscounts map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalFreightDiscounts"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetFreight map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetFreight"), __scope, false) } getOrElse {Nil},
        __obj.TotalSurcharges map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalSurcharges"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetFedExCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetFedExCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalTaxes map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalTaxes"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalRebates map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalRebates"), __scope, false) } getOrElse {Nil},
        __obj.TotalDutiesAndTaxes map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalDutiesAndTaxes"), __scope, false) } getOrElse {Nil},
        __obj.TotalNetChargeWithDutiesAndTaxes map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalNetChargeWithDutiesAndTaxes"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentLegRateDetails flatMap { scalaxb.toXML[com.fedex.ship.stub.ShipmentLegRateDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipmentLegRateDetails"), __scope, false) },
        __obj.FreightRateDetail map { scalaxb.toXML[com.fedex.ship.stub.FreightRateDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightRateDetail"), __scope, false) } getOrElse {Nil},
        __obj.FreightDiscounts flatMap { scalaxb.toXML[com.fedex.ship.stub.RateDiscount](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightDiscounts"), __scope, false) },
        __obj.Rebates flatMap { scalaxb.toXML[com.fedex.ship.stub.Rebate](_, Some("http://fedex.com/ws/ship/v17"), Some("Rebates"), __scope, false) },
        __obj.Surcharges flatMap { scalaxb.toXML[com.fedex.ship.stub.Surcharge](_, Some("http://fedex.com/ws/ship/v17"), Some("Surcharges"), __scope, false) },
        __obj.Taxes flatMap { scalaxb.toXML[com.fedex.ship.stub.Tax](_, Some("http://fedex.com/ws/ship/v17"), Some("Taxes"), __scope, false) },
        __obj.DutiesAndTaxes flatMap { scalaxb.toXML[com.fedex.ship.stub.EdtCommodityTax](_, Some("http://fedex.com/ws/ship/v17"), Some("DutiesAndTaxes"), __scope, false) },
        __obj.VariableHandlingCharges map { scalaxb.toXML[com.fedex.ship.stub.VariableHandlingCharges](_, Some("http://fedex.com/ws/ship/v17"), Some("VariableHandlingCharges"), __scope, false) } getOrElse {Nil},
        __obj.TotalVariableHandlingCharges map { scalaxb.toXML[com.fedex.ship.stub.VariableHandlingCharges](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalVariableHandlingCharges"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShipmentRatingFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentRating] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentRating")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentRating] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ActualRateType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EffectiveNetDiscount")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipmentRateDetails")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.ShipmentRating(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnedRateType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentRateDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentRating, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ActualRateType map { scalaxb.toXML[com.fedex.ship.stub.ReturnedRateType](_, Some("http://fedex.com/ws/ship/v17"), Some("ActualRateType"), __scope, false) } getOrElse {Nil},
        __obj.EffectiveNetDiscount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("EffectiveNetDiscount"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentRateDetails flatMap { scalaxb.toXML[com.fedex.ship.stub.ShipmentRateDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipmentRateDetails"), __scope, false) })

  }

  trait DefaultStubShipmentReplyFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentReply] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentReply")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentReply] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HighestSeverity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Notifications")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.ShipmentReply(scalaxb.fromXML[com.fedex.ship.stub.NotificationSeverityType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Notification](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentReply, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.NotificationSeverityType](__obj.HighestSeverity, Some("http://fedex.com/ws/ship/v17"), Some("HighestSeverity"), __scope, false),
        __obj.Notifications flatMap { scalaxb.toXML[com.fedex.ship.stub.Notification](_, Some("http://fedex.com/ws/ship/v17"), Some("Notifications"), __scope, false) },
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false))

  }

  def buildStubShipmentSpecialServiceTypeFormat = new DefaultStubShipmentSpecialServiceTypeFormat {}
  trait DefaultStubShipmentSpecialServiceTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ShipmentSpecialServiceType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ShipmentSpecialServiceType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ShipmentSpecialServiceType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ShipmentSpecialServiceType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ShipmentSpecialServiceType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubShipmentSpecialServicesRequestedFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShipmentSpecialServicesRequested] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShipmentSpecialServicesRequested")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShipmentSpecialServicesRequested] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialServiceTypes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CodDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DeliveryOnInvoiceAcceptanceDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HoldAtLocationDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EMailNotificationDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReturnShipmentDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PendingShipmentDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "InternationalControlledExportDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "InternationalTrafficInArmsRegulationsDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShipmentDryIceDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HomeDeliveryPremiumDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightGuaranteeDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EtdDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomDeliveryWindowDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      com.fedex.ship.stub.ShipmentSpecialServicesRequested(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentSpecialServiceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CodDetail](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HoldAtLocationDetail](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EMailNotificationDetail](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnShipmentDetail](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.PendingShipmentDetail](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.InternationalControlledExportDetail](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShipmentDryIceDetail](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HomeDeliveryPremiumDetail](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightGuaranteeDetail](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EtdDetail](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CustomDeliveryWindowDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShipmentSpecialServicesRequested, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SpecialServiceTypes flatMap { scalaxb.toXML[com.fedex.ship.stub.ShipmentSpecialServiceType](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialServiceTypes"), __scope, false) },
        __obj.CodDetail map { scalaxb.toXML[com.fedex.ship.stub.CodDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CodDetail"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryOnInvoiceAcceptanceDetail map { scalaxb.toXML[com.fedex.ship.stub.DeliveryOnInvoiceAcceptanceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DeliveryOnInvoiceAcceptanceDetail"), __scope, false) } getOrElse {Nil},
        __obj.HoldAtLocationDetail map { scalaxb.toXML[com.fedex.ship.stub.HoldAtLocationDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("HoldAtLocationDetail"), __scope, false) } getOrElse {Nil},
        __obj.EMailNotificationDetail map { scalaxb.toXML[com.fedex.ship.stub.EMailNotificationDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("EMailNotificationDetail"), __scope, false) } getOrElse {Nil},
        __obj.ReturnShipmentDetail map { scalaxb.toXML[com.fedex.ship.stub.ReturnShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ReturnShipmentDetail"), __scope, false) } getOrElse {Nil},
        __obj.PendingShipmentDetail map { scalaxb.toXML[com.fedex.ship.stub.PendingShipmentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("PendingShipmentDetail"), __scope, false) } getOrElse {Nil},
        __obj.InternationalControlledExportDetail map { scalaxb.toXML[com.fedex.ship.stub.InternationalControlledExportDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("InternationalControlledExportDetail"), __scope, false) } getOrElse {Nil},
        __obj.InternationalTrafficInArmsRegulationsDetail map { scalaxb.toXML[com.fedex.ship.stub.InternationalTrafficInArmsRegulationsDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("InternationalTrafficInArmsRegulationsDetail"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentDryIceDetail map { scalaxb.toXML[com.fedex.ship.stub.ShipmentDryIceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ShipmentDryIceDetail"), __scope, false) } getOrElse {Nil},
        __obj.HomeDeliveryPremiumDetail map { scalaxb.toXML[com.fedex.ship.stub.HomeDeliveryPremiumDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("HomeDeliveryPremiumDetail"), __scope, false) } getOrElse {Nil},
        __obj.FreightGuaranteeDetail map { scalaxb.toXML[com.fedex.ship.stub.FreightGuaranteeDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightGuaranteeDetail"), __scope, false) } getOrElse {Nil},
        __obj.EtdDetail map { scalaxb.toXML[com.fedex.ship.stub.EtdDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("EtdDetail"), __scope, false) } getOrElse {Nil},
        __obj.CustomDeliveryWindowDetail map { scalaxb.toXML[com.fedex.ship.stub.CustomDeliveryWindowDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomDeliveryWindowDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShippingDocumentFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocument] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocument")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocument] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Localizations")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Grouping")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShippingDocumentDisposition")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AccessReference")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ImageType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Resolution")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CopiesToPrint")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Parts")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.fedex.ship.stub.ShippingDocument(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnedShippingDocumentType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.Localization](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentGroupingType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentDispositionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentImageType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentPart](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocument, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.ReturnedShippingDocumentType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Localizations flatMap { scalaxb.toXML[com.fedex.ship.stub.Localization](_, Some("http://fedex.com/ws/ship/v17"), Some("Localizations"), __scope, false) },
        __obj.Grouping map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentGroupingType](_, Some("http://fedex.com/ws/ship/v17"), Some("Grouping"), __scope, false) } getOrElse {Nil},
        __obj.ShippingDocumentDisposition map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentDispositionType](_, Some("http://fedex.com/ws/ship/v17"), Some("ShippingDocumentDisposition"), __scope, false) } getOrElse {Nil},
        __obj.AccessReference map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("AccessReference"), __scope, false) } getOrElse {Nil},
        __obj.ImageType map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentImageType](_, Some("http://fedex.com/ws/ship/v17"), Some("ImageType"), __scope, false) } getOrElse {Nil},
        __obj.Resolution map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("Resolution"), __scope, false) } getOrElse {Nil},
        __obj.CopiesToPrint map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("CopiesToPrint"), __scope, false) } getOrElse {Nil},
        __obj.Parts flatMap { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentPart](_, Some("http://fedex.com/ws/ship/v17"), Some("Parts"), __scope, false) })

  }

  trait DefaultStubShippingDocumentDispositionDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocumentDispositionDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocumentDispositionDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocumentDispositionDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DispositionType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Grouping")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EMailDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PrintDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.ShippingDocumentDispositionDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentDispositionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentGroupingType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentEMailDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentPrintDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocumentDispositionDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DispositionType map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentDispositionType](_, Some("http://fedex.com/ws/ship/v17"), Some("DispositionType"), __scope, false) } getOrElse {Nil},
        __obj.Grouping map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentGroupingType](_, Some("http://fedex.com/ws/ship/v17"), Some("Grouping"), __scope, false) } getOrElse {Nil},
        __obj.EMailDetail map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentEMailDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("EMailDetail"), __scope, false) } getOrElse {Nil},
        __obj.PrintDetail map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentPrintDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("PrintDetail"), __scope, false) } getOrElse {Nil})

  }

  def buildStubShippingDocumentDispositionTypeFormat = new DefaultStubShippingDocumentDispositionTypeFormat {}
  trait DefaultStubShippingDocumentDispositionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentDispositionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ShippingDocumentDispositionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ShippingDocumentDispositionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ShippingDocumentDispositionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ShippingDocumentDispositionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubShippingDocumentEMailDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocumentEMailDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocumentEMailDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocumentEMailDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EMailRecipients")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Grouping")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Localization")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.ShippingDocumentEMailDetail(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentEMailRecipient](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentEMailGroupingType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Localization](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocumentEMailDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EMailRecipients flatMap { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentEMailRecipient](_, Some("http://fedex.com/ws/ship/v17"), Some("EMailRecipients"), __scope, false) },
        __obj.Grouping map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentEMailGroupingType](_, Some("http://fedex.com/ws/ship/v17"), Some("Grouping"), __scope, false) } getOrElse {Nil},
        __obj.Localization map { scalaxb.toXML[com.fedex.ship.stub.Localization](_, Some("http://fedex.com/ws/ship/v17"), Some("Localization"), __scope, false) } getOrElse {Nil})

  }

  def buildStubShippingDocumentEMailGroupingTypeFormat = new DefaultStubShippingDocumentEMailGroupingTypeFormat {}
  trait DefaultStubShippingDocumentEMailGroupingTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentEMailGroupingType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ShippingDocumentEMailGroupingType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ShippingDocumentEMailGroupingType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ShippingDocumentEMailGroupingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ShippingDocumentEMailGroupingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubShippingDocumentEMailRecipientFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocumentEMailRecipient] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocumentEMailRecipient")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocumentEMailRecipient] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RecipientType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Address")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ShippingDocumentEMailRecipient(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.EMailNotificationRecipientType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocumentEMailRecipient, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RecipientType map { scalaxb.toXML[com.fedex.ship.stub.EMailNotificationRecipientType](_, Some("http://fedex.com/ws/ship/v17"), Some("RecipientType"), __scope, false) } getOrElse {Nil},
        __obj.Address map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShippingDocumentFormatFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocumentFormat] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocumentFormat")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocumentFormat] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Dispositions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TopOfPageOffset")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ImageType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "StockType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProvideInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OptionsRequested")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Localization")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomDocumentIdentifier")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.fedex.ship.stub.ShippingDocumentFormat(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentDispositionDetail](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.LinearMeasure](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentImageType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ShippingDocumentStockType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DocumentFormatOptionsRequested](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Localization](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocumentFormat, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Dispositions flatMap { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentDispositionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Dispositions"), __scope, false) },
        __obj.TopOfPageOffset map { scalaxb.toXML[com.fedex.ship.stub.LinearMeasure](_, Some("http://fedex.com/ws/ship/v17"), Some("TopOfPageOffset"), __scope, false) } getOrElse {Nil},
        __obj.ImageType map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentImageType](_, Some("http://fedex.com/ws/ship/v17"), Some("ImageType"), __scope, false) } getOrElse {Nil},
        __obj.StockType map { scalaxb.toXML[com.fedex.ship.stub.ShippingDocumentStockType](_, Some("http://fedex.com/ws/ship/v17"), Some("StockType"), __scope, false) } getOrElse {Nil},
        __obj.ProvideInstructions map { scalaxb.toXML[Boolean](_, Some("http://fedex.com/ws/ship/v17"), Some("ProvideInstructions"), __scope, false) } getOrElse {Nil},
        __obj.OptionsRequested map { scalaxb.toXML[com.fedex.ship.stub.DocumentFormatOptionsRequested](_, Some("http://fedex.com/ws/ship/v17"), Some("OptionsRequested"), __scope, false) } getOrElse {Nil},
        __obj.Localization map { scalaxb.toXML[com.fedex.ship.stub.Localization](_, Some("http://fedex.com/ws/ship/v17"), Some("Localization"), __scope, false) } getOrElse {Nil},
        __obj.CustomDocumentIdentifier map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomDocumentIdentifier"), __scope, false) } getOrElse {Nil})

  }

  def buildStubShippingDocumentGroupingTypeFormat = new DefaultStubShippingDocumentGroupingTypeFormat {}
  trait DefaultStubShippingDocumentGroupingTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentGroupingType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ShippingDocumentGroupingType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ShippingDocumentGroupingType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ShippingDocumentGroupingType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ShippingDocumentGroupingType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubShippingDocumentImageTypeFormat = new DefaultStubShippingDocumentImageTypeFormat {}
  trait DefaultStubShippingDocumentImageTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentImageType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ShippingDocumentImageType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ShippingDocumentImageType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ShippingDocumentImageType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ShippingDocumentImageType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubShippingDocumentPartFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocumentPart] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocumentPart")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocumentPart] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentPartSequenceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Image")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ShippingDocumentPart(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocumentPart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DocumentPartSequenceNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentPartSequenceNumber"), __scope, false) } getOrElse {Nil},
        __obj.Image map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("http://fedex.com/ws/ship/v17"), Some("Image"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShippingDocumentPrintDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocumentPrintDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocumentPrintDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocumentPrintDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PrinterId")) ^^
      { case p1 =>
      com.fedex.ship.stub.ShippingDocumentPrintDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocumentPrintDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PrinterId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PrinterId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubShippingDocumentSpecificationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ShippingDocumentSpecification] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ShippingDocumentSpecification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ShippingDocumentSpecification] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ShippingDocumentTypes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CertificateOfOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CommercialInvoiceDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomPackageDocumentDetail")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomShipmentDocumentDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExportDeclarationDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "GeneralAgencyAgreementDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NaftaCertificateOfOriginDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Op900Detail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DangerousGoodsShippersDeclarationDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FreightAddressLabelDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ReturnInstructionsDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      com.fedex.ship.stub.ShippingDocumentSpecification(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.RequestedShippingDocumentType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CertificateOfOriginDetail](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.CommercialInvoiceDetail](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomDocumentDetail](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.CustomDocumentDetail](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ExportDeclarationDetail](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.GeneralAgencyAgreementDetail](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NaftaCertificateOfOriginDetail](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Op900Detail](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.fedex.ship.stub.FreightAddressLabelDetail](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ReturnInstructionsDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ShippingDocumentSpecification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ShippingDocumentTypes flatMap { scalaxb.toXML[com.fedex.ship.stub.RequestedShippingDocumentType](_, Some("http://fedex.com/ws/ship/v17"), Some("ShippingDocumentTypes"), __scope, false) },
        __obj.CertificateOfOrigin map { scalaxb.toXML[com.fedex.ship.stub.CertificateOfOriginDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CertificateOfOrigin"), __scope, false) } getOrElse {Nil},
        __obj.CommercialInvoiceDetail map { scalaxb.toXML[com.fedex.ship.stub.CommercialInvoiceDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CommercialInvoiceDetail"), __scope, false) } getOrElse {Nil},
        __obj.CustomPackageDocumentDetail flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomDocumentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomPackageDocumentDetail"), __scope, false) },
        __obj.CustomShipmentDocumentDetail flatMap { scalaxb.toXML[com.fedex.ship.stub.CustomDocumentDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomShipmentDocumentDetail"), __scope, false) },
        __obj.ExportDeclarationDetail map { scalaxb.toXML[com.fedex.ship.stub.ExportDeclarationDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ExportDeclarationDetail"), __scope, false) } getOrElse {Nil},
        __obj.GeneralAgencyAgreementDetail map { scalaxb.toXML[com.fedex.ship.stub.GeneralAgencyAgreementDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("GeneralAgencyAgreementDetail"), __scope, false) } getOrElse {Nil},
        __obj.NaftaCertificateOfOriginDetail map { scalaxb.toXML[com.fedex.ship.stub.NaftaCertificateOfOriginDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("NaftaCertificateOfOriginDetail"), __scope, false) } getOrElse {Nil},
        __obj.Op900Detail map { scalaxb.toXML[com.fedex.ship.stub.Op900Detail](_, Some("http://fedex.com/ws/ship/v17"), Some("Op900Detail"), __scope, false) } getOrElse {Nil},
        __obj.DangerousGoodsShippersDeclarationDetail map { scalaxb.toXML[com.fedex.ship.stub.DangerousGoodsShippersDeclarationDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("DangerousGoodsShippersDeclarationDetail"), __scope, false) } getOrElse {Nil},
        __obj.FreightAddressLabelDetail map { scalaxb.toXML[com.fedex.ship.stub.FreightAddressLabelDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("FreightAddressLabelDetail"), __scope, false) } getOrElse {Nil},
        __obj.ReturnInstructionsDetail map { scalaxb.toXML[com.fedex.ship.stub.ReturnInstructionsDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("ReturnInstructionsDetail"), __scope, false) } getOrElse {Nil})

  }

  def buildStubShippingDocumentStockTypeFormat = new DefaultStubShippingDocumentStockTypeFormat {}
  trait DefaultStubShippingDocumentStockTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.ShippingDocumentStockType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.ShippingDocumentStockType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.ShippingDocumentStockType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.ShippingDocumentStockType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.ShippingDocumentStockType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubSignatureOptionDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.SignatureOptionDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("SignatureOptionDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.SignatureOptionDetail] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "OptionType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SignatureReleaseNumber")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.SignatureOptionDetail(scalaxb.fromXML[com.fedex.ship.stub.SignatureOptionType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.SignatureOptionDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.SignatureOptionType](__obj.OptionType, Some("http://fedex.com/ws/ship/v17"), Some("OptionType"), __scope, false),
        __obj.SignatureReleaseNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("SignatureReleaseNumber"), __scope, false) } getOrElse {Nil})

  }

  def buildStubSignatureOptionTypeFormat = new DefaultStubSignatureOptionTypeFormat {}
  trait DefaultStubSignatureOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SignatureOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SignatureOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SignatureOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SignatureOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SignatureOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubSmartPostAncillaryEndorsementTypeFormat = new DefaultStubSmartPostAncillaryEndorsementTypeFormat {}
  trait DefaultStubSmartPostAncillaryEndorsementTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostAncillaryEndorsementType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SmartPostAncillaryEndorsementType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SmartPostAncillaryEndorsementType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SmartPostAncillaryEndorsementType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SmartPostAncillaryEndorsementType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubSmartPostIndiciaTypeFormat = new DefaultStubSmartPostIndiciaTypeFormat {}
  trait DefaultStubSmartPostIndiciaTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostIndiciaType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SmartPostIndiciaType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SmartPostIndiciaType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SmartPostIndiciaType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SmartPostIndiciaType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubSmartPostShipmentDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.SmartPostShipmentDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("SmartPostShipmentDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.SmartPostShipmentDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProcessingOptionsRequested")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Indicia")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "AncillaryEndorsement")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HubId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerManifestId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.SmartPostShipmentDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SmartPostIndiciaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SmartPostAncillaryEndorsementType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.SmartPostShipmentDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ProcessingOptionsRequested map { scalaxb.toXML[com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested](_, Some("http://fedex.com/ws/ship/v17"), Some("ProcessingOptionsRequested"), __scope, false) } getOrElse {Nil},
        __obj.Indicia map { scalaxb.toXML[com.fedex.ship.stub.SmartPostIndiciaType](_, Some("http://fedex.com/ws/ship/v17"), Some("Indicia"), __scope, false) } getOrElse {Nil},
        __obj.AncillaryEndorsement map { scalaxb.toXML[com.fedex.ship.stub.SmartPostAncillaryEndorsementType](_, Some("http://fedex.com/ws/ship/v17"), Some("AncillaryEndorsement"), __scope, false) } getOrElse {Nil},
        __obj.HubId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("HubId"), __scope, false) } getOrElse {Nil},
        __obj.CustomerManifestId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerManifestId"), __scope, false) } getOrElse {Nil})

  }

  def buildStubSmartPostShipmentProcessingOptionTypeFormat = new DefaultStubSmartPostShipmentProcessingOptionTypeFormat {}
  trait DefaultStubSmartPostShipmentProcessingOptionTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SmartPostShipmentProcessingOptionType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SmartPostShipmentProcessingOptionType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SmartPostShipmentProcessingOptionType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SmartPostShipmentProcessingOptionType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SmartPostShipmentProcessingOptionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubSmartPostShipmentProcessingOptionsRequestedFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("SmartPostShipmentProcessingOptionsRequested")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested] =
      phrase(safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Options")) ^^
      { case p1 =>
      com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested(p1.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.SmartPostShipmentProcessingOptionType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.SmartPostShipmentProcessingOptionsRequested, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Options flatMap { scalaxb.toXML[com.fedex.ship.stub.SmartPostShipmentProcessingOptionType](_, Some("http://fedex.com/ws/ship/v17"), Some("Options"), __scope, false) })

  }

  def buildStubSpecialRatingAppliedTypeFormat = new DefaultStubSpecialRatingAppliedTypeFormat {}
  trait DefaultStubSpecialRatingAppliedTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SpecialRatingAppliedType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SpecialRatingAppliedType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SpecialRatingAppliedType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SpecialRatingAppliedType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SpecialRatingAppliedType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubStringBarcodeFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.StringBarcode] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("StringBarcode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.StringBarcode] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.StringBarcode(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.StringBarcodeType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.StringBarcode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.fedex.ship.stub.StringBarcodeType](_, Some("http://fedex.com/ws/ship/v17"), Some("Type"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  def buildStubStringBarcodeTypeFormat = new DefaultStubStringBarcodeTypeFormat {}
  trait DefaultStubStringBarcodeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.StringBarcodeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.StringBarcodeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.StringBarcodeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.StringBarcodeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.StringBarcodeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubSurchargeFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Surcharge] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Surcharge")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Surcharge] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SurchargeType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Level")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.Surcharge(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SurchargeType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.SurchargeLevelType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.Money](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Surcharge, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SurchargeType map { scalaxb.toXML[com.fedex.ship.stub.SurchargeType](_, Some("http://fedex.com/ws/ship/v17"), Some("SurchargeType"), __scope, false) } getOrElse {Nil},
        __obj.Level map { scalaxb.toXML[com.fedex.ship.stub.SurchargeLevelType](_, Some("http://fedex.com/ws/ship/v17"), Some("Level"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.Money](__obj.Amount, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false))

  }

  def buildStubSurchargeLevelTypeFormat = new DefaultStubSurchargeLevelTypeFormat {}
  trait DefaultStubSurchargeLevelTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SurchargeLevelType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SurchargeLevelType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SurchargeLevelType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SurchargeLevelType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SurchargeLevelType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubSurchargeTypeFormat = new DefaultStubSurchargeTypeFormat {}
  trait DefaultStubSurchargeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.SurchargeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.SurchargeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.SurchargeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.SurchargeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.SurchargeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubTaxFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Tax] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Tax")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Tax] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TaxType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.fedex.ship.stub.Tax(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TaxType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Tax, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TaxType map { scalaxb.toXML[com.fedex.ship.stub.TaxType](_, Some("http://fedex.com/ws/ship/v17"), Some("TaxType"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  def buildStubTaxTypeFormat = new DefaultStubTaxTypeFormat {}
  trait DefaultStubTaxTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.TaxType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.TaxType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.TaxType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.TaxType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.TaxType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubTaxesOrMiscellaneousChargeTypeFormat = new DefaultStubTaxesOrMiscellaneousChargeTypeFormat {}
  trait DefaultStubTaxesOrMiscellaneousChargeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.TaxesOrMiscellaneousChargeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.TaxesOrMiscellaneousChargeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.TaxesOrMiscellaneousChargeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.TaxesOrMiscellaneousChargeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.TaxesOrMiscellaneousChargeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubTaxpayerIdentificationFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.TaxpayerIdentification] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("TaxpayerIdentification")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.TaxpayerIdentification] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TinType")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Number")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Usage")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "EffectiveDate")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ExpirationDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.TaxpayerIdentification(scalaxb.fromXML[com.fedex.ship.stub.TinType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.TaxpayerIdentification, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.TinType](__obj.TinType, Some("http://fedex.com/ws/ship/v17"), Some("TinType"), __scope, false),
        scalaxb.toXML[String](__obj.Number, Some("http://fedex.com/ws/ship/v17"), Some("Number"), __scope, false),
        __obj.Usage map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Usage"), __scope, false) } getOrElse {Nil},
        __obj.EffectiveDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("EffectiveDate"), __scope, false) } getOrElse {Nil},
        __obj.ExpirationDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://fedex.com/ws/ship/v17"), Some("ExpirationDate"), __scope, false) } getOrElse {Nil})

  }

  def buildStubTinTypeFormat = new DefaultStubTinTypeFormat {}
  trait DefaultStubTinTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.TinType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.TinType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.TinType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.TinType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.TinType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubTrackingIdFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.TrackingId] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("TrackingId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.TrackingId] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TrackingIdType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FormId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UspsApplicationId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TrackingNumber")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.TrackingId(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TrackingIdType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.TrackingId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TrackingIdType map { scalaxb.toXML[com.fedex.ship.stub.TrackingIdType](_, Some("http://fedex.com/ws/ship/v17"), Some("TrackingIdType"), __scope, false) } getOrElse {Nil},
        __obj.FormId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("FormId"), __scope, false) } getOrElse {Nil},
        __obj.UspsApplicationId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("UspsApplicationId"), __scope, false) } getOrElse {Nil},
        __obj.TrackingNumber map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("TrackingNumber"), __scope, false) } getOrElse {Nil})

  }

  def buildStubTrackingIdTypeFormat = new DefaultStubTrackingIdTypeFormat {}
  trait DefaultStubTrackingIdTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.TrackingIdType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.TrackingIdType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.TrackingIdType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.TrackingIdType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.TrackingIdType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubTransactionDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.TransactionDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("TransactionDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.TransactionDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerTransactionId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Localization")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.TransactionDetail(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Localization](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.TransactionDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CustomerTransactionId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerTransactionId"), __scope, false) } getOrElse {Nil},
        __obj.Localization map { scalaxb.toXML[com.fedex.ship.stub.Localization](_, Some("http://fedex.com/ws/ship/v17"), Some("Localization"), __scope, false) } getOrElse {Nil})

  }

  def buildStubTransitTimeTypeFormat = new DefaultStubTransitTimeTypeFormat {}
  trait DefaultStubTransitTimeTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.TransitTimeType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.TransitTimeType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.TransitTimeType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.TransitTimeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.TransitTimeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubUploadDocumentIdProducerFormat = new DefaultStubUploadDocumentIdProducerFormat {}
  trait DefaultStubUploadDocumentIdProducerFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.UploadDocumentIdProducer] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.UploadDocumentIdProducer] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.UploadDocumentIdProducer.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.UploadDocumentIdProducer.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.UploadDocumentIdProducer, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildStubUploadDocumentProducerTypeFormat = new DefaultStubUploadDocumentProducerTypeFormat {}
  trait DefaultStubUploadDocumentProducerTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.UploadDocumentProducerType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.UploadDocumentProducerType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.UploadDocumentProducerType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.UploadDocumentProducerType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.UploadDocumentProducerType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubUploadDocumentReferenceDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.UploadDocumentReferenceDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("UploadDocumentReferenceDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.UploadDocumentReferenceDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LineNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "CustomerReference")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentProducer")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentType")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentId")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "DocumentIdProducer")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.fedex.ship.stub.UploadDocumentReferenceDetail(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.UploadDocumentProducerType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.UploadDocumentType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.fedex.ship.stub.UploadDocumentIdProducer](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.UploadDocumentReferenceDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.LineNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("LineNumber"), __scope, false) } getOrElse {Nil},
        __obj.CustomerReference map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("CustomerReference"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.DocumentProducer map { scalaxb.toXML[com.fedex.ship.stub.UploadDocumentProducerType](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentProducer"), __scope, false) } getOrElse {Nil},
        __obj.DocumentType map { scalaxb.toXML[com.fedex.ship.stub.UploadDocumentType](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentType"), __scope, false) } getOrElse {Nil},
        __obj.DocumentId map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentId"), __scope, false) } getOrElse {Nil},
        __obj.DocumentIdProducer map { scalaxb.toXML[com.fedex.ship.stub.UploadDocumentIdProducer](_, Some("http://fedex.com/ws/ship/v17"), Some("DocumentIdProducer"), __scope, false) } getOrElse {Nil})

  }

  def buildStubUploadDocumentTypeFormat = new DefaultStubUploadDocumentTypeFormat {}
  trait DefaultStubUploadDocumentTypeFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.UploadDocumentType] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.UploadDocumentType] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.UploadDocumentType.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.UploadDocumentType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.UploadDocumentType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubValidateShipmentRequestFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ValidateShipmentRequest] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ValidateShipmentRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ValidateShipmentRequest] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "WebAuthenticationDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ClientDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TransactionDetail")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Version")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RequestedShipment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.ValidateShipmentRequest(scalaxb.fromXML[com.fedex.ship.stub.WebAuthenticationDetail](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.ClientDetail](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.TransactionDetail](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.VersionId](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.fedex.ship.stub.RequestedShipment](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ValidateShipmentRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.WebAuthenticationDetail](__obj.WebAuthenticationDetail, Some("http://fedex.com/ws/ship/v17"), Some("WebAuthenticationDetail"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.ClientDetail](__obj.ClientDetail, Some("http://fedex.com/ws/ship/v17"), Some("ClientDetail"), __scope, false),
        __obj.TransactionDetail map { scalaxb.toXML[com.fedex.ship.stub.TransactionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("TransactionDetail"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.VersionId](__obj.Version, Some("http://fedex.com/ws/ship/v17"), Some("Version"), __scope, false),
        scalaxb.toXML[com.fedex.ship.stub.RequestedShipment](__obj.RequestedShipment, Some("http://fedex.com/ws/ship/v17"), Some("RequestedShipment"), __scope, false))

  }

  trait DefaultStubValidatedHazardousCommodityContentFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ValidatedHazardousCommodityContent] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ValidatedHazardousCommodityContent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ValidatedHazardousCommodityContent] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "MassPoints")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Options")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "NetExplosiveDetail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.fedex.ship.stub.ValidatedHazardousCommodityContent(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.ValidatedHazardousCommodityDescription](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityQuantityDetail](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityOptionDetail](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.fedex.ship.stub.NetExplosiveDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ValidatedHazardousCommodityContent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Description map { scalaxb.toXML[com.fedex.ship.stub.ValidatedHazardousCommodityDescription](_, Some("http://fedex.com/ws/ship/v17"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Quantity map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityQuantityDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Quantity"), __scope, false) } getOrElse {Nil},
        __obj.MassPoints map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("MassPoints"), __scope, false) } getOrElse {Nil},
        __obj.Options map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityOptionDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("Options"), __scope, false) } getOrElse {Nil},
        __obj.NetExplosiveDetail map { scalaxb.toXML[com.fedex.ship.stub.NetExplosiveDetail](_, Some("http://fedex.com/ws/ship/v17"), Some("NetExplosiveDetail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubValidatedHazardousCommodityDescriptionFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ValidatedHazardousCommodityDescription] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ValidatedHazardousCommodityDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ValidatedHazardousCommodityDescription] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SequenceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PackingInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProperShippingName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ProperShippingNameAndDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TechnicalName")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardClass")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SubsidiaryClasses")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Symbols")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TunnelRestrictionCode")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "SpecialProvisions")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Attributes")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Authorization")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "LabelText")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      com.fedex.ship.stub.ValidatedHazardousCommodityDescription(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityPackingGroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.HazardousCommodityAttributeType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ValidatedHazardousCommodityDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Id map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Id"), __scope, false) } getOrElse {Nil},
        __obj.SequenceNumber map { scalaxb.toXML[BigInt](_, Some("http://fedex.com/ws/ship/v17"), Some("SequenceNumber"), __scope, false) } getOrElse {Nil},
        __obj.PackingGroup map { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityPackingGroupType](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingGroup"), __scope, false) } getOrElse {Nil},
        __obj.PackingInstructions map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("PackingInstructions"), __scope, false) } getOrElse {Nil},
        __obj.ProperShippingName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ProperShippingName"), __scope, false) } getOrElse {Nil},
        __obj.ProperShippingNameAndDescription map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("ProperShippingNameAndDescription"), __scope, false) } getOrElse {Nil},
        __obj.TechnicalName map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("TechnicalName"), __scope, false) } getOrElse {Nil},
        __obj.HazardClass map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardClass"), __scope, false) } getOrElse {Nil},
        __obj.SubsidiaryClasses flatMap { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("SubsidiaryClasses"), __scope, false) },
        __obj.Symbols map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Symbols"), __scope, false) } getOrElse {Nil},
        __obj.TunnelRestrictionCode map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("TunnelRestrictionCode"), __scope, false) } getOrElse {Nil},
        __obj.SpecialProvisions map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("SpecialProvisions"), __scope, false) } getOrElse {Nil},
        __obj.AttributesValue flatMap { scalaxb.toXML[com.fedex.ship.stub.HazardousCommodityAttributeType](_, Some("http://fedex.com/ws/ship/v17"), Some("Attributes"), __scope, false) },
        __obj.Authorization map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("Authorization"), __scope, false) } getOrElse {Nil},
        __obj.LabelText map { scalaxb.toXML[String](_, Some("http://fedex.com/ws/ship/v17"), Some("LabelText"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubValidatedHazardousContainerFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.ValidatedHazardousContainer] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("ValidatedHazardousContainer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.ValidatedHazardousContainer] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "QValue")) ~ 
      safeRep(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "HazardousCommodities")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.ValidatedHazardousContainer(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[com.fedex.ship.stub.ValidatedHazardousCommodityContent](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.ValidatedHazardousContainer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.QValue map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("QValue"), __scope, false) } getOrElse {Nil},
        __obj.HazardousCommodities flatMap { scalaxb.toXML[com.fedex.ship.stub.ValidatedHazardousCommodityContent](_, Some("http://fedex.com/ws/ship/v17"), Some("HazardousCommodities"), __scope, false) })

  }

  trait DefaultStubVariableHandlingChargeDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.VariableHandlingChargeDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("VariableHandlingChargeDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.VariableHandlingChargeDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FixedValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PercentValue")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateElementBasis")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "RateTypeBasis")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.VariableHandlingChargeDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RateElementBasisType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.RateTypeBasisType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.VariableHandlingChargeDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.FixedValue map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("FixedValue"), __scope, false) } getOrElse {Nil},
        __obj.PercentValue map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("PercentValue"), __scope, false) } getOrElse {Nil},
        __obj.RateElementBasis map { scalaxb.toXML[com.fedex.ship.stub.RateElementBasisType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateElementBasis"), __scope, false) } getOrElse {Nil},
        __obj.RateTypeBasis map { scalaxb.toXML[com.fedex.ship.stub.RateTypeBasisType](_, Some("http://fedex.com/ws/ship/v17"), Some("RateTypeBasis"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubVariableHandlingChargesFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.VariableHandlingCharges] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("VariableHandlingCharges")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.VariableHandlingCharges] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "VariableHandlingCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "FixedVariableHandlingCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "PercentVariableHandlingCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "TotalCustomerCharge")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.VariableHandlingCharges(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.fedex.ship.stub.Money](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.VariableHandlingCharges, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.VariableHandlingCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("VariableHandlingCharge"), __scope, false) } getOrElse {Nil},
        __obj.FixedVariableHandlingCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("FixedVariableHandlingCharge"), __scope, false) } getOrElse {Nil},
        __obj.PercentVariableHandlingCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("PercentVariableHandlingCharge"), __scope, false) } getOrElse {Nil},
        __obj.TotalCustomerCharge map { scalaxb.toXML[com.fedex.ship.stub.Money](_, Some("http://fedex.com/ws/ship/v17"), Some("TotalCustomerCharge"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStubVolumeFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Volume] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Volume")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Volume] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ~ 
      opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.Volume(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.VolumeUnits](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Volume, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Units map { scalaxb.toXML[com.fedex.ship.stub.VolumeUnits](_, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[BigDecimal](_, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  def buildStubVolumeUnitsFormat = new DefaultStubVolumeUnitsFormat {}
  trait DefaultStubVolumeUnitsFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.VolumeUnits] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.VolumeUnits] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.VolumeUnits.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.VolumeUnits.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.VolumeUnits, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubWeightFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.Weight] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("Weight")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.Weight] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Units")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Value")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.Weight(scalaxb.fromXML[com.fedex.ship.stub.WeightUnits](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.Weight, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.fedex.ship.stub.WeightUnits](__obj.Units, Some("http://fedex.com/ws/ship/v17"), Some("Units"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.Value, Some("http://fedex.com/ws/ship/v17"), Some("Value"), __scope, false))

  }

  def buildStubWeightUnitsFormat = new DefaultStubWeightUnitsFormat {}
  trait DefaultStubWeightUnitsFormat extends scalaxb.XMLFormat[com.fedex.ship.stub.WeightUnits] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.fedex.ship.stub.WeightUnits] = seq match {
      case elem: scala.xml.Elem => Right(com.fedex.ship.stub.WeightUnits.fromString(elem.text, elem.scope))
      case _ => Right(com.fedex.ship.stub.WeightUnits.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.fedex.ship.stub.WeightUnits, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultStubWebAuthenticationDetailFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.WebAuthenticationDetail] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("WebAuthenticationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.WebAuthenticationDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ParentCredential")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "UserCredential")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.WebAuthenticationDetail(p1.headOption map { scalaxb.fromXML[com.fedex.ship.stub.WebAuthenticationCredential](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.fedex.ship.stub.WebAuthenticationCredential](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.WebAuthenticationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ParentCredential map { scalaxb.toXML[com.fedex.ship.stub.WebAuthenticationCredential](_, Some("http://fedex.com/ws/ship/v17"), Some("ParentCredential"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.fedex.ship.stub.WebAuthenticationCredential](__obj.UserCredential, Some("http://fedex.com/ws/ship/v17"), Some("UserCredential"), __scope, false))

  }

  trait DefaultStubWebAuthenticationCredentialFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.WebAuthenticationCredential] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("WebAuthenticationCredential")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.WebAuthenticationCredential] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Key")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Password")) ^^
      { case p1 ~ p2 =>
      com.fedex.ship.stub.WebAuthenticationCredential(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.WebAuthenticationCredential, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Key, Some("http://fedex.com/ws/ship/v17"), Some("Key"), __scope, false),
        scalaxb.toXML[String](__obj.Password, Some("http://fedex.com/ws/ship/v17"), Some("Password"), __scope, false))

  }

  trait DefaultStubVersionIdFormat extends scalaxb.ElemNameParser[com.fedex.ship.stub.VersionId] {
    val targetNamespace: Option[String] = Some("http://fedex.com/ws/ship/v17")
    
    override def typeName: Option[String] = Some("VersionId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.fedex.ship.stub.VersionId] =
      phrase((scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "ServiceId")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Major")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Intermediate")) ~ 
      (scalaxb.ElemName(Some("http://fedex.com/ws/ship/v17"), "Minor")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.fedex.ship.stub.VersionId(scalaxb.fromXML[String](scala.xml.Text("ship"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](scala.xml.Text("17"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](scala.xml.Text("0"), scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.fedex.ship.stub.VersionId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ServiceId, Some("http://fedex.com/ws/ship/v17"), Some("ServiceId"), __scope, false),
        scalaxb.toXML[Int](__obj.Major, Some("http://fedex.com/ws/ship/v17"), Some("Major"), __scope, false),
        scalaxb.toXML[Int](__obj.Intermediate, Some("http://fedex.com/ws/ship/v17"), Some("Intermediate"), __scope, false),
        scalaxb.toXML[Int](__obj.Minor, Some("http://fedex.com/ws/ship/v17"), Some("Minor"), __scope, false))

  }


  



}

